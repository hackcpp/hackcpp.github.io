const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":512,\"nextId\":512,\"documentIds\":{\"0\":\"1\",\"1\":\"1#介绍\",\"2\":\"1#我擅长什么\",\"3\":\"1#如何联系我\",\"4\":\"2\",\"5\":\"2#数组\",\"6\":\"2#数组常用操作\",\"7\":\"2#初始化数组\",\"8\":\"2#访问元素\",\"9\":\"2#插入元素\",\"10\":\"2#删除元素\",\"11\":\"2#遍历数组\",\"12\":\"2#查找元素\",\"13\":\"2#扩容数组\",\"14\":\"2#数组的优点与局限性\",\"15\":\"2#数组典型应用\",\"16\":\"2#链表\",\"17\":\"2#链表常用操作\",\"18\":\"2#初始化链表\",\"19\":\"2#插入节点\",\"20\":\"2#删除节点\",\"21\":\"2#访问节点\",\"22\":\"2#查找节点\",\"23\":\"2#数组-vs-链表\",\"24\":\"2#常见链表类型\",\"25\":\"2#链表典型应用\",\"26\":\"2#列表\",\"27\":\"2#列表常用操作\",\"28\":\"2#初始化列表\",\"29\":\"2#访问元素-1\",\"30\":\"2#插入与删除元素\",\"31\":\"2#遍历列表\",\"32\":\"2#列表实现\",\"33\":\"2#重点回顾\",\"34\":\"2#q-a\",\"35\":\"2@0\",\"36\":\"2@1\",\"37\":\"3\",\"38\":\"3#队列\",\"39\":\"3#队列常用操作\",\"40\":\"3#队列实现\",\"41\":\"3#基于链表的实现\",\"42\":\"3#基于数组的实现\",\"43\":\"3#队列典型应用\",\"44\":\"3#栈\",\"45\":\"3#栈的常用操作\",\"46\":\"3#栈的实现\",\"47\":\"3#基于链表的实现-1\",\"48\":\"3#基于数组的实现-1\",\"49\":\"3#两种实现对比\",\"50\":\"3#栈的典型应用\",\"51\":\"3#重点回顾\",\"52\":\"3#q-a\",\"53\":\"3@0\",\"54\":\"3@1\",\"55\":\"4\",\"56\":\"4#哈希表\",\"57\":\"4#哈希表常用操作\",\"58\":\"4#哈希表简单实现\",\"59\":\"4#哈希冲突与扩容\",\"60\":\"4#哈希冲突\",\"61\":\"4#链式地址\",\"62\":\"4#开放寻址\",\"63\":\"4#线性探测\",\"64\":\"4#平方探测\",\"65\":\"4#多次哈希\",\"66\":\"4#编程语言的选择\",\"67\":\"4#哈希算法\",\"68\":\"4#哈希算法的目标\",\"69\":\"4#哈希算法的设计\",\"70\":\"4#常见哈希算法\",\"71\":\"4#数据结构的哈希值\",\"72\":\"4#重点回顾\",\"73\":\"4#q-a\",\"74\":\"4@0\",\"75\":\"4@1\",\"76\":\"5\",\"77\":\"5#二叉树\",\"78\":\"5#二叉树常见术语\",\"79\":\"5#二叉树基本操作\",\"80\":\"5#初始化二叉树\",\"81\":\"5#插入与删除节点\",\"82\":\"5#常见二叉树类型\",\"83\":\"5#完美二叉树\",\"84\":\"5#完全二叉树\",\"85\":\"5#平衡二叉树\",\"86\":\"5#二叉树的退化\",\"87\":\"5#二叉搜索树\",\"88\":\"5#二叉搜索树的操作\",\"89\":\"5#查找节点\",\"90\":\"5#插入节点\",\"91\":\"5#删除节点\",\"92\":\"5#中序遍历有序\",\"93\":\"5#二叉搜索树的效率\",\"94\":\"5#二叉搜索树常见应用\",\"95\":\"5#avl-树\",\"96\":\"5#avl-树常见术语\",\"97\":\"5#节点高度\",\"98\":\"5#节点平衡因子\",\"99\":\"5#avl-树旋转\",\"100\":\"5#右旋\",\"101\":\"5#左旋\",\"102\":\"5#先左旋后右旋\",\"103\":\"5#先右旋后左旋\",\"104\":\"5#旋转的选择\",\"105\":\"5#avl-树常用操作\",\"106\":\"5#插入节点-1\",\"107\":\"5#删除节点-1\",\"108\":\"5#查找节点-1\",\"109\":\"5#avl-树典型应用\",\"110\":\"5#重点回顾\",\"111\":\"5#q-a\",\"112\":\"5@0\",\"113\":\"5@1\",\"114\":\"6\",\"115\":\"6@0\",\"116\":\"7\",\"117\":\"7#设计模式\",\"118\":\"7#设计原则\",\"119\":\"7#关于架构设计的一点思考\",\"120\":\"7@0\",\"121\":\"7@1\",\"122\":\"8\",\"123\":\"8#概述\",\"124\":\"8#结构\",\"125\":\"8#示例\",\"126\":\"8@0\",\"127\":\"8@1\",\"128\":\"9\",\"129\":\"9#概述\",\"130\":\"9#结构\",\"131\":\"9#示例\",\"132\":\"9@0\",\"133\":\"9@1\",\"134\":\"10\",\"135\":\"10#概述\",\"136\":\"10#结构\",\"137\":\"10#示例\",\"138\":\"10@0\",\"139\":\"10@1\",\"140\":\"11\",\"141\":\"11#概述\",\"142\":\"11#结构\",\"143\":\"11#示例\",\"144\":\"11@0\",\"145\":\"11@1\",\"146\":\"12\",\"147\":\"12#概述\",\"148\":\"12#工厂模式\",\"149\":\"12#结构\",\"150\":\"12#示例\",\"151\":\"12#抽象工厂模式\",\"152\":\"12#结构-1\",\"153\":\"12#示例-1\",\"154\":\"12@0\",\"155\":\"12@1\",\"156\":\"13\",\"157\":\"13#概述\",\"158\":\"13#结构\",\"159\":\"13#示例\",\"160\":\"13#应用场景\",\"161\":\"13@0\",\"162\":\"13@1\",\"163\":\"14\",\"164\":\"14#mvvm-的核心概念\",\"165\":\"14#_1-model-模型\",\"166\":\"14#_2-view-视图\",\"167\":\"14#_3-viewmodel-视图模型\",\"168\":\"14#mvvm-的工作原理\",\"169\":\"14#mvvm-与-mvc、mvp-的对比\",\"170\":\"14#mvvm-的优缺点\",\"171\":\"14#优点\",\"172\":\"14#缺点\",\"173\":\"14#mvvm-应用示例-使用-vue-js\",\"174\":\"14#总结\",\"175\":\"14@0\",\"176\":\"14@1\",\"177\":\"15\",\"178\":\"15#model-view-框架的核心概念\",\"179\":\"15#model-模型\",\"180\":\"15#view-视图\",\"181\":\"15#delegate-委托\",\"182\":\"15#model-view-的数据流\",\"183\":\"15#数据绑定与更新\",\"184\":\"15#qt-中的-model-view-与-mvc\",\"185\":\"15#自定义模型\",\"186\":\"15#代理模型\",\"187\":\"15@0\",\"188\":\"15@1\",\"189\":\"16\",\"190\":\"16@0\",\"191\":\"17\",\"192\":\"17@0\",\"193\":\"18\",\"194\":\"18#入门推荐\",\"195\":\"18#进阶推荐\",\"196\":\"18@1\",\"197\":\"19\",\"198\":\"19#_1-static-关键字的作用\",\"199\":\"19#_2-new-delete与malloc-new的区别\",\"200\":\"19#_3-假设有数组-int-a-10-a、-a-0-与-a-这3者的区别\",\"201\":\"19#_4-宏与constexpr-区别\",\"202\":\"19#_5-extern-c\",\"203\":\"19#_6-const-关键字的作用\",\"204\":\"19#继承与多态\",\"205\":\"19#c-的多态如何实现\",\"206\":\"19#基类的虚函数表存放在内存的什么区-虚表指针vptr的初始化时间\",\"207\":\"19#构造函数和析构函数可以调用虚函数\",\"208\":\"19#构造函数为什么不能为虚函数-析构函数为什么要虚函数\",\"209\":\"19@0\",\"210\":\"19@1\",\"211\":\"20\",\"212\":\"20#进程状态\",\"213\":\"20#进程的基本状态\",\"214\":\"20#进程状态之间的转换\",\"215\":\"20#状态转换示意图\",\"216\":\"20#僵尸进程\",\"217\":\"20#僵尸进程的影响\",\"218\":\"20#如何避免产生僵尸进程\",\"219\":\"20#守护进程\",\"220\":\"20#代码示例\",\"221\":\"20#代码解释\",\"222\":\"20#注意事项\",\"223\":\"20#进程间通信\",\"224\":\"20#_1-管道-pipes\",\"225\":\"20#_2-消息队列-message-queues\",\"226\":\"20#_3-共享内存-shared-memory\",\"227\":\"20#_4-信号量-semaphores\",\"228\":\"20#_5-信号-signals\",\"229\":\"20#_6-套接字-sockets\",\"230\":\"20#总结\",\"231\":\"20@0\",\"232\":\"20@1\",\"233\":\"21\",\"234\":\"21#如何创建线程\",\"235\":\"21#线程同步机制\",\"236\":\"21#_1-互斥量-mutex\",\"237\":\"21#_2-读写锁-shared-mutex\",\"238\":\"21#_3-条件变量-condition-variable\",\"239\":\"21#_4-原子操作-atomic-operations\",\"240\":\"21#_5-信号量-semaphore\",\"241\":\"21#_6-自旋锁-spinlock\",\"242\":\"21#_7-屏障-barrier\",\"243\":\"21#_8-锁存器-latch\",\"244\":\"21#死锁\",\"245\":\"21#无锁编程\",\"246\":\"21#_1-基本概念\",\"247\":\"21#_2-c-中的原子操作\",\"248\":\"21#_3-使用原子变量实现无锁队列\",\"249\":\"21#_4-代码结构和作用\",\"250\":\"21#_5-内存顺序-memory-order\",\"251\":\"21@0\",\"252\":\"21@1\",\"253\":\"22\",\"254\":\"22#新增线程编程相关模块\",\"255\":\"22#std-thread相关\",\"256\":\"22#std-mutex相关\",\"257\":\"22#std-lock相关\",\"258\":\"22#std-atomic相关\",\"259\":\"22#std-call-once相关\",\"260\":\"22#std-condition-variable相关\",\"261\":\"22#std-future相关\",\"262\":\"22#async相关\",\"263\":\"22#性能优化\",\"264\":\"22#内存管理-智能指针\",\"265\":\"22#std-shared-ptr\",\"266\":\"22#std-unqi-ptr\",\"267\":\"22#std-weak-ptr\",\"268\":\"22#右值引用和移动语义\",\"269\":\"22#容器新增-操作减少内存拷贝和移动\",\"270\":\"22#语法糖\",\"271\":\"22#可变模块参数\",\"272\":\"22#auto-自动推导\",\"273\":\"22#for-range-容器遍历\",\"274\":\"22#lamada-匿名函数\",\"275\":\"22#enum\",\"276\":\"22@0\",\"277\":\"22@1\",\"278\":\"23\",\"279\":\"23@0\",\"280\":\"24\",\"281\":\"24@1\",\"282\":\"25\",\"283\":\"25#什么是-constexpr\",\"284\":\"25#编译时加密与运行时解密的工作原理\",\"285\":\"25#实现示例\",\"286\":\"25#代码详解\",\"287\":\"25@0\",\"288\":\"25@1\",\"289\":\"26\",\"290\":\"26#tcp状态图解释\",\"291\":\"26#状态转换图\",\"292\":\"26#状态转换的简要说明\",\"293\":\"26#状态的作用\",\"294\":\"26#总结\",\"295\":\"26@0\",\"296\":\"26@1\",\"297\":\"27\",\"298\":\"27#waitpid-的语法\",\"299\":\"27#waitpid-的返回值\",\"300\":\"27#status-变量解释\",\"301\":\"27#示例代码\",\"302\":\"27#代码解释\",\"303\":\"27#waitpid-的常见应用\",\"304\":\"27#总结\",\"305\":\"27@0\",\"306\":\"27@1\",\"307\":\"28\",\"308\":\"28#波形绘制中-用到了策略模式-模版方法\",\"309\":\"28#工厂方法模式-内存池-用于创建频繁的对象\",\"310\":\"28#利用观察者模式-实现preference-配置更改的更新\",\"311\":\"28#拨测任务执行中用到了桥接模式-将任务逻辑和浏览器实现进行分离\",\"312\":\"28@0\",\"313\":\"28@1\",\"314\":\"29\",\"315\":\"29#环境准备\",\"316\":\"29#编译-linux-内核源码\",\"317\":\"29#启动文件系统制作\",\"318\":\"29#安装-qemu\",\"319\":\"29#使用-qemu-启动内核\",\"320\":\"29#使用-gdb-调试内核\",\"321\":\"29#常用-gdb-命令\",\"322\":\"29#参考\",\"323\":\"29@0\",\"324\":\"29@1\",\"325\":\"30\",\"326\":\"30#http-基础知识\",\"327\":\"30#请求-响应模型\",\"328\":\"30#http-状态码\",\"329\":\"30#http-头\",\"330\":\"30#url-和-uri\",\"331\":\"30#http-方法的幂等性和安全性\",\"332\":\"30#http-协议版本\",\"333\":\"30#http-1-0-和-http-1-1\",\"334\":\"30#http-2\",\"335\":\"30#http-3\",\"336\":\"30#安全性\",\"337\":\"30#https\",\"338\":\"30#cors-跨域资源共享\",\"339\":\"30#身份验证\",\"340\":\"30#csrf-xss-攻击\",\"341\":\"30#http-缓存\",\"342\":\"30#缓存控制头\",\"343\":\"30#强缓存和协商缓存\",\"344\":\"30#cdn-和缓存层\",\"345\":\"30#http-在实际开发中的应用\",\"346\":\"30#api-开发和调用\",\"347\":\"30#调试工具\",\"348\":\"30#websocket\",\"349\":\"30#http-性能优化\",\"350\":\"30#压缩\",\"351\":\"30#请求优化\",\"352\":\"30#http-2-和-http-3-的性能优势\",\"353\":\"30#高级-http-特性\",\"354\":\"30#代理和负载均衡\",\"355\":\"30#webhooks\",\"356\":\"30#sse-server-sent-events\",\"357\":\"30#http-的扩展和定制\",\"358\":\"30#http-扩展机制\",\"359\":\"30#传输编码\",\"360\":\"30#http-的错误处理\",\"361\":\"30#重试策略\",\"362\":\"30#网络故障恢复\",\"363\":\"30#http-协议在架构中的角色\",\"364\":\"30#微服务通信\",\"365\":\"30#异步-http-调用\",\"366\":\"30#总结\",\"367\":\"30@0\",\"368\":\"30@1\",\"369\":\"31\",\"370\":\"31#数据库-database-操作\",\"371\":\"31#创建数据库\",\"372\":\"31#查看数据库\",\"373\":\"31#选择数据库\",\"374\":\"31#删除数据库\",\"375\":\"31#数据表-table-操作\",\"376\":\"31#创建表\",\"377\":\"31#查看表结构\",\"378\":\"31#查看表内容\",\"379\":\"31#修改表\",\"380\":\"31#重命名表\",\"381\":\"31#删除表\",\"382\":\"31#数据行操作\",\"383\":\"31#插入数据\",\"384\":\"31#更新数据\",\"385\":\"31#删除数据\",\"386\":\"31#查询数据\",\"387\":\"31#基础查询操作\",\"388\":\"31#条件查询\",\"389\":\"31#排序查询\",\"390\":\"31#分组查询\",\"391\":\"31#聚合查询\",\"392\":\"31#联接查询\",\"393\":\"31#子查询\",\"394\":\"31#exists-子查询\",\"395\":\"31#联合查询\",\"396\":\"31#分页查询\",\"397\":\"31#复杂查询组合\",\"398\":\"31#总结\",\"399\":\"31#参考\",\"400\":\"31@0\",\"401\":\"31@1\",\"402\":\"32\",\"403\":\"32#元字符-metacharacters\",\"404\":\"32#基本元字符\",\"405\":\"32#特殊字符类\",\"406\":\"32#字符集与范围\",\"407\":\"32#边界匹配\",\"408\":\"32#量词-quantifiers\",\"409\":\"32#常用量词\",\"410\":\"32#数量范围的量词\",\"411\":\"32#懒惰量词\",\"412\":\"32#正则表达式的常见应用场景\",\"413\":\"32#参考\",\"414\":\"32@0\",\"415\":\"32@1\",\"416\":\"33\",\"417\":\"33@0\",\"418\":\"34\",\"419\":\"34@0\",\"420\":\"35\",\"421\":\"36\",\"422\":\"36@0\",\"423\":\"37\",\"424\":\"37#repository-操作\",\"425\":\"37#_1-git-init\",\"426\":\"37#_2-git-clone\",\"427\":\"37#_3-git-remote\",\"428\":\"37#修改管理\",\"429\":\"37#_1-git-add\",\"430\":\"37#_2-git-commit\",\"431\":\"37#_3-git-status\",\"432\":\"37#_4-git-log\",\"433\":\"37#_5-git-diff\",\"434\":\"37#_6-git-checkout\",\"435\":\"37#_7-git-stash\",\"436\":\"37#_8-git-reset\",\"437\":\"37#分支管理\",\"438\":\"37#_1-git-checkout\",\"439\":\"37#_2-git-branch\",\"440\":\"37#_3-git-merge\",\"441\":\"37#_4-git-rebase\",\"442\":\"37#数据同步\",\"443\":\"37#_1-git-pull\",\"444\":\"37#_2-git-push\",\"445\":\"37#_3-git-fetch\",\"446\":\"37#管理-submodule\",\"447\":\"37#_1-添加-submodule\",\"448\":\"37#_2-初始化和更新-submodule\",\"449\":\"37#_3-查看-submodule-状态\",\"450\":\"37#_4-更新-submodule-到最新版本\",\"451\":\"37#_5-删除-submodule\",\"452\":\"37#_6-将-submodule-更新到特定的-commit\",\"453\":\"37#_7-嵌套-submodule\",\"454\":\"37#_8-处理-submodule-的常见问题\",\"455\":\"37#参考资料\",\"456\":\"37@0\",\"457\":\"37@1\",\"458\":\"38\",\"459\":\"38#安装-cmake\",\"460\":\"38#cmake-基本概念\",\"461\":\"38#cmakelists-txt-的基本结构\",\"462\":\"38#编写简单的-cmake-项目\",\"463\":\"38#项目结构\",\"464\":\"38#main-cpp-示例\",\"465\":\"38#cmakelists-txt-示例\",\"466\":\"38#生成并构建项目\",\"467\":\"38#_5-1-创建构建目录\",\"468\":\"38#_5-2-运行-cmake-命令\",\"469\":\"38#_5-3-构建项目\",\"470\":\"38#常用-cmake-命令\",\"471\":\"38#查找包和依赖项\",\"472\":\"38#自定义编译选项\",\"473\":\"38#安装目标\",\"474\":\"38#常见生成器\",\"475\":\"38#参考\",\"476\":\"38@0\",\"477\":\"38@1\",\"478\":\"39\",\"479\":\"39#gdb-基本用法\",\"480\":\"39#启动-gdb\",\"481\":\"39#启动程序\",\"482\":\"39#设置断点\",\"483\":\"39#单步执行\",\"484\":\"39#检查程序状态\",\"485\":\"39#运行时动态分析\",\"486\":\"39#高级功能\",\"487\":\"39#栈帧调试\",\"488\":\"39#动态库调试\",\"489\":\"39#多线程调试\",\"490\":\"39#调试核心转储文件-core-dump\",\"491\":\"39#参考\",\"492\":\"39@0\",\"493\":\"39@1\",\"494\":\"40\",\"495\":\"40#gdbinit-文件的作用\",\"496\":\"40#gdbinit-文件的常见位置\",\"497\":\"40#gdbinit-文件的常用配置\",\"498\":\"40#设置断点\",\"499\":\"40#定义别名\",\"500\":\"40#自动加载符号和文件\",\"501\":\"40#配置调试环境\",\"502\":\"40#定义自定义函数\",\"503\":\"40#加载调试插件\",\"504\":\"40#典型的-gdbinit-示例\",\"505\":\"40#注意事项\",\"506\":\"40#参考\",\"507\":\"40@0\",\"508\":\"40@1\",\"509\":\"41\",\"510\":\"41@0\",\"511\":\"42\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,13],\"2\":[1,17],\"3\":[1,12],\"4\":[1],\"5\":[1,8],\"6\":[1],\"7\":[1,23],\"8\":[1,38],\"9\":[1,35],\"10\":[1,49],\"11\":[1,19],\"12\":[1,23],\"13\":[1,36],\"14\":[1,30],\"15\":[1,37],\"16\":[1,69],\"17\":[1],\"18\":[1,37],\"19\":[1,27],\"20\":[1,30],\"21\":[1,36],\"22\":[1,26],\"23\":[3,22],\"24\":[1,42],\"25\":[1,59],\"26\":[1,49],\"27\":[1],\"28\":[1,21],\"29\":[1,17],\"30\":[1,29],\"31\":[1,18],\"32\":[1,37],\"33\":[1,38],\"34\":[2,215],\"35\":[null,null,1],\"36\":[null,null,4],\"37\":[1],\"38\":[1,17],\"39\":[1,34],\"40\":[1,6],\"41\":[1,78],\"42\":[1,127],\"43\":[1,15],\"44\":[1,21],\"45\":[1,45],\"46\":[1,13],\"47\":[1,73],\"48\":[1,49],\"49\":[1,56],\"50\":[1,16],\"51\":[1,21],\"52\":[2,55],\"53\":[null,null,1],\"54\":[null,null,3],\"55\":[1],\"56\":[1,54],\"57\":[1,54],\"58\":[1,117],\"59\":[1,75],\"60\":[1,27],\"61\":[1,152],\"62\":[1,12],\"63\":[1,186],\"64\":[1,26],\"65\":[1,32],\"66\":[1,29],\"67\":[1,35],\"68\":[1,60],\"69\":[1,110],\"70\":[1,61],\"71\":[1,95],\"72\":[1,70],\"73\":[2,85],\"74\":[null,null,1],\"75\":[null,null,3],\"76\":[1],\"77\":[1,58],\"78\":[1,50],\"79\":[1],\"80\":[1,23],\"81\":[1,26],\"82\":[1],\"83\":[1,21],\"84\":[1,9],\"85\":[1,7],\"86\":[1,40],\"87\":[1,15],\"88\":[1,6],\"89\":[1,59],\"90\":[1,72],\"91\":[1,102],\"92\":[1,25],\"93\":[1,28],\"94\":[1,8],\"95\":[3,50],\"96\":[2,10],\"97\":[1,44],\"98\":[1,33],\"99\":[2,24],\"100\":[1,53],\"101\":[1,46],\"102\":[1,11],\"103\":[1,10],\"104\":[1,56],\"105\":[2],\"106\":[1,42],\"107\":[1,45],\"108\":[1,4],\"109\":[2,12],\"110\":[1,60],\"111\":[2,138],\"112\":[null,null,1],\"113\":[null,null,2],\"114\":[1],\"115\":[null,null,1],\"116\":[1],\"117\":[1,19],\"118\":[1,40],\"119\":[1,17],\"120\":[null,null,1],\"121\":[null,null,3],\"122\":[1],\"123\":[1,12],\"124\":[1,24],\"125\":[1,59],\"126\":[null,null,1],\"127\":[null,null,4],\"128\":[1],\"129\":[1,9],\"130\":[1,8],\"131\":[1,51],\"132\":[null,null,1],\"133\":[null,null,3],\"134\":[1],\"135\":[1,13],\"136\":[1,19],\"137\":[1,60],\"138\":[null,null,1],\"139\":[null,null,3],\"140\":[1],\"141\":[1,9],\"142\":[1,21],\"143\":[1,69],\"144\":[null,null,1],\"145\":[null,null,3],\"146\":[1],\"147\":[1,6],\"148\":[1,5],\"149\":[1,13],\"150\":[1,49],\"151\":[1,4],\"152\":[1,13],\"153\":[1,75],\"154\":[null,null,1],\"155\":[null,null,4],\"156\":[1],\"157\":[1,12],\"158\":[1,18],\"159\":[1,76],\"160\":[1,32],\"161\":[null,null,1],\"162\":[null,null,3],\"163\":[2,29],\"164\":[2,15],\"165\":[4,19],\"166\":[4,21],\"167\":[4,23],\"168\":[2,25],\"169\":[5,51],\"170\":[2],\"171\":[2,22],\"172\":[2,14],\"173\":[5,62],\"174\":[1,18],\"175\":[null,null,1],\"176\":[null,null,2],\"177\":[3,15],\"178\":[3],\"179\":[3,57],\"180\":[3,44],\"181\":[3,55],\"182\":[3,29],\"183\":[1,22],\"184\":[6,21],\"185\":[1,58],\"186\":[1,46],\"187\":[null,null,1],\"188\":[null,null,4],\"189\":[1],\"190\":[null,null,1],\"191\":[1],\"192\":[null,null,1],\"193\":[2,6],\"194\":[1,17],\"195\":[1,25],\"196\":[null,null,2],\"197\":[2],\"198\":[4,10],\"199\":[5,17],\"200\":[9,21],\"201\":[4,7],\"202\":[4,23],\"203\":[4,8],\"204\":[1],\"205\":[1,98],\"206\":[2,33],\"207\":[2,17],\"208\":[3,96],\"209\":[null,null,1],\"210\":[null,null,1],\"211\":[1],\"212\":[1],\"213\":[1,29],\"214\":[1,37],\"215\":[1],\"216\":[1,32],\"217\":[1,12],\"218\":[2,102],\"219\":[1,14],\"220\":[1,84],\"221\":[1,43],\"222\":[1,20],\"223\":[1,14],\"224\":[2,65],\"225\":[2,64],\"226\":[2,64],\"227\":[2,74],\"228\":[2,35],\"229\":[2,70],\"230\":[1,14],\"231\":[null,null,1],\"232\":[null,null,3],\"233\":[1],\"234\":[2,71],\"235\":[1],\"236\":[1,62],\"237\":[1,78],\"238\":[1,90],\"239\":[1,64],\"240\":[1,74],\"241\":[4,78],\"242\":[1,61],\"243\":[1,64],\"244\":[1,32],\"245\":[1,11],\"246\":[2,26],\"247\":[3,13],\"248\":[2,80],\"249\":[2,131],\"250\":[1,26],\"251\":[null,null,1],\"252\":[null,null,3],\"253\":[2],\"254\":[1,14],\"255\":[2,94],\"256\":[2,53],\"257\":[2,55],\"258\":[2,32],\"259\":[3,31],\"260\":[3,50],\"261\":[2,74],\"262\":[1,111],\"263\":[1],\"264\":[1,24],\"265\":[1,24],\"266\":[1,19],\"267\":[1,30],\"268\":[1,47],\"269\":[2,54],\"270\":[1],\"271\":[1,20],\"272\":[1,17],\"273\":[1,20],\"274\":[1,6],\"275\":[1,33],\"276\":[null,null,1],\"277\":[null,null,3],\"278\":[1],\"279\":[null,null,1],\"280\":[2],\"281\":[null,null,2],\"282\":[2,10],\"283\":[1,11],\"284\":[1,10],\"285\":[1,57],\"286\":[1,40],\"287\":[null,null,1],\"288\":[null,null,3],\"289\":[2,11],\"290\":[1,61],\"291\":[1,2],\"292\":[1,39],\"293\":[1,22],\"294\":[1,9],\"295\":[null,null,1],\"296\":[null,null,1],\"297\":[1,8],\"298\":[1,48],\"299\":[1,15],\"300\":[1,23],\"301\":[1,60],\"302\":[1,24],\"303\":[1,16],\"304\":[1,8],\"305\":[null,null,1],\"306\":[null,null,1],\"307\":[1],\"308\":[2,60],\"309\":[4,23],\"310\":[3,29],\"311\":[2,55],\"312\":[null,null,1],\"313\":[null,null,1],\"314\":[1,12],\"315\":[1,16],\"316\":[3,44],\"317\":[1,79],\"318\":[2,12],\"319\":[3,62],\"320\":[3,43],\"321\":[3,37],\"322\":[2,3],\"323\":[null,null,1],\"324\":[null,null,4],\"325\":[2],\"326\":[2],\"327\":[2,59],\"328\":[2,51],\"329\":[2,25],\"330\":[3,21],\"331\":[2,16],\"332\":[2],\"333\":[4,19],\"334\":[2,17],\"335\":[2,14],\"336\":[1],\"337\":[1,13],\"338\":[3,10],\"339\":[1,10],\"340\":[3,12],\"341\":[2],\"342\":[1,22],\"343\":[1,13],\"344\":[2,10],\"345\":[2],\"346\":[2,18],\"347\":[1,21],\"348\":[1,9],\"349\":[2],\"350\":[1,7],\"351\":[1,16],\"352\":[5,15],\"353\":[3],\"354\":[1,14],\"355\":[1,11],\"356\":[5,8],\"357\":[2],\"358\":[2,13],\"359\":[1,7],\"360\":[2],\"361\":[1,8],\"362\":[1,5],\"363\":[2],\"364\":[1,13],\"365\":[3,12],\"366\":[1,17],\"367\":[null,null,1],\"368\":[null,null,1],\"369\":[2,13],\"370\":[1,5],\"371\":[1,9],\"372\":[1,7],\"373\":[1,9],\"374\":[1,11],\"375\":[1,5],\"376\":[1,32],\"377\":[1,12],\"378\":[1,9],\"379\":[1,23],\"380\":[1,13],\"381\":[1,10],\"382\":[1,3],\"383\":[1,23],\"384\":[1,23],\"385\":[1,19],\"386\":[1,13],\"387\":[1,21],\"388\":[1,46],\"389\":[1,19],\"390\":[1,22],\"391\":[1,30],\"392\":[1,36],\"393\":[1,21],\"394\":[1,15],\"395\":[1,22],\"396\":[1,17],\"397\":[1,68],\"398\":[1,14],\"399\":[1,1],\"400\":[null,null,1],\"401\":[null,null,2],\"402\":[1,20],\"403\":[1,5],\"404\":[1,48],\"405\":[1,35],\"406\":[1,26],\"407\":[1,19],\"408\":[1,3],\"409\":[1,26],\"410\":[1,22],\"411\":[1,36],\"412\":[1,61],\"413\":[1,1],\"414\":[null,null,1],\"415\":[null,null,1],\"416\":[1],\"417\":[null,null,1],\"418\":[1],\"419\":[null,null,1],\"420\":[1,133],\"421\":[1],\"422\":[null,null,1],\"423\":[2,6],\"424\":[2],\"425\":[2,11],\"426\":[2,13],\"427\":[2,19],\"428\":[1],\"429\":[2,13],\"430\":[2,24],\"431\":[2,10],\"432\":[2,12],\"433\":[2,9],\"434\":[2,11],\"435\":[2,10],\"436\":[2,15],\"437\":[1],\"438\":[2,11],\"439\":[2,14],\"440\":[2,9],\"441\":[2,8],\"442\":[1],\"443\":[2,12],\"444\":[2,8],\"445\":[2,9],\"446\":[2,11],\"447\":[2,24],\"448\":[2,19],\"449\":[2,11],\"450\":[2,21],\"451\":[2,23],\"452\":[2,24],\"453\":[2,5],\"454\":[2,26],\"455\":[1,4],\"456\":[null,null,1],\"457\":[null,null,1],\"458\":[2,18],\"459\":[1,19],\"460\":[1,26],\"461\":[1,33],\"462\":[1],\"463\":[1,9],\"464\":[1,18],\"465\":[1,19],\"466\":[1],\"467\":[3,9],\"468\":[5,11],\"469\":[3,12],\"470\":[1,31],\"471\":[1,22],\"472\":[1,10],\"473\":[1,10],\"474\":[1,34],\"475\":[1,2],\"476\":[null,null,1],\"477\":[null,null,1],\"478\":[2,17],\"479\":[2],\"480\":[2,18],\"481\":[1,10],\"482\":[1,38],\"483\":[1,20],\"484\":[1,52],\"485\":[1,31],\"486\":[1],\"487\":[1,16],\"488\":[1,17],\"489\":[1,30],\"490\":[4,28],\"491\":[1,2],\"492\":[null,null,1],\"493\":[null,null,3],\"494\":[2,17],\"495\":[1,33],\"496\":[1,34],\"497\":[1],\"498\":[1,9],\"499\":[1,12],\"500\":[1,8],\"501\":[1,13],\"502\":[1,22],\"503\":[1,38],\"504\":[2,68],\"505\":[1,33],\"506\":[1,1],\"507\":[null,null,1],\"508\":[null,null,3],\"509\":[1],\"510\":[null,null,1],\"511\":[1,3]},\"averageFieldLength\":[1.4602238260850027,33.27120196367239,0.6075089436613957],\"storedFields\":{\"0\":{\"h\":\"档案主页\"},\"1\":{\"h\":\"介绍\",\"t\":[\"我是一名热爱编程的C++程序员，拥有丰富的开发经验，熟悉Linux环境下的系统编程。熟悉多进程、多线程编程，擅长线程同步、进程间通信及文件I/O操作。此外，我也对Qt跨平台开发有深入研究，熟悉其事件通知机制以及View/Model设计模式。\"]},\"2\":{\"h\":\"\",\"t\":[\"C/C++编程：熟悉C/C++语言的开发。\",\"Linux系统编程：熟悉Linux下的多线程、多进程编程和同步机制。\",\"Qt开发：熟练掌握Qt框架，能够快速开发跨平台应用。\",\"数据结构与算法：熟悉常见数据结构与算法，能够设计高效的解决方案。\",\"设计模式：熟练掌握多种设计模式，能够灵活应用于项目开发。\"]},\"3\":{\"h\":\"\",\"t\":[\"微信公众号: 关注微信公众号程序员的白粥馆, 了解更多技术分享。\",\"知识星球: 加入知识星球程序员的白粥馆，共同学习编程技术, 一同进步。\",\"个人博客: Mr.Hackcpp 的个人博客程序员的白粥馆记录分享编程知识。\"]},\"4\":{\"h\":\"数组与链表\"},\"5\":{\"h\":\"数组\",\"t\":[\"数组（array）是一种线性数据结构，其将相同类型的元素存储在连续的内存空间中。我们将元素在数组中的位置称为该元素的索引（index）。下图展示了数组的主要概念和存储方式。\",\"数组定义与存储方式\"]},\"6\":{\"h\":\"数组常用操作\"},\"7\":{\"h\":\"初始化数组\",\"t\":[\"我们可以根据需求选用数组的两种初始化方式：无初始值、给定初始值。在未指定初始值的情况下，大多数编程语言会将数组元素初始化为 0 ：\",\"/* 初始化数组 */ // 存储在栈上 int arr[5]; int nums[5] = { 1, 3, 2, 5, 4 }; // 存储在堆上（需要手动释放空间） int* arr1 = new int[5]; int* nums1 = new int[5] { 1, 3, 2, 5, 4 };\"]},\"8\":{\"h\":\"访问元素\",\"t\":[\"数组元素被存储在连续的内存空间中，这意味着计算数组元素的内存地址非常容易。给定数组内存地址（首元素内存地址）和某个元素的索引，我们可以使用下图所示的公式计算得到该元素的内存地址，从而直接访问该元素。\",\"数组元素的内存地址计算\",\"观察上图，我们发现数组首个元素的索引为 0 ，这似乎有些反直觉，因为从 1 开始计数会更自然。但从地址计算公式的角度看，索引本质上是内存地址的偏移量。首个元素的地址偏移量是 0 ，因此它的索引为 0 是合理的。\",\"在数组中访问元素非常高效，我们可以在 O(1) 时间内随机访问数组中的任意一个元素。\",\"/* 随机访问元素 */ int randomAccess(int *nums, int size) { // 在区间 [0, size) 中随机抽取一个数字 int randomIndex = rand() % size; // 获取并返回随机元素 int randomNum = nums[randomIndex]; return randomNum; }\"]},\"9\":{\"h\":\"插入元素\",\"t\":[\"数组元素在内存中是“紧挨着的”，它们之间没有空间再存放任何数据。如下图所示，如果想在数组中间插入一个元素，则需要将该元素之后的所有元素都向后移动一位，之后再把元素赋值给该索引。\",\"数组插入元素示例\",\"值得注意的是，由于数组的长度是固定的，因此插入一个元素必定会导致数组尾部元素“丢失”。我们将这个问题的解决方案留在“列表”章节中讨论。\",\"/* 在数组的索引 index 处插入元素 num */ void insert(int *nums, int size, int num, int index) { // 把索引 index 以及之后的所有元素向后移动一位 for (int i = size - 1; i > index; i--) { nums[i] = nums[i - 1]; } // 将 num 赋给 index 处的元素 nums[index] = num; }\"]},\"10\":{\"h\":\"删除元素\",\"t\":[\"同理，如下图所示，若想删除索引 i 处的元素，则需要把索引 i 之后的元素都向前移动一位。\",\"数组删除元素示例\",\"请注意，删除元素完成后，原先末尾的元素变得“无意义”了，所以我们无须特意去修改它。\",\"/* 删除索引 index 处的元素 */ void remove(int *nums, int size, int index) { // 把索引 index 之后的所有元素向前移动一位 for (int i = index; i < size - 1; i++) { nums[i] = nums[i + 1]; } }\",\"总的来看，数组的插入与删除操作有以下缺点。\",\"时间复杂度高：数组的插入和删除的平均时间复杂度均为 O(n) ，其中 n 为数组长度。\",\"丢失元素：由于数组的长度不可变，因此在插入元素后，超出数组长度范围的元素会丢失。\",\"内存浪费：我们可以初始化一个比较长的数组，只用前面一部分，这样在插入数据时，丢失的末尾元素都是“无意义”的，但这样做会造成部分内存空间浪费。\"]},\"11\":{\"h\":\"遍历数组\",\"t\":[\"在大多数编程语言中，我们既可以通过索引遍历数组，也可以直接遍历获取数组中的每个元素：\",\"/* 遍历数组 */ void traverse(int *nums, int size) { int count = 0; // 通过索引遍历数组 for (int i = 0; i < size; i++) { count += nums[i]; } }\"]},\"12\":{\"h\":\"查找元素\",\"t\":[\"在数组中查找指定元素需要遍历数组，每轮判断元素值是否匹配，若匹配则输出对应索引。\",\"因为数组是线性数据结构，所以上述查找操作被称为“线性查找”。\",\"/* 在数组中查找指定元素 */ int find(int *nums, int size, int target) { for (int i = 0; i < size; i++) { if (nums[i] == target) return i; } return -1; }\"]},\"13\":{\"h\":\"扩容数组\",\"t\":[\"在复杂的系统环境中，程序难以保证数组之后的内存空间是可用的，从而无法安全地扩展数组容量。因此在大多数编程语言中，数组的长度是不可变的。\",\"如果我们希望扩容数组，则需重新建立一个更大的数组，然后把原数组元素依次复制到新数组。这是一个 O(n) 的操作，在数组很大的情况下非常耗时。代码如下所示：\",\"/* 扩展数组长度 */ int *extend(int *nums, int size, int enlarge) { // 初始化一个扩展长度后的数组 int *res = new int[size + enlarge]; // 将原数组中的所有元素复制到新数组 for (int i = 0; i < size; i++) { res[i] = nums[i]; } // 释放内存 delete[] nums; // 返回扩展后的新数组 return res; }\"]},\"14\":{\"h\":\"数组的优点与局限性\",\"t\":[\"数组存储在连续的内存空间内，且元素类型相同。这种做法包含丰富的先验信息，系统可以利用这些信息来优化数据结构的操作效率。\",\"空间效率高：数组为数据分配了连续的内存块，无须额外的结构开销。\",\"支持随机访问：数组允许在 O(1) 时间内访问任何元素。\",\"缓存局部性：当访问数组元素时，计算机不仅会加载它，还会缓存其周围的其他数据，从而借助高速缓存来提升后续操作的执行速度。\",\"连续空间存储是一把双刃剑，其存在以下局限性。\",\"插入与删除效率低：当数组中元素较多时，插入与删除操作需要移动大量的元素。\",\"长度不可变：数组在初始化后长度就固定了，扩容数组需要将所有数据复制到新数组，开销很大。\",\"空间浪费：如果数组分配的大小超过实际所需，那么多余的空间就被浪费了。\"]},\"15\":{\"h\":\"数组典型应用\",\"t\":[\"数组是一种基础且常见的数据结构，既频繁应用在各类算法之中，也可用于实现各种复杂数据结构。\",\"随机访问：如果我们想随机抽取一些样本，那么可以用数组存储，并生成一个随机序列，根据索引实现随机抽样。\",\"排序和搜索：数组是排序和搜索算法最常用的数据结构。快速排序、归并排序、二分查找等都主要在数组上进行。\",\"查找表：当需要快速查找一个元素或其对应关系时，可以使用数组作为查找表。假如我们想实现字符到 ASCII 码的映射，则可以将字符的 ASCII 码值作为索引，对应的元素存放在数组中的对应位置。\",\"机器学习：神经网络中大量使用了向量、矩阵、张量之间的线性代数运算，这些数据都是以数组的形式构建的。数组是神经网络编程中最常使用的数据结构。\",\"数据结构实现：数组可以用于实现栈、队列、哈希表、堆、图等数据结构。例如，图的邻接矩阵表示实际上是一个二维数组。\"]},\"16\":{\"h\":\"链表\",\"t\":[\"内存空间是所有程序的公共资源，在一个复杂的系统运行环境下，空闲的内存空间可能散落在内存各处。我们知道，存储数组的内存空间必须是连续的，而当数组非常大时，内存可能无法提供如此大的连续空间。此时链表的灵活性优势就体现出来了。\",\"链表（linked list）是一种线性数据结构，其中的每个元素都是一个节点对象，各个节点通过“引用”相连接。引用记录了下一个节点的内存地址，通过它可以从当前节点访问到下一个节点。\",\"链表的设计使得各个节点可以分散存储在内存各处，它们的内存地址无须连续。\",\"链表定义与存储方式\",\"观察上图，链表的组成单位是节点（node）对象。每个节点都包含两项数据：节点的“值”和指向下一节点的“引用”。\",\"链表的首个节点被称为“头节点”，最后一个节点被称为“尾节点”。\",\"尾节点指向的是“空”，它在 Java、C++ 和 Python 中分别被记为 null、nullptr 和 None 。\",\"在 C、C++、Go 和 Rust 等支持指针的语言中，上述“引用”应被替换为“指针”。\",\"如以下代码所示，链表节点 ListNode 除了包含值，还需额外保存一个引用（指针）。因此在相同数据量下，链表比数组占用更多的内存空间。\",\"/* 链表节点结构体 */ struct ListNode { int val; // 节点值 ListNode *next; // 指向下一节点的指针 ListNode(int x) : val(x), next(nullptr) {} // 构造函数 };\"]},\"17\":{\"h\":\"链表常用操作\"},\"18\":{\"h\":\"初始化链表\",\"t\":[\"建立链表分为两步，第一步是初始化各个节点对象，第二步是构建节点之间的引用关系。初始化完成后，我们就可以从链表的头节点出发，通过引用指向 next 依次访问所有节点。\",\" /* 初始化链表 1 -> 3 -> 2 -> 5 -> 4 */ // 初始化各个节点 ListNode* n0 = new ListNode(1); ListNode* n1 = new ListNode(3); ListNode* n2 = new ListNode(2); ListNode* n3 = new ListNode(5); ListNode* n4 = new ListNode(4); // 构建节点之间的引用 n0->next = n1; n1->next = n2; n2->next = n3; n3->next = n4;\",\"数组整体是一个变量，比如数组 nums 包含元素 nums[0] 和 nums[1] 等，而链表是由多个独立的节点对象组成的。我们通常将头节点当作链表的代称，比如以上代码中的链表可记作链表 n0 。\"]},\"19\":{\"h\":\"插入节点\",\"t\":[\"在链表中插入节点非常容易。如下图所示，假设我们想在相邻的两个节点 n0 和 n1 之间插入一个新节点 P ，则只需改变两个节点引用（指针）即可，时间复杂度为 O(1)。\",\"相比之下，在数组中插入元素的时间复杂度为 O(n) ，在大数据量下的效率较低。\",\"链表插入节点示例\",\"/* 在链表的节点 n0 之后插入节点 P */ void insert(ListNode *n0, ListNode *P) { ListNode *n1 = n0->next; P->next = n1; n0->next = P; }\"]},\"20\":{\"h\":\"删除节点\",\"t\":[\"如下图所示，在链表中删除节点也非常方便，只需改变一个节点的引用（指针）即可。\",\"请注意，尽管在删除操作完成后节点 P 仍然指向 n1 ，但实际上遍历此链表已经无法访问到 P ，这意味着 P 已经不再属于该链表了。\",\"链表删除节点\",\"/* 删除链表的节点 n0 之后的首个节点 */ void remove(ListNode *n0) { if (n0->next == nullptr) return; // n0 -> P -> n1 ListNode *P = n0->next; ListNode *n1 = P->next; n0->next = n1; // 释放内存 delete P; }\"]},\"21\":{\"h\":\"访问节点\",\"t\":[\"在链表中访问节点的效率较低。如上一节所述，我们可以在 O(1) 时间下访问数组中的任意元素。链表则不然，程序需要从头节点出发，逐个向后遍历，直至找到目标节点。也就是说，访问链表的第 i 个节点需要循环 i−1 轮，时间复杂度为 O(n) 。\",\"/* 访问链表中索引为 index 的节点 */ ListNode *access(ListNode *head, int index) { for (int i = 0; i < index; i++) { if (head == nullptr) return nullptr; head = head->next; } return head; }\"]},\"22\":{\"h\":\"查找节点\",\"t\":[\"遍历链表，查找其中值为 target 的节点，输出该节点在链表中的索引。此过程也属于线性查找。代码如下所示：\",\"/* 在链表中查找值为 target 的首个节点 */ int find(ListNode *head, int target) { int index = 0; while (head != nullptr) { if (head->val == target) return index; head = head->next; index++; } return -1; }\"]},\"23\":{\"h\":\"数组 vs. 链表\",\"t\":[\"下表总结了数组和链表的各项特点并对比了操作效率。由于它们采用两种相反的存储策略，因此各种性质和操作效率也呈现对立的特点。\",\"数组\",\"链表\",\"存储方式\",\"连续内存空间\",\"分散内存空间\",\"容量扩展\",\"长度不可变\",\"可灵活扩展\",\"内存效率\",\"元素占用内存少、但可能浪费空间\",\"元素占用内存多\",\"访问元素\",\"O(1)\",\"O(n)\",\"添加元素\",\"O(n)\",\"O(1)\",\"删除元素\",\"O(n)\",\"O(1)\"]},\"24\":{\"h\":\"常见链表类型\",\"t\":[\"如下图所示，常见的链表类型包括三种。\",\"单向链表：即前面介绍的普通链表。单向链表的节点包含值和指向下一节点的引用两项数据。我们将首个节点称为头节点，将最后一个节点称为尾节点，尾节点指向空 None 。\",\"环形链表：如果我们令单向链表的尾节点指向头节点（首尾相接），则得到一个环形链表。在环形链表中，任意节点都可以视作头节点。\",\"双向链表：与单向链表相比，双向链表记录了两个方向的引用。双向链表的节点定义同时包含指向后继节点（下一个节点）和前驱节点（上一个节点）的引用（指针）。相较于单向链表，双向链表更具灵活性，可以朝两个方向遍历链表，但相应地也需要占用更多的内存空间。\",\"/* 双向链表节点结构体 */ struct ListNode { int val; // 节点值 ListNode *next; // 指向后继节点的指针 ListNode *prev; // 指向前驱节点的指针 ListNode(int x) : val(x), next(nullptr), prev(nullptr) {} // 构造函数 };\",\"常见链表种类\"]},\"25\":{\"h\":\"链表典型应用\",\"t\":[\"单向链表通常用于实现栈、队列、哈希表和图等数据结构。\",\"栈与队列：当插入和删除操作都在链表的一端进行时，它表现的特性为先进后出，对应栈；当插入操作在链表的一端进行，删除操作在链表的另一端进行，它表现的特性为先进先出，对应队列。\",\"哈希表：链式地址是解决哈希冲突的主流方案之一，在该方案中，所有冲突的元素都会被放到一个链表中。\",\"图：邻接表是表示图的一种常用方式，其中图的每个顶点都与一个链表相关联，链表中的每个元素都代表与该顶点相连的其他顶点。\",\"双向链表常用于需要快速查找前一个和后一个元素的场景。\",\"高级数据结构：比如在红黑树、B 树中，我们需要访问节点的父节点，这可以通过在节点中保存一个指向父节点的引用来实现，类似于双向链表。\",\"浏览器历史：在网页浏览器中，当用户点击前进或后退按钮时，浏览器需要知道用户访问过的前一个和后一个网页。双向链表的特性使得这种操作变得简单。\",\"LRU 算法：在缓存淘汰（LRU）算法中，我们需要快速找到最近最少使用的数据，以及支持快速添加和删除节点。这时候使用双向链表就非常合适。\",\"环形链表常用于需要周期性操作的场景，比如操作系统的资源调度。\",\"时间片轮转调度算法：在操作系统中，时间片轮转调度算法是一种常见的 CPU 调度算法，它需要对一组进程进行循环。每个进程被赋予一个时间片，当时间片用完时，CPU 将切换到下一个进程。这种循环操作可以通过环形链表来实现。\",\"数据缓冲区：在某些数据缓冲区的实现中，也可能会使用环形链表。比如在音频、视频播放器中，数据流可能会被分成多个缓冲块并放入一个环形链表，以便实现无缝播放。\"]},\"26\":{\"h\":\"列表\",\"t\":[\"列表（list）是一个抽象的数据结构概念，它表示元素的有序集合，支持元素访问、修改、添加、删除和遍历等操作，无须使用者考虑容量限制的问题。列表可以基于链表或数组实现。\",\"链表天然可以看作一个列表，其支持元素增删查改操作，并且可以灵活动态扩容。\",\"数组也支持元素增删查改，但由于其长度不可变，因此只能看作一个具有长度限制的列表。\",\"当使用数组实现列表时，长度不可变的性质会导致列表的实用性降低。这是因为我们通常无法事先确定需要存储多少数据，从而难以选择合适的列表长度。若长度过小，则很可能无法满足使用需求；若长度过大，则会造成内存空间浪费。\",\"为解决此问题，我们可以使用**动态数组（dynamic array）**来实现列表。它继承了数组的各项优点，并且可以在程序运行过程中进行动态扩容。\",\"实际上，许多编程语言中的标准库提供的列表是基于动态数组实现的，例如 Python 中的 list 、Java 中的 ArrayList 、C++ 中的 vector 和 C# 中的 List 等。在接下来的讨论中，我们将把“列表”和“动态数组”视为等同的概念。\"]},\"27\":{\"h\":\"列表常用操作\"},\"28\":{\"h\":\"初始化列表\",\"t\":[\"我们通常使用“无初始值”和“有初始值”这两种初始化方法：\",\"/* 初始化列表 */ // 需注意，C++ 中 vector 即是本文描述的 nums // 无初始值 vector<int> nums1; // 有初始值 vector<int> nums = { 1, 3, 2, 5, 4 };\"]},\"29\":{\"h\":\"访问元素\",\"t\":[\"列表本质上是数组，因此可以在 O(1) 时间内访问和更新元素，效率很高。\",\" /* 访问元素 */ int num = nums[1]; // 访问索引 1 处的元素 /* 更新元素 */ nums[1] = 0; // 将索引 1 处的元素更新为 0\"]},\"30\":{\"h\":\"插入与删除元素\",\"t\":[\"相较于数组，列表可以自由地添加与删除元素。在列表尾部添加元素的时间复杂度为 O(1) ，但插入和删除元素的效率仍与数组相同，时间复杂度为 O(n) 。\",\"/* 清空列表 */ nums.clear(); /* 在尾部添加元素 */ nums.push_back(1); nums.push_back(3); nums.push_back(2); nums.push_back(5); nums.push_back(4); /* 在中间插入元素 */ nums.insert(nums.begin() + 3, 6); // 在索引 3 处插入数字 6 /* 删除元素 */ nums.erase(nums.begin() + 3); // 删除索引 3 处的元素\"]},\"31\":{\"h\":\"遍历列表\",\"t\":[\"与数组一样，列表可以根据索引遍历，也可以直接遍历各元素。\",\" /* 通过索引遍历列表 */ int count = 0; for (int i = 0; i < nums.size(); i++) { count += nums[i]; } /* 直接遍历列表元素 */ count = 0; for (int num : nums) { count += num; }\"]},\"32\":{\"h\":\"列表实现\",\"t\":[\"许多编程语言内置了列表，例如 Java、C++、Python 等。它们的实现比较复杂，各个参数的设定也非常考究，例如初始容量、扩容倍数等。感兴趣的读者可以查阅源码进行学习。\",\"为了加深对列表工作原理的理解，我们尝试实现一个简易版列表，包括以下三个重点设计。\",\"初始容量：选取一个合理的数组初始容量。在本示例中，我们选择 10 作为初始容量。\",\"数量记录：声明一个变量 size ，用于记录列表当前元素数量，并随着元素插入和删除实时更新。根据此变量，我们可以定位列表尾部，以及判断是否需要扩容。\",\"扩容机制：若插入元素时列表容量已满，则需要进行扩容。先根据扩容倍数创建一个更大的数组，再将当前数组的所有元素依次移动至新数组。在本示例中，我们规定每次将数组扩容至之前的 2 倍。\"]},\"33\":{\"h\":\"重点回顾\",\"t\":[\"数组和链表是两种基本的数据结构，分别代表数据在计算机内存中的两种存储方式：连续空间存储和分散空间存储。两者的特点呈现出互补的特性。\",\"数组支持随机访问、占用内存较少；但插入和删除元素效率低，且初始化后长度不可变。\",\"链表通过更改引用（指针）实现高效的节点插入与删除，且可以灵活调整长度；但节点访问效率低、占用内存较多。常见的链表类型包括单向链表、环形链表、双向链表。\",\"列表是一种支持增删查改的元素有序集合，通常基于动态数组实现。它保留了数组的优势，同时可以灵活调整长度。\",\"列表的出现大幅提高了数组的实用性，但可能导致部分内存空间浪费。\",\"程序运行时，数据主要存储在内存中。数组可提供更高的内存空间效率，而链表则在内存使用上更加灵活。\",\"缓存通过缓存行、预取机制以及空间局部性和时间局部性等数据加载机制，为 CPU 提供快速数据访问，显著提升程序的执行效率。\",\"由于数组具有更高的缓存命中率，因此它通常比链表更高效。在选择数据结构时，应根据具体需求和场景做出恰当选择。\"]},\"34\":{\"h\":\"Q & A\",\"t\":[\"Q：数组存储在栈上和存储在堆上，对时间效率和空间效率是否有影响？\",\"存储在栈上和堆上的数组都被存储在连续内存空间内，数据操作效率基本一致。然而，栈和堆具有各自的特点，从而导致以下不同点。\",\"分配和释放效率：栈是一块较小的内存，分配由编译器自动完成；而堆内存相对更大，可以在代码中动态分配，更容易碎片化。因此，堆上的分配和释放操作通常比栈上的慢。\",\"大小限制：栈内存相对较小，堆的大小一般受限于可用内存。因此堆更加适合存储大型数组。\",\"灵活性：栈上的数组的大小需要在编译时确定，而堆上的数组的大小可以在运行时动态确定。\",\"Q：为什么数组要求相同类型的元素，而在链表中却没有强调相同类型呢？\",\"链表由节点组成，节点之间通过引用（指针）连接，各个节点可以存储不同类型的数据，例如 int、double、string、object 等。\",\"相对地，数组元素则必须是相同类型的，这样才能通过计算偏移量来获取对应元素位置。例如，数组同时包含 int 和 long 两种类型，单个元素分别占用 4 字节 和 8 字节 ，此时就不能用以下公式计算偏移量了，因为数组中包含了两种“元素长度”。\",\"# 元素内存地址 = 数组内存地址（首元素内存地址） + 元素长度 * 元素索引\",\"Q：删除节点 P 后，是否需要把 P.next 设为 None 呢？\",\"不修改 P.next 也可以。从该链表的角度看，从头节点遍历到尾节点已经不会遇到 P 了。这意味着节点 P 已经从链表中删除了，此时节点 P 指向哪里都不会对该链表产生影响。\",\"从数据结构与算法（做题）的角度看，不断开没有关系，只要保证程序的逻辑是正确的就行。从标准库的角度看，断开更加安全、逻辑更加清晰。如果不断开，假设被删除节点未被正常回收，那么它会影响后继节点的内存回收。\",\"Q：在链表中插入和删除操作的时间复杂度是 O(1) 。但是增删之前都需要 O(n) 的时间查找元素，那为什么时间复杂度不是 O(n) 呢？\",\"如果是先查找元素、再删除元素，时间复杂度确实是 O(n) 。然而，链表的 O(1) 增删的优势可以在其他应用上得到体现。例如，双向队列适合使用链表实现，我们维护一个指针变量始终指向头节点、尾节点，每次插入与删除操作都是 O(1) 。\",\"Q：图“链表定义与存储方式”中，浅蓝色的存储节点指针是占用一块内存地址吗？还是和节点值各占一半呢？\",\"该示意图只是定性表示，定量表示需要根据具体情况进行分析。\",\"不同类型的节点值占用的空间是不同的，比如 int、long、double 和实例对象等。\",\"指针变量占用的内存空间大小根据所使用的操作系统及编译环境而定，大多为 8 字节或 4 字节。\",\"Q：在列表末尾添加元素是否时时刻刻都为 O(1) ？\",\"如果添加元素时超出列表长度，则需要先扩容列表再添加。系统会申请一块新的内存，并将原列表的所有元素搬运过去，这时候时间复杂度就会是 O(n) 。\",\"Q：“列表的出现极大地提高了数组的实用性，但可能导致部分内存空间浪费”，这里的空间浪费是指额外增加的变量如容量、长度、扩容倍数所占的内存吗？\",\"这里的空间浪费主要有两方面含义：一方面，列表都会设定一个初始长度，我们不一定需要用这么多；另一方面，为了防止频繁扩容，扩容一般会乘以一个系数，比如 ×1.5 。这样一来，也会出现很多空位，我们通常不能完全填满它们。\",\"Q：在 Python 中初始化 n = [1, 2, 3] 后，这 3 个元素的地址是相连的，但是初始化 m = [2, 1, 3] 会发现它们每个元素的 id 并不是连续的，而是分别跟 n 中的相同。这些元素的地址不连续，那么 m 还是数组吗？\",\"假如把列表元素换成链表节点 n = [n1, n2, n3, n4, n5] ，通常情况下这 5 个节点对象也分散存储在内存各处。然而，给定一个列表索引，我们仍然可以在 O(1) 时间内获取节点内存地址，从而访问到对应的节点。这是因为数组中存储的是节点的引用，而非节点本身。\",\"与许多语言不同，Python 中的数字也被包装为对象，列表中存储的不是数字本身，而是对数字的引用。因此，我们会发现两个数组中的相同数字拥有同一个 id ，并且这些数字的内存地址无须连续。\",\"Q：C++ STL 里面的 std::list 已经实现了双向链表，但好像一些算法书上不怎么直接使用它，是不是因为有什么局限性呢？\",\"一方面，我们往往更青睐使用数组实现算法，而只在必要时才使用链表，主要有两个原因。\",\"空间开销：由于每个元素需要两个额外的指针（一个用于前一个元素，一个用于后一个元素），所以 std::list 通常比 std::vector 更占用空间。\",\"缓存不友好：由于数据不是连续存放的，因此 std::list 对缓存的利用率较低。一般情况下，std::vector 的性能会更好。\",\"另一方面，必要使用链表的情况主要是二叉树和图。栈和队列往往会使用编程语言提供的 stack 和 queue ，而非链表。\",\"Q：初始化列表 res = [0] * self.size() 操作，会导致 res 的每个元素引用相同的地址吗？\",\"不会。但二维数组会有这个问题，例如初始化二维列表 res = [[0]] * self.size() ，则多次引用了同一个列表 [0] 。\"]},\"35\":{\"c\":[\"数据结构\"]},\"36\":{\"c\":[\"c++\",\"线性结构\",\"数组\",\"链表\"]},\"37\":{\"h\":\"队列和栈\"},\"38\":{\"h\":\"队列\",\"t\":[\"队列（queue）是一种遵循先入先出规则的线性数据结构。顾名思义，队列模拟了排队现象，即新来的人不断加入队列尾部，而位于队列头部的人逐个离开。\",\"如下图所示，我们将队列头部称为“队首”，尾部称为“队尾”，将把元素加入队尾的操作称为“入队”，删除队首元素的操作称为“出队”。\",\"队列的先入先出规则\"]},\"39\":{\"h\":\"队列常用操作\",\"t\":[\"队列的常见操作如下表所示。需要注意的是，不同编程语言的方法名称可能会有所不同。我们在此采用与栈相同的方法命名。\",\"方法名\",\"描述\",\"时间复杂度\",\"push()\",\"元素入队，即将元素添加至队尾\",\"O(1)\",\"pop()\",\"队首元素出队\",\"O(1)\",\"peek()\",\"访问队首元素\",\"O(1)\",\"我们可以直接使用编程语言中现成的队列类：\",\" /* 初始化队列 */ queue<int> queue; /* 元素入队 */ queue.push(1); queue.push(3); queue.push(2); queue.push(5); queue.push(4); /* 访问队首元素 */ int front = queue.front(); /* 元素出队 */ queue.pop(); /* 获取队列的长度 */ int size = queue.size(); /* 判断队列是否为空 */ bool empty = queue.empty();\"]},\"40\":{\"h\":\"队列实现\",\"t\":[\"为了实现队列，我们需要一种数据结构，可以在一端添加元素，并在另一端删除元素，链表和数组都符合要求。\"]},\"41\":{\"h\":\"基于链表的实现\",\"t\":[\"如下图所示，我们可以将链表的“头节点”和“尾节点”分别视为“队首”和“队尾”，规定队尾仅可添加节点，队首仅可删除节点。\",\"基于链表实现队列的入队出队操作\",\"linkedlist_queue_push\",\"linkedlist_queue_pop\",\"以下是用链表实现队列的代码：\",\"/* 基于链表实现的队列 */ class LinkedListQueue { private: ListNode *front, *rear; // 头节点 front ，尾节点 rear int queSize; public: LinkedListQueue() { front = nullptr; rear = nullptr; queSize = 0; } ~LinkedListQueue() { // 遍历链表删除节点，释放内存 freeMemoryLinkedList(front); } /* 获取队列的长度 */ int size() { return queSize; } /* 判断队列是否为空 */ bool isEmpty() { return queSize == 0; } /* 入队 */ void push(int num) { // 在尾节点后添加 num ListNode *node = new ListNode(num); // 如果队列为空，则令头、尾节点都指向该节点 if (front == nullptr) { front = node; rear = node; } // 如果队列不为空，则将该节点添加到尾节点后 else { rear->next = node; rear = node; } queSize++; } /* 出队 */ int pop() { int num = peek(); // 删除头节点 ListNode *tmp = front; front = front->next; // 释放内存 delete tmp; queSize--; return num; } /* 访问队首元素 */ int peek() { if (size() == 0) throw out_of_range(\\\"队列为空\\\"); return front->val; } /* 将链表转化为 Vector 并返回 */ vector<int> toVector() { ListNode *node = front; vector<int> res(size()); for (int i = 0; i < res.size(); i++) { res[i] = node->val; node = node->next; } return res; } };\"]},\"42\":{\"h\":\"基于数组的实现\",\"t\":[\"在数组中删除首元素的时间复杂度为 O(n) ，这会导致出队操作效率较低。然而，我们可以采用以下巧妙方法来避免这个问题。\",\"我们可以使用一个变量 front 指向队首元素的索引，并维护一个变量 size 用于记录队列长度。定义 rear = front + size ，这个公式计算出的 rear 指向队尾元素之后的下一个位置。\",\"基于此设计，数组中包含元素的有效区间为 [front, rear - 1]，各种操作的实现方法如下图所示。\",\"入队操作：将输入元素赋值给 rear 索引处，并将 size 增加 1 。\",\"出队操作：只需将 front 增加 1 ，并将 size 减少 1 。\",\"可以看到，入队和出队操作都只需进行一次操作，时间复杂度均为 O(1) 。\",\"你可能会发现一个问题：在不断进行入队和出队的过程中，front 和 rear 都在向右移动，当它们到达数组尾部时就无法继续移动了。为了解决此问题，我们可以将数组视为首尾相接的“环形数组”。\",\"对于环形数组，我们需要让 front 或 rear 在越过数组尾部时，直接回到数组头部继续遍历。这种周期性规律可以通过“取余操作”来实现，代码如下所示：\",\"/* 基于环形数组实现的队列 */ class ArrayQueue { private: int *nums; // 用于存储队列元素的数组 int front; // 队首指针，指向队首元素 int queSize; // 队列长度 int queCapacity; // 队列容量 public: ArrayQueue(int capacity) { // 初始化数组 nums = new int[capacity]; queCapacity = capacity; front = queSize = 0; } ~ArrayQueue() { delete[] nums; } /* 获取队列的容量 */ int capacity() { return queCapacity; } /* 获取队列的长度 */ int size() { return queSize; } /* 判断队列是否为空 */ bool isEmpty() { return size() == 0; } /* 入队 */ void push(int num) { if (queSize == queCapacity) { cout << \\\"队列已满\\\" << endl; return; } // 计算队尾指针，指向队尾索引 + 1 // 通过取余操作实现 rear 越过数组尾部后回到头部 int rear = (front + queSize) % queCapacity; // 将 num 添加至队尾 nums[rear] = num; queSize++; } /* 出队 */ int pop() { int num = peek(); // 队首指针向后移动一位，若越过尾部，则返回到数组头部 front = (front + 1) % queCapacity; queSize--; return num; } /* 访问队首元素 */ int peek() { if (isEmpty()) throw out_of_range(\\\"队列为空\\\"); return nums[front]; } /* 将数组转化为 Vector 并返回 */ vector<int> toVector() { // 仅转换有效长度范围内的列表元素 vector<int> arr(queSize); for (int i = 0, j = front; i < queSize; i++, j++) { arr[i] = nums[j % queCapacity]; } return arr; } };\",\"以上实现的队列仍然具有局限性：其长度不可变。然而，这个问题不难解决，我们可以将数组替换为动态数组，从而引入扩容机制。有兴趣的读者可以尝试自行实现。\",\"两种实现的对比结论与栈一致，在此不再赘述。\"]},\"43\":{\"h\":\"队列典型应用\",\"t\":[\"淘宝订单。购物者下单后，订单将加入队列中，系统随后会根据顺序处理队列中的订单。在双十一期间，短时间内会产生海量订单，高并发成为工程师们需要重点攻克的问题。\",\"各类待办事项。任何需要实现“先来后到”功能的场景，例如打印机的任务队列、餐厅的出餐队列等，队列在这些场景中可以有效地维护处理顺序。\"]},\"44\":{\"h\":\"栈\",\"t\":[\"栈（stack）是一种遵循先入后出逻辑的线性数据结构。\",\"我们可以将栈类比为桌面上的一摞盘子，如果想取出底部的盘子，则需要先将上面的盘子依次移走。我们将盘子替换为各种类型的元素（如整数、字符、对象等），就得到了栈这种数据结构。\",\"如下图所示，我们把堆叠元素的顶部称为“栈顶”，底部称为“栈底”。将把元素添加到栈顶的操作叫作“入栈”，删除栈顶元素的操作叫作“出栈”。\",\"栈的先入后出规则\"]},\"45\":{\"h\":\"栈的常用操作\",\"t\":[\"栈的常用操作如下表所示，具体的方法名需要根据所使用的编程语言来确定。在此，我们以常见的 push()、pop()、peek() 命名为例。\",\"方法\",\"描述\",\"时间复杂度\",\"push()\",\"元素入栈（添加至栈顶）\",\"O(1)\",\"pop()\",\"栈顶元素出栈\",\"O(1)\",\"peek()\",\"访问栈顶元素\",\"O(1)\",\"通常情况下，我们可以直接使用编程语言内置的栈类。然而，某些语言可能没有专门提供栈类，这时我们可以将该语言的“数组”或“链表”当作栈来使用，并在程序逻辑上忽略与栈无关的操作。\",\" /* 初始化栈 */ stack<int> stack; /* 元素入栈 */ stack.push(1); stack.push(3); stack.push(2); stack.push(5); stack.push(4); /* 访问栈顶元素 */ int top = stack.top(); /* 元素出栈 */ stack.pop(); // 无返回值 /* 获取栈的长度 */ int size = stack.size(); /* 判断是否为空 */ bool empty = stack.empty();\"]},\"46\":{\"h\":\"栈的实现\",\"t\":[\"为了深入了解栈的运行机制，我们来尝试自己实现一个栈类。\",\"栈遵循先入后出的原则，因此我们只能在栈顶添加或删除元素。然而，数组和链表都可以在任意位置添加和删除元素，因此栈可以视为一种受限制的数组或链表。换句话说，我们可以“屏蔽”数组或链表的部分无关操作，使其对外表现的逻辑符合栈的特性。\"]},\"47\":{\"h\":\"基于链表的实现\",\"t\":[\"使用链表实现栈时，我们可以将链表的头节点视为栈顶，尾节点视为栈底。\",\"如下图所示，对于入栈操作，我们只需将元素插入链表头部，这种节点插入方法被称为“头插法”。而对于出栈操作，只需将头节点从链表中删除即可。\",\"基于链表实现栈的入栈出栈操作\",\"linkedlist_stack_push\",\"linkedlist_stack_pop\",\"以下是基于链表实现栈的示例代码：\",\"/* 基于链表实现的栈 */ class LinkedListStack { private: ListNode *stackTop; // 将头节点作为栈顶 int stkSize; // 栈的长度 public: LinkedListStack() { stackTop = nullptr; stkSize = 0; } ~LinkedListStack() { // 遍历链表删除节点，释放内存 freeMemoryLinkedList(stackTop); } /* 获取栈的长度 */ int size() { return stkSize; } /* 判断栈是否为空 */ bool isEmpty() { return size() == 0; } /* 入栈 */ void push(int num) { ListNode *node = new ListNode(num); node->next = stackTop; stackTop = node; stkSize++; } /* 出栈 */ int pop() { int num = top(); ListNode *tmp = stackTop; stackTop = stackTop->next; // 释放内存 delete tmp; stkSize--; return num; } /* 访问栈顶元素 */ int top() { if (isEmpty()) throw out_of_range(\\\"栈为空\\\"); return stackTop->val; } /* 将 List 转化为 Array 并返回 */ vector<int> toVector() { ListNode *node = stackTop; vector<int> res(size()); for (int i = res.size() - 1; i >= 0; i--) { res[i] = node->val; node = node->next; } return res; } };\"]},\"48\":{\"h\":\"基于数组的实现\",\"t\":[\"使用数组实现栈时，我们可以将数组的尾部作为栈顶。如下图所示，入栈与出栈操作分别对应在数组尾部添加元素与删除元素，时间复杂度都为 O(1) 。\",\"基于数组实现栈的入栈出栈操作\",\"array_stack_push\",\"array_stack_pop\",\"由于入栈的元素可能会源源不断地增加，因此我们可以使用动态数组，这样就无须自行处理数组扩容问题。以下为示例代码：\",\"/* 基于数组实现的栈 */ class ArrayStack { private: vector<int> stack; public: /* 获取栈的长度 */ int size() { return stack.size(); } /* 判断栈是否为空 */ bool isEmpty() { return stack.size() == 0; } /* 入栈 */ void push(int num) { stack.push_back(num); } /* 出栈 */ int pop() { int num = top(); stack.pop_back(); return num; } /* 访问栈顶元素 */ int top() { if (isEmpty()) throw out_of_range(\\\"栈为空\\\"); return stack.back(); } /* 返回 Vector */ vector<int> toVector() { return stack; } };\"]},\"49\":{\"h\":\"两种实现对比\",\"t\":[\"支持操作\",\"两种实现都支持栈定义中的各项操作。数组实现额外支持随机访问，但这已超出了栈的定义范畴，因此一般不会用到。\",\"时间效率\",\"在基于数组的实现中，入栈和出栈操作都在预先分配好的连续内存中进行，具有很好的缓存本地性，因此效率较高。然而，如果入栈时超出数组容量，会触发扩容机制，导致该次入栈操作的时间复杂度变为 O(n) 。\",\"在基于链表的实现中，链表的扩容非常灵活，不存在上述数组扩容时效率降低的问题。但是，入栈操作需要初始化节点对象并修改指针，因此效率相对较低。不过，如果入栈元素本身就是节点对象，那么可以省去初始化步骤，从而提高效率。\",\"综上所述，当入栈与出栈操作的元素是基本数据类型时，例如 int 或 double ，我们可以得出以下结论。\",\"基于数组实现的栈在触发扩容时效率会降低，但由于扩容是低频操作，因此平均效率更高。\",\"基于链表实现的栈可以提供更加稳定的效率表现。\",\"空间效率\",\"在初始化列表时，系统会为列表分配“初始容量”，该容量可能超出实际需求；并且，扩容机制通常是按照特定倍率（例如 2 倍）进行扩容的，扩容后的容量也可能超出实际需求。因此，基于数组实现的栈可能造成一定的空间浪费。\",\"然而，由于链表节点需要额外存储指针，因此链表节点占用的空间相对较大。\",\"综上，我们不能简单地确定哪种实现更加节省内存，需要针对具体情况进行分析。\"]},\"50\":{\"h\":\"栈的典型应用\",\"t\":[\"浏览器中的后退与前进、软件中的撤销与反撤销。每当我们打开新的网页，浏览器就会对上一个网页执行入栈，这样我们就可以通过后退操作回到上一个网页。后退操作实际上是在执行出栈。如果要同时支持后退和前进，那么需要两个栈来配合实现。\",\"程序内存管理。每次调用函数时，系统都会在栈顶添加一个栈帧，用于记录函数的上下文信息。在递归函数中，向下递推阶段会不断执行入栈操作，而向上回溯阶段则会不断执行出栈操作。\"]},\"51\":{\"h\":\"重点回顾\",\"t\":[\"栈是一种遵循先入后出原则的数据结构，可通过数组或链表来实现。\",\"在时间效率方面，栈的数组实现具有较高的平均效率，但在扩容过程中，单次入栈操作的时间复杂度会劣化至 O(n) 。相比之下，栈的链表实现具有更为稳定的效率表现。\",\"在空间效率方面，栈的数组实现可能导致一定程度的空间浪费。但需要注意的是，链表节点所占用的内存空间比数组元素更大。\",\"队列是一种遵循先入先出原则的数据结构，同样可以通过数组或链表来实现。在时间效率和空间效率的对比上，队列的结论与前述栈的结论相似。\",\"双向队列是一种具有更高自由度的队列，它允许在两端进行元素的添加和删除操作。\"]},\"52\":{\"h\":\"Q & A\",\"t\":[\"Q：浏览器的前进后退是否是双向链表实现？\",\"浏览器的前进后退功能本质上是“栈”的体现。当用户访问一个新页面时，该页面会被添加到栈顶；当用户点击后退按钮时，该页面会从栈顶弹出。使用双向队列可以方便地实现一些额外操作，这个在“双向队列”章节有提到。\",\"Q：在出栈后，是否需要释放出栈节点的内存？\",\"如果后续仍需要使用弹出节点，则不需要释放内存。若之后不需要用到，Java 和 Python 等语言拥有自动垃圾回收机制，因此不需要手动释放内存；在 C 和 C++ 中需要手动释放内存。\",\"Q：双向队列像是两个栈拼接在了一起，它的用途是什么？\",\"双向队列就像是栈和队列的组合或两个栈拼在了一起。它表现的是栈 + 队列的逻辑，因此可以实现栈与队列的所有应用，并且更加灵活。\",\"Q：撤销（undo）和反撤销（redo）具体是如何实现的？\",\"使用两个栈，栈 A 用于撤销，栈 B 用于反撤销。\",\"每当用户执行一个操作，将这个操作压入栈 A ，并清空栈 B 。\",\"当用户执行“撤销”时，从栈 A 中弹出最近的操作，并将其压入栈 B 。\",\"当用户执行“反撤销”时，从栈 B 中弹出最近的操作，并将其压入栈 A 。\"]},\"53\":{\"c\":[\"数据结构\"]},\"54\":{\"c\":[\"c++\",\"栈\",\"队列\"]},\"55\":{\"h\":\"哈希表\"},\"56\":{\"h\":\"哈希表\",\"t\":[\"哈希表（hash table），又称散列表，它通过建立键 key 与值 value 之间的映射，实现高效的元素查询。具体而言，我们向哈希表中输入一个键 key ，则可以在 O(1) 时间内获取对应的值 value 。\",\"如下图所示，给定 n 个学生，每个学生都有“姓名”和“学号”两项数据。假如我们希望实现“输入一个学号，返回对应的姓名”的查询功能，则可以采用下图所示的哈希表来实现。\",\"哈希表的抽象表示\",\"除哈希表外，数组和链表也可以实现查询功能，它们的效率对比如下表所示。\",\"添加元素：仅需将元素添加至数组（链表）的尾部即可，使用 O(1) 时间。\",\"查询元素：由于数组（链表）是乱序的，因此需要遍历其中的所有元素，使用 O(n) 时间。\",\"删除元素：需要先查询到元素，再从数组（链表）中删除，使用 O(n) 时间。\",\"数组\",\"链表\",\"哈希表\",\"查找元素\",\"O(n)\",\"O(n)\",\"O(1)\",\"添加元素\",\"O(1)\",\"O(1)\",\"O(1)\",\"删除元素\",\"O(n)\",\"O(n)\",\"O(1)\",\"观察发现，在哈希表中进行增删查改的时间复杂度都是 O(1) ，非常高效。\"]},\"57\":{\"h\":\"哈希表常用操作\",\"t\":[\"哈希表的常见操作包括：初始化、查询操作、添加键值对和删除键值对等，示例代码如下：\",\" /* 初始化哈希表 */ unordered_map<int, string> map; /* 添加操作 */ // 在哈希表中添加键值对 (key, value) map[12836] = \\\"小哈\\\"; map[15937] = \\\"小啰\\\"; map[16750] = \\\"小算\\\"; map[13276] = \\\"小法\\\"; map[10583] = \\\"小鸭\\\"; /* 查询操作 */ // 向哈希表中输入键 key ，得到值 value string name = map[15937]; /* 删除操作 */ // 在哈希表中删除键值对 (key, value) map.erase(10583);\",\"哈希表有三种常用的遍历方式：遍历键值对、遍历键和遍历值。示例代码如下：\",\" /* 遍历哈希表 */ // 遍历键值对 key->value for (auto kv: map) { cout << kv.first << \\\" -> \\\" << kv.second << endl; } // 使用迭代器遍历 key->value for (auto iter = map.begin(); iter != map.end(); iter++) { cout << iter->first << \\\"->\\\" << iter->second << endl; }\"]},\"58\":{\"h\":\"哈希表简单实现\",\"t\":[\"我们先考虑最简单的情况，仅用一个数组来实现哈希表。在哈希表中，我们将数组中的每个空位称为桶（bucket），每个桶可存储一个键值对。因此，查询操作就是找到 key 对应的桶，并在桶中获取 value 。\",\"那么，如何基于 key 定位对应的桶呢？这是通过哈希函数（hash function）实现的。哈希函数的作用是将一个较大的输入空间映射到一个较小的输出空间。在哈希表中，输入空间是所有 key ，输出空间是所有桶（数组索引）。换句话说，输入一个 key ，我们可以通过哈希函数得到该 key 对应的键值对在数组中的存储位置。\",\"输入一个 key ，哈希函数的计算过程分为以下两步。\",\"通过某种哈希算法 hash() 计算得到哈希值。\",\"将哈希值对桶数量（数组长度）capacity 取模，从而获取该 key 对应的数组索引 index 。\",\"index = hash(key) % capacity\",\"随后，我们就可以利用 index 在哈希表中访问对应的桶，从而获取 value 。\",\"设数组长度 capacity = 100、哈希算法 hash(key) = key ，易得哈希函数为 key % 100 。下图以 key 学号和 value 姓名为例，展示了哈希函数的工作原理。\",\"哈希函数工作原理\",\"以下代码实现了一个简单哈希表。其中，我们将 key 和 value 封装成一个类 Pair ，以表示键值对。\",\"/* 键值对 */ struct Pair { public: int key; string val; Pair(int key, string val) { this->key = key; this->val = val; } }; /* 基于数组实现的哈希表 */ class ArrayHashMap { private: vector<Pair *> buckets; public: ArrayHashMap() { // 初始化数组，包含 100 个桶 buckets = vector<Pair *>(100); } ~ArrayHashMap() { // 释放内存 for (const auto &bucket : buckets) { delete bucket; } buckets.clear(); } /* 哈希函数 */ int hashFunc(int key) { int index = key % 100; return index; } /* 查询操作 */ string get(int key) { int index = hashFunc(key); Pair *pair = buckets[index]; if (pair == nullptr) return \\\"\\\"; return pair->val; } /* 添加操作 */ void put(int key, string val) { Pair *pair = new Pair(key, val); int index = hashFunc(key); buckets[index] = pair; } /* 删除操作 */ void remove(int key) { int index = hashFunc(key); // 释放内存并置为 nullptr delete buckets[index]; buckets[index] = nullptr; } /* 获取所有键值对 */ vector<Pair *> pairSet() { vector<Pair *> pairSet; for (Pair *pair : buckets) { if (pair != nullptr) { pairSet.push_back(pair); } } return pairSet; } /* 获取所有键 */ vector<int> keySet() { vector<int> keySet; for (Pair *pair : buckets) { if (pair != nullptr) { keySet.push_back(pair->key); } } return keySet; } /* 获取所有值 */ vector<string> valueSet() { vector<string> valueSet; for (Pair *pair : buckets) { if (pair != nullptr) { valueSet.push_back(pair->val); } } return valueSet; } /* 打印哈希表 */ void print() { for (Pair *kv : pairSet()) { cout << kv->key << \\\" -> \\\" << kv->val << endl; } } };\"]},\"59\":{\"h\":\"哈希冲突与扩容\",\"t\":[\"从本质上看，哈希函数的作用是将所有 key 构成的输入空间映射到数组所有索引构成的输出空间，而输入空间往往远大于输出空间。因此，理论上一定存在“多个输入对应相同输出”的情况。\",\"对于上述示例中的哈希函数，当输入的 key 后两位相同时，哈希函数的输出结果也相同。例如，查询学号为 12836 和 20336 的两个学生时，我们得到：\",\"12836 % 100 = 36 20336 % 100 = 36\",\"如下图所示，两个学号指向了同一个姓名，这显然是不对的。我们将这种多个输入对应同一输出的情况称为哈希冲突（hash collision）。\",\"哈希冲突示例\",\"容易想到，哈希表容量 n 越大，多个 key 被分配到同一个桶中的概率就越低，冲突就越少。因此，我们可以通过扩容哈希表来减少哈希冲突。\",\"如下图所示，扩容前键值对 (136, A) 和 (236, D) 发生冲突，扩容后冲突消失。\",\"哈希表扩容\",\"类似于数组扩容，哈希表扩容需将所有键值对从原哈希表迁移至新哈希表，非常耗时；并且由于哈希表容量 capacity 改变，我们需要通过哈希函数来重新计算所有键值对的存储位置，这进一步增加了扩容过程的计算开销。为此，编程语言通常会预留足够大的哈希表容量，防止频繁扩容。\",\"负载因子（load factor）是哈希表的一个重要概念，其定义为哈希表的元素数量除以桶数量，用于衡量哈希冲突的严重程度，也常作为哈希表扩容的触发条件。例如在 Java 中，当负载因子超过 0.75 时，系统会将哈希表扩容至原先的 2 倍。\"]},\"60\":{\"h\":\"哈希冲突\",\"t\":[\"通常情况下哈希函数的输入空间远大于输出空间，因此理论上哈希冲突是不可避免的。比如，输入空间为全体整数，输出空间为数组容量大小，则必然有多个整数映射至同一桶索引。\",\"哈希冲突会导致查询结果错误，严重影响哈希表的可用性。为了解决该问题，每当遇到哈希冲突时，我们就进行哈希表扩容，直至冲突消失为止。此方法简单粗暴且有效，但效率太低，因为哈希表扩容需要进行大量的数据搬运与哈希值计算。为了提升效率，我们可以采用以下策略。\",\"改良哈希表数据结构，使得哈希表可以在出现哈希冲突时正常工作。\",\"仅在必要时，即当哈希冲突比较严重时，才执行扩容操作。\",\"哈希表的结构改良方法主要包括“链式地址”和“开放寻址”。\"]},\"61\":{\"h\":\"链式地址\",\"t\":[\"在原始哈希表中，每个桶仅能存储一个键值对。链式地址（separate chaining）将单个元素转换为链表，将键值对作为链表节点，将所有发生冲突的键值对都存储在同一链表中。下图展示了一个链式地址哈希表的例子。\",\"链式地址哈希表\",\"基于链式地址实现的哈希表的操作方法发生了以下变化。\",\"查询元素：输入 key ，经过哈希函数得到桶索引，即可访问链表头节点，然后遍历链表并对比 key 以查找目标键值对。\",\"添加元素：首先通过哈希函数访问链表头节点，然后将节点（键值对）添加到链表中。\",\"删除元素：根据哈希函数的结果访问链表头部，接着遍历链表以查找目标节点并将其删除。\",\"链式地址存在以下局限性。\",\"占用空间增大：链表包含节点指针，它相比数组更加耗费内存空间。\",\"查询效率降低：因为需要线性遍历链表来查找对应元素。\",\"以下代码给出了链式地址哈希表的简单实现，需要注意两点。\",\"使用列表（动态数组）代替链表，从而简化代码。在这种设定下，哈希表（数组）包含多个桶，每个桶都是一个列表。\",\"以下实现包含哈希表扩容方法。当负载因子超过 32​ 时，我们将哈希表扩容至原先的 2 倍。\",\"/* 链式地址哈希表 */ class HashMapChaining { private: int size; // 键值对数量 int capacity; // 哈希表容量 double loadThres; // 触发扩容的负载因子阈值 int extendRatio; // 扩容倍数 vector<vector<Pair *>> buckets; // 桶数组 public: /* 构造方法 */ HashMapChaining() : size(0), capacity(4), loadThres(2.0 / 3.0), extendRatio(2) { buckets.resize(capacity); } /* 析构方法 */ ~HashMapChaining() { for (auto &bucket : buckets) { for (Pair *pair : bucket) { // 释放内存 delete pair; } } } /* 哈希函数 */ int hashFunc(int key) { return key % capacity; } /* 负载因子 */ double loadFactor() { return (double)size / (double)capacity; } /* 查询操作 */ string get(int key) { int index = hashFunc(key); // 遍历桶，若找到 key ，则返回对应 val for (Pair *pair : buckets[index]) { if (pair->key == key) { return pair->val; } } // 若未找到 key ，则返回空字符串 return \\\"\\\"; } /* 添加操作 */ void put(int key, string val) { // 当负载因子超过阈值时，执行扩容 if (loadFactor() > loadThres) { extend(); } int index = hashFunc(key); // 遍历桶，若遇到指定 key ，则更新对应 val 并返回 for (Pair *pair : buckets[index]) { if (pair->key == key) { pair->val = val; return; } } // 若无该 key ，则将键值对添加至尾部 buckets[index].push_back(new Pair(key, val)); size++; } /* 删除操作 */ void remove(int key) { int index = hashFunc(key); auto &bucket = buckets[index]; // 遍历桶，从中删除键值对 for (int i = 0; i < bucket.size(); i++) { if (bucket[i]->key == key) { Pair *tmp = bucket[i]; bucket.erase(bucket.begin() + i); // 从中删除键值对 delete tmp; // 释放内存 size--; return; } } } /* 扩容哈希表 */ void extend() { // 暂存原哈希表 vector<vector<Pair *>> bucketsTmp = buckets; // 初始化扩容后的新哈希表 capacity *= extendRatio; buckets.clear(); buckets.resize(capacity); size = 0; // 将键值对从原哈希表搬运至新哈希表 for (auto &bucket : bucketsTmp) { for (Pair *pair : bucket) { put(pair->key, pair->val); // 释放内存 delete pair; } } } /* 打印哈希表 */ void print() { for (auto &bucket : buckets) { cout << \\\"[\\\"; for (Pair *pair : bucket) { cout << pair->key << \\\" -> \\\" << pair->val << \\\", \\\"; } cout << \\\"]\\\\n\\\"; } } };\",\"值得注意的是，当链表很长时，查询效率 O(n) 很差。此时可以将链表转换为“AVL 树”或“红黑树”，从而将查询操作的时间复杂度优化至 O(logn) 。\"]},\"62\":{\"h\":\"开放寻址\",\"t\":[\"开放寻址（open addressing）不引入额外的数据结构，而是通过“多次探测”来处理哈希冲突，探测方式主要包括线性探测、平方探测和多次哈希等。\",\"下面以线性探测为例，介绍开放寻址哈希表的工作机制。\"]},\"63\":{\"h\":\"线性探测\",\"t\":[\"线性探测采用固定步长的线性搜索来进行探测，其操作方法与普通哈希表有所不同。\",\"插入元素：通过哈希函数计算桶索引，若发现桶内已有元素，则从冲突位置向后线性遍历（步长通常为 1 ），直至找到空桶，将元素插入其中。\",\"查找元素：若发现哈希冲突，则使用相同步长向后进行线性遍历，直到找到对应元素，返回 value 即可；如果遇到空桶，说明目标元素不在哈希表中，返回 None 。\",\"下图展示了开放寻址（线性探测）哈希表的键值对分布。根据此哈希函数，最后两位相同的 key 都会被映射到相同的桶。而通过线性探测，它们被依次存储在该桶以及之下的桶中。\",\"开放寻址（线性探测）哈希表的键值对分布\",\"然而，线性探测容易产生“聚集现象”。具体来说，数组中连续被占用的位置越长，这些连续位置发生哈希冲突的可能性越大，从而进一步促使该位置的聚堆生长，形成恶性循环，最终导致增删查改操作效率劣化。\",\"值得注意的是，我们不能在开放寻址哈希表中直接删除元素。这是因为删除元素会在数组内产生一个空桶 None ，而当查询元素时，线性探测到该空桶就会返回，因此在该空桶之下的元素都无法再被访问到，程序可能误判这些元素不存在，如下图所示。\",\"在开放寻址中删除元素导致的查询问题\",\"为了解决该问题，我们可以采用懒删除（lazy deletion）机制：它不直接从哈希表中移除元素，而是利用一个常量 TOMBSTONE 来标记这个桶。在该机制下，None 和 TOMBSTONE 都代表空桶，都可以放置键值对。但不同的是，线性探测到 TOMBSTONE 时应该继续遍历，因为其之下可能还存在键值对。\",\"然而，懒删除可能会加速哈希表的性能退化。这是因为每次删除操作都会产生一个删除标记，随着 TOMBSTONE 的增加，搜索时间也会增加，因为线性探测可能需要跳过多个 TOMBSTONE 才能找到目标元素。\",\"为此，考虑在线性探测中记录遇到的首个 TOMBSTONE 的索引，并将搜索到的目标元素与该 TOMBSTONE 交换位置。这样做的好处是当每次查询或添加元素时，元素会被移动至距离理想位置（探测起始点）更近的桶，从而优化查询效率。\",\"以下代码实现了一个包含懒删除的开放寻址（线性探测）哈希表。为了更加充分地使用哈希表的空间，我们将哈希表看作一个“环形数组”，当越过数组尾部时，回到头部继续遍历。\",\" /* 开放寻址哈希表 */ class HashMapOpenAddressing { private: int size; // 键值对数量 int capacity = 4; // 哈希表容量 const double loadThres = 2.0 / 3.0; // 触发扩容的负载因子阈值 const int extendRatio = 2; // 扩容倍数 vector<Pair *> buckets; // 桶数组 Pair *TOMBSTONE = new Pair(-1, \\\"-1\\\"); // 删除标记 public: /* 构造方法 */ HashMapOpenAddressing() : size(0), buckets(capacity, nullptr) { } /* 析构方法 */ ~HashMapOpenAddressing() { for (Pair *pair : buckets) { if (pair != nullptr && pair != TOMBSTONE) { delete pair; } } delete TOMBSTONE; } /* 哈希函数 */ int hashFunc(int key) { return key % capacity; } /* 负载因子 */ double loadFactor() { return (double)size / capacity; } /* 搜索 key 对应的桶索引 */ int findBucket(int key) { int index = hashFunc(key); int firstTombstone = -1; // 线性探测，当遇到空桶时跳出 while (buckets[index] != nullptr) { // 若遇到 key ，返回对应的桶索引 if (buckets[index]->key == key) { // 若之前遇到了删除标记，则将键值对移动至该索引处 if (firstTombstone != -1) { buckets[firstTombstone] = buckets[index]; buckets[index] = TOMBSTONE; return firstTombstone; // 返回移动后的桶索引 } return index; // 返回桶索引 } // 记录遇到的首个删除标记 if (firstTombstone == -1 && buckets[index] == TOMBSTONE) { firstTombstone = index; } // 计算桶索引，越过尾部则返回头部 index = (index + 1) % capacity; } // 若 key 不存在，则返回添加点的索引 return firstTombstone == -1 ? index : firstTombstone; } /* 查询操作 */ string get(int key) { // 搜索 key 对应的桶索引 int index = findBucket(key); // 若找到键值对，则返回对应 val if (buckets[index] != nullptr && buckets[index] != TOMBSTONE) { return buckets[index]->val; } // 若键值对不存在，则返回空字符串 return \\\"\\\"; } /* 添加操作 */ void put(int key, string val) { // 当负载因子超过阈值时，执行扩容 if (loadFactor() > loadThres) { extend(); } // 搜索 key 对应的桶索引 int index = findBucket(key); // 若找到键值对，则覆盖 val 并返回 if (buckets[index] != nullptr && buckets[index] != TOMBSTONE) { buckets[index]->val = val; return; } // 若键值对不存在，则添加该键值对 buckets[index] = new Pair(key, val); size++; } /* 删除操作 */ void remove(int key) { // 搜索 key 对应的桶索引 int index = findBucket(key); // 若找到键值对，则用删除标记覆盖它 if (buckets[index] != nullptr && buckets[index] != TOMBSTONE) { delete buckets[index]; buckets[index] = TOMBSTONE; size--; } } /* 扩容哈希表 */ void extend() { // 暂存原哈希表 vector<Pair *> bucketsTmp = buckets; // 初始化扩容后的新哈希表 capacity *= extendRatio; buckets = vector<Pair *>(capacity, nullptr); size = 0; // 将键值对从原哈希表搬运至新哈希表 for (Pair *pair : bucketsTmp) { if (pair != nullptr && pair != TOMBSTONE) { put(pair->key, pair->val); delete pair; } } } /* 打印哈希表 */ void print() { for (Pair *pair : buckets) { if (pair == nullptr) { cout << \\\"nullptr\\\" << endl; } else if (pair == TOMBSTONE) { cout << \\\"TOMBSTONE\\\" << endl; } else { cout << pair->key << \\\" -> \\\" << pair->val << endl; } } } };\"]},\"64\":{\"h\":\"平方探测\",\"t\":[\"平方探测与线性探测类似，都是开放寻址的常见策略之一。当发生冲突时，平方探测不是简单地跳过一个固定的步数，而是跳过“探测次数的平方”的步数，即 1,4,9,… 步。\",\"平方探测主要具有以下优势。\",\"平方探测通过跳过探测次数平方的距离，试图缓解线性探测的聚集效应。\",\"平方探测会跳过更大的距离来寻找空位置，有助于数据分布得更加均匀。\",\"然而，平方探测并不是完美的。\",\"仍然存在聚集现象，即某些位置比其他位置更容易被占用。\",\"由于平方的增长，平方探测可能不会探测整个哈希表，这意味着即使哈希表中有空桶，平方探测也可能无法访问到它。\"]},\"65\":{\"h\":\"多次哈希\",\"t\":[\"顾名思义，多次哈希方法使用多个哈希函数 f1​(x)、f2​(x)、f3​(x)、… 进行探测。\",\"插入元素：若哈希函数 f1​(x) 出现冲突，则尝试 f2​(x) ，以此类推，直到找到空位后插入元素。\",\"查找元素：在相同的哈希函数顺序下进行查找，直到找到目标元素时返回；若遇到空位或已尝试所有哈希函数，说明哈希表中不存在该元素，则返回 None 。\",\"与线性探测相比，多次哈希方法不易产生聚集，但多个哈希函数会带来额外的计算量。\",\"相关信息\",\"请注意，开放寻址（线性探测、平方探测和多次哈希）哈希表都存在“不能直接删除元素”的问题。\"]},\"66\":{\"h\":\"编程语言的选择\",\"t\":[\"各种编程语言采取了不同的哈希表实现策略，下面举几个例子。\",\"Python 采用开放寻址。字典 dict 使用伪随机数进行探测。\",\"Java 采用链式地址。自 JDK 1.8 以来，当 HashMap 内数组长度达到 64 且链表长度达到 8 时，链表会转换为红黑树以提升查找性能。\",\"Go 采用链式地址。Go 规定每个桶最多存储 8 个键值对，超出容量则连接一个溢出桶；当溢出桶过多时，会执行一次特殊的等量扩容操作，以确保性能。\"]},\"67\":{\"h\":\"哈希算法\",\"t\":[\"前两节介绍了哈希表的工作原理和哈希冲突的处理方法。然而无论是开放寻址还是链式地址，它们只能保证哈希表可以在发生冲突时正常工作，而无法减少哈希冲突的发生。\",\"如果哈希冲突过于频繁，哈希表的性能则会急剧劣化。如下图所示，对于链式地址哈希表，理想情况下键值对均匀分布在各个桶中，达到最佳查询效率；最差情况下所有键值对都存储到同一个桶中，时间复杂度退化至 O(n) 。\",\"哈希冲突的最佳情况与最差情况\",\"键值对的分布情况由哈希函数决定。回忆哈希函数的计算步骤，先计算哈希值，再对数组长度取模：\",\"index = hash(key) % capacity\",\"观察以上公式，当哈希表容量 capacity 固定时，哈希算法 hash() 决定了输出值，进而决定了键值对在哈希表中的分布情况。\",\"这意味着，为了降低哈希冲突的发生概率，我们应当将注意力集中在哈希算法 hash() 的设计上。\"]},\"68\":{\"h\":\"哈希算法的目标\",\"t\":[\"为了实现“既快又稳”的哈希表数据结构，哈希算法应具备以下特点。\",\"确定性：对于相同的输入，哈希算法应始终产生相同的输出。这样才能确保哈希表是可靠的。\",\"效率高：计算哈希值的过程应该足够快。计算开销越小，哈希表的实用性越高。\",\"均匀分布：哈希算法应使得键值对均匀分布在哈希表中。分布越均匀，哈希冲突的概率就越低。\",\"实际上，哈希算法除了可以用于实现哈希表，还广泛应用于其他领域中。\",\"密码存储：为了保护用户密码的安全，系统通常不会直接存储用户的明文密码，而是存储密码的哈希值。当用户输入密码时，系统会对输入的密码计算哈希值，然后与存储的哈希值进行比较。如果两者匹配，那么密码就被视为正确。\",\"数据完整性检查：数据发送方可以计算数据的哈希值并将其一同发送；接收方可以重新计算接收到的数据的哈希值，并与接收到的哈希值进行比较。如果两者匹配，那么数据就被视为完整。\",\"对于密码学的相关应用，为了防止从哈希值推导出原始密码等逆向工程，哈希算法需要具备更高等级的安全特性。\",\"单向性：无法通过哈希值反推出关于输入数据的任何信息。\",\"抗碰撞性：应当极难找到两个不同的输入，使得它们的哈希值相同。\",\"雪崩效应：输入的微小变化应当导致输出的显著且不可预测的变化。\",\"请注意，“均匀分布”与“抗碰撞性”是两个独立的概念，满足均匀分布不一定满足抗碰撞性。例如，在随机输入 key 下，哈希函数 key % 100 可以产生均匀分布的输出。然而该哈希算法过于简单，所有后两位相等的 key 的输出都相同，因此我们可以很容易地从哈希值反推出可用的 key ，从而破解密码。\"]},\"69\":{\"h\":\"哈希算法的设计\",\"t\":[\"哈希算法的设计是一个需要考虑许多因素的复杂问题。然而对于某些要求不高的场景，我们也能设计一些简单的哈希算法。\",\"加法哈希：对输入的每个字符的 ASCII 码进行相加，将得到的总和作为哈希值。\",\"乘法哈希：利用乘法的不相关性，每轮乘以一个常数，将各个字符的 ASCII 码累积到哈希值中。\",\"异或哈希：将输入数据的每个元素通过异或操作累积到一个哈希值中。\",\"旋转哈希：将每个字符的 ASCII 码累积到一个哈希值中，每次累积之前都会对哈希值进行旋转操作。\",\"/* 旋转哈希 */ int rotHash(string key) { long long hash = 0; const int MODULUS = 1000000007; for (unsigned char c : key) { hash = ((hash << 4) ^ (hash >> 28) ^ (int)c) % MODULUS; } return (int)hash; }\",\"观察发现，每种哈希算法的最后一步都是对大质数 1000000007 取模，以确保哈希值在合适的范围内。值得思考的是，为什么要强调对质数取模，或者说对合数取模的弊端是什么？这是一个有趣的问题。\",\"先抛出结论：使用大质数作为模数，可以最大化地保证哈希值的均匀分布。因为质数不与其他数字存在公约数，可以减少因取模操作而产生的周期性模式，从而避免哈希冲突。\",\"举个例子，假设我们选择合数 9 作为模数，它可以被 3 整除，那么所有可以被 3 整除的 key 都会被映射到 0、3、6 这三个哈希值。\",\"moduluskeyhash​=9={0,3,6,9,12,15,18,21,24,27,30,33,…}={0,3,6,0,3,6,0,3,6,0,3,6,…}​\",\"如果输入 key 恰好满足这种等差数列的数据分布，那么哈希值就会出现聚堆，从而加重哈希冲突。现在，假设将 modulus 替换为质数 13 ，由于 key 和 modulus 之间不存在公约数，因此输出的哈希值的均匀性会明显提升。\",\"moduluskeyhash​=13={0,3,6,9,12,15,18,21,24,27,30,33,…}={0,3,6,9,12,2,5,8,11,1,4,7,…}​\",\"值得说明的是，如果能够保证 key 是随机均匀分布的，那么选择质数或者合数作为模数都可以，它们都能输出均匀分布的哈希值。而当 key 的分布存在某种周期性时，对合数取模更容易出现聚集现象。\",\"总而言之，我们通常选取质数作为模数，并且这个质数最好足够大，以尽可能消除周期性模式，提升哈希算法的稳健性。\"]},\"70\":{\"h\":\"常见哈希算法\",\"t\":[\"不难发现，以上介绍的简单哈希算法都比较“脆弱”，远远没有达到哈希算法的设计目标。例如，由于加法和异或满足交换律，因此加法哈希和异或哈希无法区分内容相同但顺序不同的字符串，这可能会加剧哈希冲突，并引起一些安全问题。\",\"在实际中，我们通常会用一些标准哈希算法，例如 MD5、SHA-1、SHA-2 和 SHA-3 等。它们可以将任意长度的输入数据映射到恒定长度的哈希值。\",\"近一个世纪以来，哈希算法处在不断升级与优化的过程中。一部分研究人员努力提升哈希算法的性能，另一部分研究人员和黑客则致力于寻找哈希算法的安全性问题。下表展示了在实际应用中常见的哈希算法。\",\"MD5 和 SHA-1 已多次被成功攻击，因此它们被各类安全应用弃用。\",\"SHA-2 系列中的 SHA-256 是最安全的哈希算法之一，仍未出现成功的攻击案例，因此常用在各类安全应用与协议中。\",\"SHA-3 相较 SHA-2 的实现开销更低、计算效率更高，但目前使用覆盖度不如 SHA-2 系列。\",\"MD5\",\"SHA-1\",\"SHA-2\",\"SHA-3\",\"推出时间\",\"1992\",\"1995\",\"2002\",\"2008\",\"输出长度\",\"128 bit\",\"160 bit\",\"256/512 bit\",\"224/256/384/512 bit\",\"哈希冲突\",\"较多\",\"较多\",\"很少\",\"很少\",\"安全等级\",\"低，已被成功攻击\",\"低，已被成功攻击\",\"高\",\"高\",\"应用\",\"已被弃用，仍用于数据完整性检查\",\"已被弃用\",\"加密货币交易验证、数字签名等\",\"可用于替代 SHA-2\"]},\"71\":{\"h\":\"数据结构的哈希值\",\"t\":[\"我们知道，哈希表的 key 可以是整数、小数或字符串等数据类型。编程语言通常会为这些数据类型提供内置的哈希算法，用于计算哈希表中的桶索引。以 Python 为例，我们可以调用 hash() 函数来计算各种数据类型的哈希值。\",\"整数和布尔量的哈希值就是其本身。\",\"浮点数和字符串的哈希值计算较为复杂，有兴趣的读者请自行学习。\",\"元组的哈希值是对其中每一个元素进行哈希，然后将这些哈希值组合起来，得到单一的哈希值。\",\"对象的哈希值基于其内存地址生成。通过重写对象的哈希方法，可实现基于内容生成哈希值。\",\"相关信息\",\"请注意，不同编程语言的内置哈希值计算函数的定义和方法不同。\",\" int num = 3; size_t hashNum = hash<int>()(num); // 整数 3 的哈希值为 3 bool bol = true; size_t hashBol = hash<bool>()(bol); // 布尔量 1 的哈希值为 1 double dec = 3.14159; size_t hashDec = hash<double>()(dec); // 小数 3.14159 的哈希值为 4614256650576692846 string str = \\\"Hello 算法\\\"; size_t hashStr = hash<string>()(str); // 字符串“Hello 算法”的哈希值为 15466937326284535026 // 在 C++ 中，内置 std:hash() 仅提供基本数据类型的哈希值计算 // 数组、对象的哈希值计算需要自行实现\",\"在许多编程语言中，只有不可变对象才可作为哈希表的 key 。假如我们将列表（动态数组）作为 key ，当列表的内容发生变化时，它的哈希值也随之改变，我们就无法在哈希表中查询到原先的 value 了。\",\"虽然自定义对象（比如链表节点）的成员变量是可变的，但它是可哈希的。这是因为对象的哈希值通常是基于内存地址生成的，即使对象的内容发生了变化，但它的内存地址不变，哈希值仍然是不变的。\",\"细心的你可能发现在不同控制台中运行程序时，输出的哈希值是不同的。这是因为 Python 解释器在每次启动时，都会为字符串哈希函数加入一个随机的盐（salt）值。这种做法可以有效防止 HashDoS 攻击，提升哈希算法的安全性。\"]},\"72\":{\"h\":\"重点回顾\",\"t\":[\"输入 key ，哈希表能够在 O(1) 时间内查询到 value ，效率非常高。\",\"常见的哈希表操作包括查询、添加键值对、删除键值对和遍历哈希表等。\",\"哈希函数将 key 映射为数组索引，从而访问对应桶并获取 value 。\",\"两个不同的 key 可能在经过哈希函数后得到相同的数组索引，导致查询结果出错，这种现象被称为哈希冲突。\",\"哈希表容量越大，哈希冲突的概率就越低。因此可以通过扩容哈希表来缓解哈希冲突。与数组扩容类似，哈希表扩容操作的开销很大。\",\"负载因子定义为哈希表中元素数量除以桶数量，反映了哈希冲突的严重程度，常用作触发哈希表扩容的条件。\",\"链式地址通过将单个元素转化为链表，将所有冲突元素存储在同一个链表中。然而，链表过长会降低查询效率，可以通过进一步将链表转换为红黑树来提高效率。\",\"开放寻址通过多次探测来处理哈希冲突。线性探测使用固定步长，缺点是不能删除元素，且容易产生聚集。多次哈希使用多个哈希函数进行探测，相较线性探测更不易产生聚集，但多个哈希函数增加了计算量。\",\"不同编程语言采取了不同的哈希表实现。例如，Java 的 HashMap 使用链式地址，而 Python 的 Dict 采用开放寻址。\",\"在哈希表中，我们希望哈希算法具有确定性、高效率和均匀分布的特点。在密码学中，哈希算法还应该具备抗碰撞性和雪崩效应。\",\"哈希算法通常采用大质数作为模数，以最大化地保证哈希值均匀分布，减少哈希冲突。\",\"常见的哈希算法包括 MD5、SHA-1、SHA-2 和 SHA-3 等。MD5 常用于校验文件完整性，SHA-2 常用于安全应用与协议。\",\"编程语言通常会为数据类型提供内置哈希算法，用于计算哈希表中的桶索引。通常情况下，只有不可变对象是可哈希的。\"]},\"73\":{\"h\":\"Q & A\",\"t\":[\"Q：哈希表的时间复杂度在什么情况下是 O(n) ？\",\"当哈希冲突比较严重时，哈希表的时间复杂度会退化至 O(n) 。当哈希函数设计得比较好、容量设置比较合理、冲突比较平均时，时间复杂度是 O(1) 。我们使用编程语言内置的哈希表时，通常认为时间复杂度是 O(1) 。\",\"Q：为什么不使用哈希函数 f(x)=x 呢？这样就不会有冲突了。\",\"在 f(x)=x 哈希函数下，每个元素对应唯一的桶索引，这与数组等价。然而，输入空间通常远大于输出空间（数组长度），因此哈希函数的最后一步往往是对数组长度取模。换句话说，哈希表的目标是将一个较大的状态空间映射到一个较小的空间，并提供 O(1) 的查询效率。\",\"Q：哈希表底层实现是数组、链表、二叉树，但为什么效率可以比它们更高呢？\",\"首先，哈希表的时间效率变高，但空间效率变低了。哈希表有相当一部分内存未使用。\",\"其次，只是在特定使用场景下时间效率变高了。如果一个功能能够在相同的时间复杂度下使用数组或链表实现，那么通常比哈希表更快。这是因为哈希函数计算需要开销，时间复杂度的常数项更大。\",\"最后，哈希表的时间复杂度可能发生劣化。例如在链式地址中，我们采取在链表或红黑树中执行查找操作，仍然有退化至 O(n) 时间的风险。\",\"Q：多次哈希有不能直接删除元素的缺陷吗？标记为已删除的空间还能再次使用吗？\",\"多次哈希是开放寻址的一种，开放寻址法都有不能直接删除元素的缺陷，需要通过标记删除。标记为已删除的空间可以再次使用。当将新元素插入哈希表，并且通过哈希函数找到标记为已删除的位置时，该位置可以被新元素使用。这样做既能保持哈希表的探测序列不变，又能保证哈希表的空间使用率。\",\"Q：为什么在线性探测中，查找元素的时候会出现哈希冲突呢？\",\"查找的时候通过哈希函数找到对应的桶和键值对，发现 key 不匹配，这就代表有哈希冲突。因此，线性探测法会根据预先设定的步长依次向下查找，直至找到正确的键值对或无法找到跳出为止。\",\"Q：为什么哈希表扩容能够缓解哈希冲突？\",\"哈希函数的最后一步往往是对数组长度 n 取模（取余），让输出值落在数组索引范围内；在扩容后，数组长度 n 发生变化，而 key 对应的索引也可能发生变化。原先落在同一个桶的多个 key ，在扩容后可能会被分配到多个桶中，从而实现哈希冲突的缓解。\"]},\"74\":{\"c\":[\"数据结构\"]},\"75\":{\"c\":[\"c++\",\"hash\",\"哈希表\"]},\"76\":{\"h\":\"二叉树\"},\"77\":{\"h\":\"二叉树\",\"t\":[\"二叉树（binary tree）是一种非线性数据结构，代表“祖先”与“后代”之间的派生关系，体现了“一分为二”的分治逻辑。与链表类似，二叉树的基本单元是节点，每个节点包含值、左子节点引用和右子节点引用。\",\" /* 二叉树节点结构体 */ struct TreeNode { int val; // 节点值 TreeNode *left; // 左子节点指针 TreeNode *right; // 右子节点指针 TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} };\",\"每个节点都有两个引用（指针），分别指向左子节点（left-child node）和右子节点（right-child node），该节点被称为这两个子节点的父节点（parent node）。当给定一个二叉树的节点时，我们将该节点的左子节点及其以下节点形成的树称为该节点的左子树（left subtree），同理可得右子树（right subtree）。\",\"在二叉树中，除叶节点外，其他所有节点都包含子节点和非空子树。如下图所示，如果将“节点 2”视为父节点，则其左子节点和右子节点分别是“节点 4”和“节点 5”，左子树是“节点 4 及其以下节点形成的树”，右子树是“节点 5 及其以下节点形成的树”。\",\"父节点、子节点、子树\"]},\"78\":{\"h\":\"二叉树常见术语\",\"t\":[\"二叉树的常用术语如下图所示。\",\"根节点（root node）：位于二叉树顶层的节点，没有父节点。\",\"叶节点（leaf node）：没有子节点的节点，其两个指针均指向 None 。\",\"边（edge）：连接两个节点的线段，即节点引用（指针）。\",\"节点所在的层（level）：从顶至底递增，根节点所在层为 1 。\",\"节点的度（degree）：节点的子节点的数量。在二叉树中，度的取值范围是 0、1、2 。\",\"二叉树的高度（height）：从根节点到最远叶节点所经过的边的数量。\",\"节点的深度（depth）：从根节点到该节点所经过的边的数量。\",\"节点的高度（height）：从距离该节点最远的叶节点到该节点所经过的边的数量。\",\"二叉树的常用术语\",\"相关信息\",\"请注意，我们通常将“高度”和“深度”定义为“经过的边的数量”，但有些题目或教材可能会将其定义为“经过的节点的数量”。在这种情况下，高度和深度都需要加 1 。\"]},\"79\":{\"h\":\"二叉树基本操作\"},\"80\":{\"h\":\"初始化二叉树\",\"t\":[\"与链表类似，首先初始化节点，然后构建引用（指针）。\",\" /* 初始化二叉树 */ // 初始化节点 TreeNode* n1 = new TreeNode(1); TreeNode* n2 = new TreeNode(2); TreeNode* n3 = new TreeNode(3); TreeNode* n4 = new TreeNode(4); TreeNode* n5 = new TreeNode(5); // 构建节点之间的引用（指针） n1->left = n2; n1->right = n3; n2->left = n4; n2->right = n5;\"]},\"81\":{\"h\":\"插入与删除节点\",\"t\":[\"与链表类似，在二叉树中插入与删除节点可以通过修改指针来实现。下图给出了一个示例。\",\"在二叉树中插入与删除节点\",\" /* 插入与删除节点 */ TreeNode* P = new TreeNode(0); // 在 n1 -> n2 中间插入节点 P n1->left = P; P->left = n2; // 删除节点 P n1->left = n2;\",\"提示\",\"需要注意的是，插入节点可能会改变二叉树的原有逻辑结构，而删除节点通常意味着删除该节点及其所有子树。因此，在二叉树中，插入与删除通常是由一套操作配合完成的，以实现有实际意义的操作。\"]},\"82\":{\"h\":\"常见二叉树类型\"},\"83\":{\"h\":\"完美二叉树\",\"t\":[\"如下图所示，完美二叉树（perfect binary tree）所有层的节点都被完全填满。在完美二叉树中，叶节点的度为 0 ，其余所有节点的度都为 2 ；若树的高度为 h ，则节点总数为 2h+1−1 ，呈现标准的指数级关系，反映了自然界中常见的细胞分裂现象。\",\"提示\",\"请注意，在中文社区中，完美二叉树常被称为满二叉树。 \",\"完美二叉树\"]},\"84\":{\"h\":\"完全二叉树\",\"t\":[\"如下图所示，完全二叉树（complete binary tree）只有最底层的节点未被填满，且最底层节点尽量靠左填充。请注意，完美二叉树也是一棵完全二叉树。\",\"完全二叉树\"]},\"85\":{\"h\":\"平衡二叉树\",\"t\":[\"如下图所示，平衡二叉树（balanced binary tree）中任意节点的左子树和右子树的高度之差的绝对值不超过 1 。\",\"平衡二叉树\"]},\"86\":{\"h\":\"二叉树的退化\",\"t\":[\"下图展示了二叉树的理想结构与退化结构。当二叉树的每层节点都被填满时，达到“完美二叉树”；而当所有节点都偏向一侧时，二叉树退化为“链表”。\",\"完美二叉树是理想情况，可以充分发挥二叉树“分治”的优势。\",\"链表则是另一个极端，各项操作都变为线性操作，时间复杂度退化至 O(n) 。\",\"二叉树的最佳结构与最差结构\",\"如下表所示，在最佳结构和最差结构下，二叉树的叶节点数量、节点总数、高度等达到极大值或极小值。\",\"完美二叉树\",\"链表\",\"第 i 层的节点数量\",\"2i−1\",\"1\",\"高度为 h 的树的叶节点数量\",\"2h\",\"1\",\"高度为 h 的树的节点总数\",\"2h+1−1\",\"h+1\",\"节点总数为 n 的树的高度\",\"log2​(n+1)−1\",\"n−1\"]},\"87\":{\"h\":\"二叉搜索树\",\"t\":[\"如下图所示，二叉搜索树（binary search tree）满足以下条件。\",\"对于根节点，左子树中所有节点的值 < 根节点的值 < 右子树中所有节点的值。\",\"任意节点的左、右子树也是二叉搜索树，即同样满足条件 1. 。\",\"二叉搜索树\"]},\"88\":{\"h\":\"二叉搜索树的操作\",\"t\":[\"我们将二叉搜索树封装为一个类 BinarySearchTree ，并声明一个成员变量 root ，指向树的根节点。\"]},\"89\":{\"h\":\"查找节点\",\"t\":[\"给定目标节点值 num ，可以根据二叉搜索树的性质来查找。如下图所示，我们声明一个节点 cur ，从二叉树的根节点 root 出发，循环比较节点值 cur.val 和 num 之间的大小关系。\",\"若 cur.val < num ，说明目标节点在 cur 的右子树中，因此执行 cur = cur.right 。\",\"若 cur.val > num ，说明目标节点在 cur 的左子树中，因此执行 cur = cur.left 。\",\"若 cur.val = num ，说明找到目标节点，跳出循环并返回该节点。\",\"二叉搜索树查找节点示例\",\"bst_search_step2\",\"bst_search_step3\",\"bst_search_step4\",\"二叉搜索树的查找操作与二分查找算法的工作原理一致，都是每轮排除一半情况。循环次数最多为二叉树的高度，当二叉树平衡时，使用 O(logn) 时间。示例代码如下：\",\"/* 查找节点 */ TreeNode *search(int num) { TreeNode *cur = root; // 循环查找，越过叶节点后跳出 while (cur != nullptr) { // 目标节点在 cur 的右子树中 if (cur->val < num) cur = cur->right; // 目标节点在 cur 的左子树中 else if (cur->val > num) cur = cur->left; // 找到目标节点，跳出循环 else break; } // 返回目标节点 return cur; }\"]},\"90\":{\"h\":\"插入节点\",\"t\":[\"给定一个待插入元素 num ，为了保持二叉搜索树“左子树 < 根节点 < 右子树”的性质，插入操作流程如下图所示。\",\"查找插入位置：与查找操作相似，从根节点出发，根据当前节点值和 num 的大小关系循环向下搜索，直到越过叶节点（遍历至 None ）时跳出循环。\",\"在该位置插入节点：初始化节点 num ，将该节点置于 None 的位置。\",\"在二叉搜索树中插入节点\",\"在代码实现中，需要注意以下两点。\",\"二叉搜索树不允许存在重复节点，否则将违反其定义。因此，若待插入节点在树中已存在，则不执行插入，直接返回。\",\"为了实现插入节点，我们需要借助节点 pre 保存上一轮循环的节点。这样在遍历至 None 时，我们可以获取到其父节点，从而完成节点插入操作。\",\"/* 插入节点 */ void insert(int num) { // 若树为空，则初始化根节点 if (root == nullptr) { root = new TreeNode(num); return; } TreeNode *cur = root, *pre = nullptr; // 循环查找，越过叶节点后跳出 while (cur != nullptr) { // 找到重复节点，直接返回 if (cur->val == num) return; pre = cur; // 插入位置在 cur 的右子树中 if (cur->val < num) cur = cur->right; // 插入位置在 cur 的左子树中 else cur = cur->left; } // 插入节点 TreeNode *node = new TreeNode(num); if (pre->val < num) pre->right = node; else pre->left = node; }\",\"与查找节点相同，插入节点使用 O(logn) 时间。\"]},\"91\":{\"h\":\"删除节点\",\"t\":[\"先在二叉树中查找到目标节点，再将其删除。与插入节点类似，我们需要保证在删除操作完成后，二叉搜索树的“左子树 < 根节点 < 右子树”的性质仍然满足。因此，我们根据目标节点的子节点数量，分 0、1 和 2 三种情况，执行对应的删除节点操作。\",\"如下图所示，当待删除节点的度为 0 时，表示该节点是叶节点，可以直接删除。\",\"在二叉搜索树中删除节点（度为 0 ）\",\"如下图所示，当待删除节点的度为 1 时，将待删除节点替换为其子节点即可。\",\"在二叉搜索树中删除节点（度为 1 ）\",\"当待删除节点的度为 2 时，我们无法直接删除它，而需要使用一个节点替换该节点。由于要保持二叉搜索树“左子树 < 根节点 < 右子树”的性质，因此这个节点可以是右子树的最小节点或左子树的最大节点。\",\"假设我们选择右子树的最小节点（中序遍历的下一个节点），则删除操作流程如下图所示。\",\"找到待删除节点在“中序遍历序列”中的下一个节点，记为 tmp 。\",\"用 tmp 的值覆盖待删除节点的值，并在树中递归删除节点 tmp 。\",\"在二叉搜索树中删除节点（度为 2 ）\",\"bst_remove_case3_step2\",\"bst_remove_case3_step3\",\"bst_remove_case3_step4\",\"删除节点操作同样使用 O(logn) 时间，其中查找待删除节点需要 O(logn) 时间，获取中序遍历后继节点需要 O(logn) 时间。示例代码如下：\",\" /* 删除节点 */ void remove(int num) { // 若树为空，直接提前返回 if (root == nullptr) return; TreeNode *cur = root, *pre = nullptr; // 循环查找，越过叶节点后跳出 while (cur != nullptr) { // 找到待删除节点，跳出循环 if (cur->val == num) break; pre = cur; // 待删除节点在 cur 的右子树中 if (cur->val < num) cur = cur->right; // 待删除节点在 cur 的左子树中 else cur = cur->left; } // 若无待删除节点，则直接返回 if (cur == nullptr) return; // 子节点数量 = 0 or 1 if (cur->left == nullptr || cur->right == nullptr) { // 当子节点数量 = 0 / 1 时， child = nullptr / 该子节点 TreeNode *child = cur->left != nullptr ? cur->left : cur->right; // 删除节点 cur if (cur != root) { if (pre->left == cur) pre->left = child; else pre->right = child; } else { // 若删除节点为根节点，则重新指定根节点 root = child; } // 释放内存 delete cur; } // 子节点数量 = 2 else { // 获取中序遍历中 cur 的下一个节点 TreeNode *tmp = cur->right; while (tmp->left != nullptr) { tmp = tmp->left; } int tmpVal = tmp->val; // 递归删除节点 tmp remove(tmp->val); // 用 tmp 覆盖 cur cur->val = tmpVal; } }\"]},\"92\":{\"h\":\"中序遍历有序\",\"t\":[\"如下图所示，二叉树的中序遍历遵循“左 → 根 → 右”的遍历顺序，而二叉搜索树满足“左子节点 < 根节点 < 右子节点”的大小关系。\",\"这意味着在二叉搜索树中进行中序遍历时，总是会优先遍历下一个最小节点，从而得出一个重要性质：二叉搜索树的中序遍历序列是升序的。\",\"利用中序遍历升序的性质，我们在二叉搜索树中获取有序数据仅需 O(n) 时间，无须进行额外的排序操作，非常高效。\",\"二叉搜索树的中序遍历序列\"]},\"93\":{\"h\":\"二叉搜索树的效率\",\"t\":[\"给定一组数据，我们考虑使用数组或二叉搜索树存储。观察下表，二叉搜索树的各项操作的时间复杂度都是对数阶，具有稳定且高效的性能。只有在高频添加、低频查找删除数据的场景下，数组比二叉搜索树的效率更高。\",\"无序数组\",\"二叉搜索树\",\"查找元素\",\"O(n)\",\"O(logn)\",\"插入元素\",\"O(1)\",\"O(logn)\",\"删除元素\",\"O(n)\",\"O(logn)\",\"在理想情况下，二叉搜索树是“平衡”的，这样就可以在 logn 轮循环内查找任意节点。\",\"然而，如果我们在二叉搜索树中不断地插入和删除节点，可能导致二叉树退化为下图所示的链表，这时各种操作的时间复杂度也会退化为 O(n) 。\",\"二叉搜索树退化\"]},\"94\":{\"h\":\"二叉搜索树常见应用\",\"t\":[\"用作系统中的多级索引，实现高效的查找、插入、删除操作。\",\"作为某些搜索算法的底层数据结构。\",\"用于存储数据流，以保持其有序状态。\"]},\"95\":{\"h\":\"AVL 树 *\",\"t\":[\"在“二叉搜索树”章节中我们提到，在多次插入和删除操作后，二叉搜索树可能退化为链表。在这种情况下，所有操作的时间复杂度将从 O(logn) 劣化为 O(n) 。\",\"如下图所示，经过两次删除节点操作，这棵二叉搜索树便会退化为链表。\",\"AVL 树在删除节点后发生退化\",\"再例如，在下图所示的完美二叉树中插入两个节点后，树将严重向左倾斜，查找操作的时间复杂度也随之劣化。\",\"AVL 树在插入节点后发生退化\",\"1962 年 G. M. Adelson-Velsky 和 E. M. Landis 在论文“An algorithm for the organization of information”中提出了 AVL 树。论文中详细描述了一系列操作，确保在持续添加和删除节点后，AVL 树不会退化，从而使得各种操作的时间复杂度保持在 O(logn) 级别。换句话说，在需要频繁进行增删查改操作的场景中，AVL 树能始终保持高效的数据操作性能，具有很好的应用价值。\"]},\"96\":{\"h\":\"AVL 树常见术语\",\"t\":[\"AVL 树既是二叉搜索树，也是平衡二叉树，同时满足这两类二叉树的所有性质，因此是一种平衡二叉搜索树（balanced binary search tree）。\"]},\"97\":{\"h\":\"节点高度\",\"t\":[\"由于 AVL 树的相关操作需要获取节点高度，因此我们需要为节点类添加 height 变量：\",\" /* AVL 树节点类 */ struct TreeNode { int val{}; // 节点值 int height = 0; // 节点高度 TreeNode *left{}; // 左子节点 TreeNode *right{}; // 右子节点 TreeNode() = default; explicit TreeNode(int x) : val(x){} };\",\"“节点高度”是指从该节点到它的最远叶节点的距离，即所经过的“边”的数量。需要特别注意的是，叶节点的高度为 0 ，而空节点的高度为 −1 。我们将创建两个工具函数，分别用于获取和更新节点的高度：\",\" /* 更新节点高度 */ void updateHeight(TreeNode *node) { // 节点高度等于最高子树高度 + 1 node->height = max(height(node->left), height(node->right)) + 1; }\"]},\"98\":{\"h\":\"节点平衡因子\",\"t\":[\"节点的平衡因子（balance factor）定义为节点左子树的高度减去右子树的高度，同时规定空节点的平衡因子为 0 。我们同样将获取节点平衡因子的功能封装成函数，方便后续使用：\",\" /* 获取平衡因子 */ int balanceFactor(TreeNode *node) { // 空节点平衡因子为 0 if (node == nullptr) return 0; // 节点平衡因子 = 左子树高度 - 右子树高度 return height(node->left) - height(node->right); }\",\"相关信息\",\"设平衡因子为 f ，则一棵 AVL 树的任意节点的平衡因子皆满足 −1≤f≤1 。\"]},\"99\":{\"h\":\"AVL 树旋转\",\"t\":[\"AVL 树的特点在于“旋转”操作，它能够在不影响二叉树的中序遍历序列的前提下，使失衡节点重新恢复平衡。换句话说，旋转操作既能保持“二叉搜索树”的性质，也能使树重新变为“平衡二叉树”。\",\"我们将平衡因子绝对值 >1 的节点称为“失衡节点”。根据节点失衡情况的不同，旋转操作分为四种：右旋、左旋、先右旋后左旋、先左旋后右旋。下面详细介绍这些旋转操作。\"]},\"100\":{\"h\":\"右旋\",\"t\":[\"如下图所示，节点下方为平衡因子。从底至顶看，二叉树中首个失衡节点是“节点 3”。我们关注以该失衡节点为根节点的子树，将该节点记为 node ，其左子节点记为 child ，执行“右旋”操作。完成右旋后，子树恢复平衡，并且仍然保持二叉搜索树的性质。\",\"右旋操作步骤\",\"avltree_right_rotate_step2\",\"avltree_right_rotate_step3\",\"avltree_right_rotate_step4\",\"如下图所示，当节点 child 有右子节点（记为 grand_child ）时，需要在右旋中添加一步：将 grand_child 作为 node 的左子节点。\",\"有 grand_child 的右旋操作\",\"“向右旋转”是一种形象化的说法，实际上需要通过修改节点指针来实现，代码如下所示：\",\" /* 右旋操作 */ TreeNode *rightRotate(TreeNode *node) { TreeNode *child = node->left; TreeNode *grandChild = child->right; // 以 child 为原点，将 node 向右旋转 child->right = node; node->left = grandChild; // 更新节点高度 updateHeight(node); updateHeight(child); // 返回旋转后子树的根节点 return child; }\"]},\"101\":{\"h\":\"左旋\",\"t\":[\"相应地，如果考虑上述失衡二叉树的“镜像”，则需要执行下图所示的“左旋”操作。\",\"左旋操作\",\"同理，如下图所示，当节点 child 有左子节点（记为 grand_child ）时，需要在左旋中添加一步：将 grand_child 作为 node 的右子节点。\",\"有 grand_child 的左旋操作\",\"可以观察到，右旋和左旋操作在逻辑上是镜像对称的，它们分别解决的两种失衡情况也是对称的。基于对称性，我们只需将右旋的实现代码中的所有的 left 替换为 right ，将所有的 right 替换为 left ，即可得到左旋的实现代码：\",\" /* 左旋操作 */ TreeNode *leftRotate(TreeNode *node) { TreeNode *child = node->right; TreeNode *grandChild = child->left; // 以 child 为原点，将 node 向左旋转 child->left = node; node->right = grandChild; // 更新节点高度 updateHeight(node); updateHeight(child); // 返回旋转后子树的根节点 return child; }\"]},\"102\":{\"h\":\"先左旋后右旋\",\"t\":[\"对于下图中的失衡节点 3 ，仅使用左旋或右旋都无法使子树恢复平衡。此时需要先对 child 执行“左旋”，再对 node 执行“右旋”。\",\"先左旋后右旋\"]},\"103\":{\"h\":\"先右旋后左旋\",\"t\":[\"如下图所示，对于上述失衡二叉树的镜像情况，需要先对 child 执行“右旋”，再对 node 执行“左旋”。\",\"先右旋后左旋\"]},\"104\":{\"h\":\"旋转的选择\",\"t\":[\"下图展示的四种失衡情况与上述案例逐个对应，分别需要采用右旋、先左旋后右旋、先右旋后左旋、左旋的操作。\",\"AVL 树的四种旋转情况\",\"如下表所示，我们通过判断失衡节点的平衡因子以及较高一侧子节点的平衡因子的正负号，来确定失衡节点属于上图中的哪种情况。\",\"失衡节点的平衡因子\",\"子节点的平衡因子\",\"应采用的旋转方法\",\">1 （左偏树）\",\"≥0\",\"右旋\",\">1 （左偏树）\",\"<0\",\"先左旋后右旋\",\"<−1 （右偏树）\",\"≤0\",\"左旋\",\"<−1 （右偏树）\",\">0\",\"先右旋后左旋\",\"为了便于使用，我们将旋转操作封装成一个函数。有了这个函数，我们就能对各种失衡情况进行旋转，使失衡节点重新恢复平衡。代码如下所示：\",\"/* 执行旋转操作，使该子树重新恢复平衡 */ TreeNode *rotate(TreeNode *node) { // 获取节点 node 的平衡因子 int _balanceFactor = balanceFactor(node); // 左偏树 if (_balanceFactor > 1) { if (balanceFactor(node->left) >= 0) { // 右旋 return rightRotate(node); } else { // 先左旋后右旋 node->left = leftRotate(node->left); return rightRotate(node); } } // 右偏树 if (_balanceFactor < -1) { if (balanceFactor(node->right) <= 0) { // 左旋 return leftRotate(node); } else { // 先右旋后左旋 node->right = rightRotate(node->right); return leftRotate(node); } } // 平衡树，无须旋转，直接返回 return node; }\"]},\"105\":{\"h\":\"AVL 树常用操作\"},\"106\":{\"h\":\"插入节点\",\"t\":[\"AVL 树的节点插入操作与二叉搜索树在主体上类似。唯一的区别在于，在 AVL 树中插入节点后，从该节点到根节点的路径上可能会出现一系列失衡节点。因此，我们需要从这个节点开始，自底向上执行旋转操作，使所有失衡节点恢复平衡。代码如下所示：\",\" /* 递归插入节点（辅助方法） */ TreeNode *insertHelper(TreeNode *node, int val) { if (node == nullptr) return new TreeNode(val); /* 1. 查找插入位置并插入节点 */ if (val < node->val) node->left = insertHelper(node->left, val); else if (val > node->val) node->right = insertHelper(node->right, val); else return node; // 重复节点不插入，直接返回 updateHeight(node); // 更新节点高度 /* 2. 执行旋转操作，使该子树重新恢复平衡 */ node = rotate(node); // 返回子树的根节点 return node; }\"]},\"107\":{\"h\":\"删除节点\",\"t\":[\"类似地，在二叉搜索树的删除节点方法的基础上，需要从底至顶执行旋转操作，使所有失衡节点恢复平衡。代码如下所示：\",\" /* 递归删除节点（辅助方法） */ TreeNode *removeHelper(TreeNode *node, int val) { if (node == nullptr) return nullptr; /* 1. 查找节点并删除 */ if (val < node->val) node->left = removeHelper(node->left, val); else if (val > node->val) node->right = removeHelper(node->right, val); else { if (node->left == nullptr || node->right == nullptr) { TreeNode *child = node->left != nullptr ? node->left : node->right; // 子节点数量 = 0 ，直接删除 node 并返回 if (child == nullptr) { delete node; return nullptr; } // 子节点数量 = 1 ，直接删除 node else { delete node; node = child; } } else { // 子节点数量 = 2 ，则将中序遍历的下个节点删除，并用该节点替换当前节点 TreeNode *temp = node->right; while (temp->left != nullptr) { temp = temp->left; } int tempVal = temp->val; node->right = removeHelper(node->right, temp->val); node->val = tempVal; } } updateHeight(node); // 更新节点高度 /* 2. 执行旋转操作，使该子树重新恢复平衡 */ node = rotate(node); // 返回子树的根节点 return node; }\"]},\"108\":{\"h\":\"查找节点\",\"t\":[\"AVL 树的节点查找操作与二叉搜索树一致，在此不再赘述。\"]},\"109\":{\"h\":\"AVL 树典型应用\",\"t\":[\"组织和存储大型数据，适用于高频查找、低频增删的场景。\",\"用于构建数据库中的索引系统。\",\"红黑树也是一种常见的平衡二叉搜索树。相较于 AVL 树，红黑树的平衡条件更宽松，插入与删除节点所需的旋转操作更少，节点增删操作的平均效率更高。\"]},\"110\":{\"h\":\"重点回顾\",\"t\":[\"二叉树是一种非线性数据结构，体现“一分为二”的分治逻辑。每个二叉树节点包含一个值以及两个指针，分别指向其左子节点和右子节点。\",\"对于二叉树中的某个节点，其左（右）子节点及其以下形成的树被称为该节点的左（右）子树。\",\"二叉树的相关术语包括根节点、叶节点、层、度、边、高度和深度等。\",\"二叉树的初始化、节点插入和节点删除操作与链表操作方法类似。\",\"常见的二叉树类型有完美二叉树、完全二叉树、完满二叉树和平衡二叉树。完美二叉树是最理想的状态，而链表是退化后的最差状态。\",\"二叉树可以用数组表示，方法是将节点值和空位按层序遍历顺序排列，并根据父节点与子节点之间的索引映射关系来实现指针。\",\"二叉树的层序遍历是一种广度优先搜索方法，它体现了“一圈一圈向外扩展”的逐层遍历方式，通常通过队列来实现。\",\"前序、中序、后序遍历皆属于深度优先搜索，它们体现了“先走到尽头，再回溯继续”的遍历方式，通常使用递归来实现。\",\"二叉搜索树是一种高效的元素查找数据结构，其查找、插入和删除操作的时间复杂度均为 O(logn) 。当二叉搜索树退化为链表时，各项时间复杂度会劣化至 O(n) 。\",\"AVL 树，也称平衡二叉搜索树，它通过旋转操作确保在不断插入和删除节点后树仍然保持平衡。\",\"AVL 树的旋转操作包括右旋、左旋、先右旋再左旋、先左旋再右旋。在插入或删除节点后，AVL 树会从底向顶执行旋转操作，使树重新恢复平衡。\"]},\"111\":{\"h\":\"Q & A\",\"t\":[\"Q：对于只有一个节点的二叉树，树的高度和根节点的深度都是 0 吗？\",\"是的，因为高度和深度通常定义为“经过的边的数量”。\",\"Q：二叉树中的插入与删除一般由一套操作配合完成，这里的“一套操作”指什么呢？可以理解为资源的子节点的资源释放吗？\",\"拿二叉搜索树来举例，删除节点操作要分三种情况处理，其中每种情况都需要进行多个步骤的节点操作。\",\"Q：为什么 DFS 遍历二叉树有前、中、后三种顺序，分别有什么用呢？\",\"与顺序和逆序遍历数组类似，前序、中序、后序遍历是三种二叉树遍历方法，我们可以使用它们得到一个特定顺序的遍历结果。例如在二叉搜索树中，由于节点大小满足 左子节点值 < 根节点值 < 右子节点值 ，因此我们只要按照“左 → 根 → 右”的优先级遍历树，就可以获得有序的节点序列。\",\"Q：右旋操作是处理失衡节点 node、child、grand_child 之间的关系，那 node 的父节点和 node 原来的连接不需要维护吗？右旋操作后岂不是断掉了？\",\"我们需要从递归的视角来看这个问题。右旋操作 right_rotate(root) 传入的是子树的根节点，最终 return child 返回旋转之后的子树的根节点。子树的根节点和其父节点的连接是在该函数返回后完成的，不属于右旋操作的维护范围。\",\"Q：在 C++ 中，函数被划分到 private 和 public 中，这方面有什么考量吗？为什么要将 height() 函数和 updateHeight() 函数分别放在 public 和 private 中呢？\",\"主要看方法的使用范围，如果方法只在类内部使用，那么就设计为 private 。例如，用户单独调用 updateHeight() 是没有意义的，它只是插入、删除操作中的一步。而 height() 是访问节点高度，类似于 vector.size() ，因此设置成 public 以便使用。\",\"Q：如何从一组输入数据构建一棵二叉搜索树？根节点的选择是不是很重要？\",\"是的，构建树的方法已在二叉搜索树代码中的 build_tree() 方法中给出。至于根节点的选择，我们通常会将输入数据排序，然后将中点元素作为根节点，再递归地构建左右子树。这样做可以最大程度保证树的平衡性。\",\"Q：在 Java 中，字符串对比是否一定要用 equals() 方法？\",\"在 Java 中，对于基本数据类型，== 用于对比两个变量的值是否相等。对于引用类型，两种符号的工作原理是不同的。\",\"== ：用来比较两个变量是否指向同一个对象，即它们在内存中的位置是否相同。\",\"equals()：用来对比两个对象的值是否相等。\",\"因此，如果要对比值，我们应该使用 equals() 。然而，通过 String a = \\\"hi\\\"; String b = \\\"hi\\\"; 初始化的字符串都存储在字符串常量池中，它们指向同一个对象，因此也可以用 a == b 来比较两个字符串的内容。\",\"Q：广度优先遍历到最底层之前，队列中的节点数量是 2h 吗？\",\"是的，例如高度 h=2 的满二叉树，其节点总数 n=7 ，则底层节点数量 4=2h=(n+1)/2 。\"]},\"112\":{\"c\":[\"数据结构\"]},\"113\":{\"c\":[\"c++\",\"二叉树\"]},\"114\":{\"h\":\"数据结构\"},\"115\":{\"c\":[\"数据结构\"]},\"116\":{\"h\":\"设计模式\"},\"117\":{\"h\":\"设计模式\",\"t\":[\"设计模式是解决反复出现的问题的解决方案, 是关于如何解决某些问题的指导方针.\",\"设计模式是解决常见软件设计问题的通用解决方案。它们分为三大类：\",\"创建型模式：关注对象创建，如单例模式、工厂模式。\",\"结构型模式：关注对象组合，如装饰器模式、桥接模式，组合模式。\",\"行为型模式：关注对象间通信，如观察者模式、策略模式, 责任链模式。\"]},\"118\":{\"h\":\"设计原则\",\"t\":[\"设计原则是指导代码设计的基本准则，如：\",\"单一职责原则 (SRP)\",\"定义: 一个类应只有一个引起其变化的原因，即一个类只负责一项职责。\",\"目的: 提高代码的可维护性和可读性，减少类的复杂性。\",\"开闭原则 (OCP)\",\"定义: 软件实体应对扩展开放，对修改关闭。\",\"目的: 通过抽象和接口，允许添加新功能而无需修改现有代码，减少引入新 bug 的风险。\",\"里氏替换原则 (LSP)\",\"定义: 子类对象必须能够替换其父类对象且行为一致。\",\"目的: 保证继承层次的正确性，避免运行时错误。\",\"依赖倒置原则 (DIP)\",\"定义: 高层模块不应依赖于低层模块，二者都应该依赖于抽象；抽象不应依赖于细节，细节应该依赖于抽象。\",\"目的: 减少模块之间的耦合性，提高系统的灵活性和可扩展性。\",\"接口隔离原则 (ISP)\",\"定义: 不应强迫一个类依赖于它不需要的接口，接口应尽量细化。\",\"目的: 通过多个特定接口来代替单一的总接口，减少代码的复杂性，提高系统的灵活性。\"]},\"119\":{\"h\":\"关于架构设计的一点思考\",\"t\":[\"减少耦合\",\"通过添加抽象接口层，将调用模块与实现模块进行隔离，降低耦合性。调用模块只依赖抽象接口，进行业务逻辑的实现，实现模块基于抽象接口实现具体的底层细节。\",\"单一职责\",\"一个模块只实现其功能的最小集，对外提供尽可能少的接口，接口应尽量细化。\",\"隔离变化/稳定\",\"找出系统中可预计的变化，将其隔离到相同的模块。系统需求变动导致的修改尽可能的不会扩散的稳定的模块。\"]},\"120\":{\"c\":[\"架构设计\"]},\"121\":{\"c\":[\"c++\",\"设计模式\",\"设计原则\"]},\"122\":{\"h\":\"观察者模式\"},\"123\":{\"h\":\"概述\",\"t\":[\"观察者模式（Observer Pattern）是一种行为型设计模式，定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。当主题对象的状态发生变化时，所有依赖于它的观察者对象都会收到通知并自动更新。观察者模式通常用于事件驱动的系统，如GUI事件处理、订阅者发布者模型等。\"]},\"124\":{\"h\":\"结构\",\"t\":[\"观察者模式主要涉及以下几个角色：\",\"主题（Subject）：持有观察者对象的引用，提供注册、移除和通知观察者的方法。当主题状态改变时，会通知所有已注册的观察者。\",\"观察者（Observer）：定义一个接口，用于接收主题的通知。所有具体的观察者类实现该接口，以便接收更新。\",\"具体主题（Concrete Subject）：实现主题接口，维护一个具体的状态。当状态改变时，会通知所有观察者。\",\"具体观察者（Concrete Observer）：实现观察者接口，负责在接收到主题的通知后进行相应的更新操作。\"]},\"125\":{\"h\":\"\",\"t\":[\"​下面以一个文件分割器的实现模拟观察者模式。示例中 GUI 类 MainForm 通过实现IProgress 接口监听文件分割处理的进度。\",\" /* 观察者模式： 用于对象之间的“消息通知” */ #include <iostream> class IProgress { public: virtual void DoProgress(float value) = 0; }; class FileSpliter { public: void splitFile() { for (int i = 0; i < 100; i++) { //.... if (mIProgress) mIProgress->DoProgress((i+1)*100/100); } } void setProgress(IProgress* progress) {mIProgress = progress;} private: IProgress* mIProgress = nullptr; }; class MainForm: public IProgress{ public: void DoProgress(float value) override { std::cout << value << std::endl; } }; int main() { FileSpliter spliter; MainForm form; spliter.setProgress(&form); spliter.splitFile(); }\",\"总结\",\"观察者模式提供了一种将对象之间的依赖关系解耦的方式，使得对象可以独立变化而不影响彼此。\",\"支持广播通信，当主题状态改变时，所有观察者都可以自动接收到通知。\",\"观察者模式非常适用于需要动态更新和通知机制的场景，例如事件系统、消息传递系统等。通过使用观察者模式，可以有效地管理对象之间的依赖关系，并简化代码结构。\"]},\"126\":{\"c\":[\"架构设计\"]},\"127\":{\"c\":[\"c++\",\"设计模式\",\"观察者模式\",\"事件模式\"]},\"128\":{\"h\":\"策略模式\"},\"129\":{\"h\":\"概述\",\"t\":[\"策略模式（Strategy Pattern）是一种行为型设计模式，它定义了一系列算法，并将每个算法封装在独立的策略类中，使得它们可以互相替换。策略模式使得算法的变化不会影响到使用算法的客户类。\"]},\"130\":{\"h\":\"结构\",\"t\":[\"策略接口：定义算法的通用接口。\",\"具体策略类：实现策略接口的不同算法。\",\"上下文类：持有一个策略对象，并在运行时决定使用哪种策略。\"]},\"131\":{\"h\":\"\",\"t\":[\"下面是一个用C++实现的商品计算折扣的策略模式事例。这个示例模拟了不同折扣率下商品价格的计算。\",\"// 策略接口 class DiscountStrategy { public: virtual double calculate(double price) const = 0; virtual ~DiscountStrategy() {} }; // 具体策略 class NoDiscount : public DiscountStrategy { public: double calculate(double price) const override { return price; } }; class SeasonalDiscount : public DiscountStrategy { public: double calculate(double price) const override { return price * 0.9; } }; //other discounts... // 上下文类 class Order { DiscountStrategy* mDiscountStrategy; public: Order(DiscountStrategy* strategy) : mDiscountStrategy(strategy) {} double getFinalPrice(double price) const { return mDiscountStrategy->calculate(price); } void setDiscountStrategy(DiscountStrategy* strategy) { mDiscountStrategy = strategy; } }; int main() { DiscountStrategy* strategy = new NoDiscount(); Order order(strategy); std::cout << order.getFinalPrice(100) << std::endl; delele strategy; strategy = new SeasonalDiscount(); order.setDiscountStrategy(strategy); std::cout << order.getFinalPrice(100) << std::endl; delele strategy; return 0; }\",\"总结\",\"策略模式可以使得算法独立于使用它的客户端而变化。\",\"可以避免使用条件语句来选择不同的算法。\",\"提高了代码的可扩展性，当有新的策略出现时，只需增加一个具体策略类，而不需要修改现有代码。\",\"策略模式适用于需要动态选择或更换算法的场景，可以保持代码的灵活性和可扩展性，避免将多个算法逻辑硬编码到一个类中。\"]},\"132\":{\"c\":[\"架构设计\"]},\"133\":{\"c\":[\"c++\",\"设计模式\",\"策略模式\"]},\"134\":{\"h\":\"装饰器模式\"},\"135\":{\"h\":\"概述\",\"t\":[\"装饰器模式（Decorator Pattern）是一种结构型设计模式，它允许你通过将对象放入包含行为的特殊封装对象中，来为原始对象提供新的行为。这种模式使得我们可以在不改变原始类代码的情况下，动态地添加新的功能。\",\"装饰器模式主要解决的问题是：当系统中出现新的功能需求时，不希望通过修改已有代码或继承来实现，而是希望通过动态组合的方式进行扩展。\"]},\"136\":{\"h\":\"结构\",\"t\":[\"装饰器模式通常涉及以下几个角色：\",\"组件接口（Component）：定义对象的接口，可以是抽象类或接口。\",\"具体组件（Concrete Component）：实现组件接口的具体类。\",\"装饰器类（Decorator）：实现组件接口，并持有一个组件对象的引用。这个类是装饰器模式的核心，通过在方法中调用组件对象的方法，实现功能的叠加。\",\"具体装饰器（Concrete Decorator）：继承装饰器类，具体实现要添加的功能。\"]},\"137\":{\"h\":\"\",\"t\":[\"#include <iostream> #include <string> /* 装饰器模式： 解决的问题： 在基础类上存在多维度功能的扩展，其中某个维度的扩展是可以叠加的，通过继承的方式会导致子类的‘组合爆炸’ */ class Stream { public: virtual std::string read() = 0; }; class FileStream: public Stream { public: std::string read() override { std::cout << \\\"FileStream::read\\\" << std::endl; return \\\"\\\"; } }; class NetworkStream: public Stream { public: std::string read() override { std::cout << \\\"NetworkStream::read\\\" << std::endl; return \\\"\\\"; } }; class MemoryStream: public Stream { public: std::string read() { std::cout << \\\"MemoryStream::read\\\" << std::endl; return \\\"\\\"; } }; class BufferedStream: public Stream { public: BufferedStream(Stream* s): mSteam(s) {} virtual std::string read() override { //..buffer return DoBuffer(mSteam->read()); } private: std::string DoBuffer(const std::string&) { std::cout << \\\"DoBuffer\\\" << std::endl; return \\\"\\\"; } private: Stream* mSteam = nullptr; }; class CryptoStream: public Stream { public: CryptoStream(Stream* s): mSteam(s) {} virtual std::string read() { //..Crypto return DoCrypto(mSteam->read()); } private: std::string DoCrypto(const std::string&) { std::cout << \\\"DoCrypto\\\" << std::endl; return \\\"\\\"; } private: Stream* mSteam = nullptr; }; int main() { FileStream* fs = new FileStream(); //缓冲文件流 BufferedStream* bfs = new BufferedStream(fs); bfs->read(); //加密文件流 CryptoStream* cfs = new CryptoStream(fs); cfs->read(); //加密+缓冲 文件流 CryptoStream* cbfs = new CryptoStream(bfs); cbfs->read(); }\",\"总结\",\"动态扩展对象的功能，灵活性高。\",\"避免了使用继承，减少类的数量。\",\"装饰器模式在需要动态添加功能的场景中非常有用，可以保持代码的开放封闭原则（对扩展开放，对修改封闭），使得系统更容易维护和扩展。\"]},\"138\":{\"c\":[\"架构设计\"]},\"139\":{\"c\":[\"c++\",\"设计模式\",\"装饰器模式\"]},\"140\":{\"h\":\"桥接模式\"},\"141\":{\"h\":\"概述\",\"t\":[\"桥接模式（Bridge Pattern）是一种结构型设计模式，它的主要目的是将抽象部分与实现部分分离，使它们可以独立地变化。桥接模式通过将类的功能层次与实现层次分离，使得系统更具扩展性和灵活性。\"]},\"142\":{\"h\":\"结构\",\"t\":[\"桥接模式涉及以下几个角色：\",\"抽象类（Abstraction）：定义了抽象的接口，通常包含一个实现部分的引用（实现类接口类型）。\",\"扩展抽象类（Refined Abstraction）：继承自抽象类，通常是具体的业务逻辑类，调用实现部分的功能。\",\"实现类接口（Implementor）：定义实现类的接口，但不提供具体实现。实现类接口与抽象类没有继承关系。\",\"具体实现类（Concrete Implementor）：实现实现类接口，提供具体的实现逻辑。\"]},\"143\":{\"h\":\"\",\"t\":[\"#include <iostream> #include <memory> class Color { public: virtual void applyColor() const = 0; virtual ~Color() = default; }; class RedColor : public Color { public: void applyColor() const override { std::cout << \\\"Applying red color.\\\" << std::endl; } }; class BlueColor : public Color { public: void applyColor() const override { std::cout << \\\"Applying blue color.\\\" << std::endl; } }; class Shape { protected: std::shared_ptr<Color> color; public: Shape(std::shared_ptr<Color> c) : color(std::move(c)) {} virtual void draw() const = 0; virtual ~Shape() = default; }; class Circle : public Shape { public: Circle(std::shared_ptr<Color> c) : Shape(std::move(c)) {} void draw() const override { std::cout << \\\"Drawing a circle. \\\"; color->applyColor(); } }; class Square : public Shape { public: Square(std::shared_ptr<Color> c) : Shape(std::move(c)) {} void draw() const override { std::cout << \\\"Drawing a square. \\\"; color->applyColor(); } }; int main() { // 颜色n * 形状m 种组合 std::shared_ptr<Color> red = std::make_shared<RedColor>(); std::shared_ptr<Color> blue = std::make_shared<BlueColor>(); std::shared_ptr<Shape> redCircle = std::make_shared<Circle>(red); std::shared_ptr<Shape> blueSquare = std::make_shared<Square>(blue); redCircle->draw(); blueSquare->draw(); return 0; }\",\"总结\",\"解耦抽象与实现：通过桥接模式，可以独立地扩展抽象类和实现类，而不会相互影响。\",\"提高系统扩展性：可以很容易地增加新的形状或颜色，实现类和抽象类之间可以自由组合。\",\"桥接模式非常适合在一个类有多个维度的变化，并且需要将这些维度解耦的场景中使用。通过这种模式，可以保持系统的灵活性，同时避免类爆炸问题。\"]},\"144\":{\"c\":[\"架构设计\"]},\"145\":{\"c\":[\"c++\",\"设计模式\",\"桥接模式\"]},\"146\":{\"h\":\"工厂模式\"},\"147\":{\"h\":\"概述\",\"t\":[\"工厂模式和抽象工厂模式都是创建型设计模式，旨在为客户端提供对象的创建方式，而不需要指定创建的具体类。它们的主要区别在于工厂模式适用于创建单一产品，而抽象工厂模式适用于创建相关产品的家族。\"]},\"148\":{\"h\":\"工厂模式\",\"t\":[\"工厂模式提供了一种创建对象的方式，具体的创建逻辑被封装在工厂类中，客户端通过调用工厂的方法来获取对象，而无需了解具体的创建过程。\"]},\"149\":{\"h\":\"结构\",\"t\":[\"产品接口（Product）：定义了工厂所要创建的对象的接口或抽象类。\",\"具体产品（Concrete Product）：实现产品接口的具体类。\",\"工厂接口（Creator）：定义创建产品的方法。\",\"具体工厂（Concrete Creator）：实现工厂接口，负责具体产品的实例化。\"]},\"150\":{\"h\":\"示例\",\"t\":[\"假设我们有一个交通工具的工厂，可以生产汽车和自行车。\",\"#include <iostream> #include <memory> class Vehicle { public: virtual void drive() const = 0; virtual ~Vehicle() = default; }; class Car : public Vehicle { public: void drive() const override { std::cout << \\\"Driving a car.\\\" << std::endl; } }; class Bike : public Vehicle { public: void drive() const override { std::cout << \\\"Riding a bike.\\\" << std::endl; } }; class VehicleFactory { public: virtual std::shared_ptr<Vehicle> createVehicle() const = 0; virtual ~VehicleFactory() = default; }; class CarFactory : public VehicleFactory { public: std::shared_ptr<Vehicle> createVehicle() const override { return std::make_shared<Car>(); } }; class BikeFactory : public VehicleFactory { public: std::shared_ptr<Vehicle> createVehicle() const override { return std::make_shared<Bike>(); } }; int main() { std::shared_ptr<VehicleFactory> carFactory = std::make_shared<CarFactory>(); std::shared_ptr<VehicleFactory> bikeFactory = std::make_shared<BikeFactory>(); std::shared_ptr<Vehicle> car = carFactory->createVehicle(); std::shared_ptr<Vehicle> bike = bikeFactory->createVehicle(); car->drive(); bike->drive(); return 0; }\"]},\"151\":{\"h\":\"抽象工厂模式\",\"t\":[\"抽象工厂模式提供了一种创建一系列相关或相互依赖对象的接口，而无需指定它们的具体类。抽象工厂模式通常用于创建不同产品族的对象。\"]},\"152\":{\"h\":\"结构\",\"t\":[\"抽象产品（Abstract Product）：定义产品家族中的各个产品的接口。\",\"具体产品（Concrete Product）：实现具体的产品类。\",\"抽象工厂（Abstract Factory）：定义创建产品族中各产品的接口。\",\"具体工厂（Concrete Factory）：实现创建具体产品族的方法。\"]},\"153\":{\"h\":\"示例\",\"t\":[\"假设我们有一个操作系统的工厂，可以生产不同操作系统环境下的按钮和文本框。\",\"class Button { public: virtual void click() const = 0; virtual ~Button() = default; }; class TextBox { public: virtual void type() const = 0; virtual ~TextBox() = default; }; class WindowsButton : public Button { public: void click() const override { std::cout << \\\"Windows Button clicked.\\\" << std::endl; } }; class WindowsTextBox : public TextBox { public: void type() const override { std::cout << \\\"Typing in Windows TextBox.\\\" << std::endl; } }; class MacOSButton : public Button { public: void click() const override { std::cout << \\\"MacOS Button clicked.\\\" << std::endl; } }; class MacOSTextBox : public TextBox { public: void type() const override { std::cout << \\\"Typing in MacOS TextBox.\\\" << std::endl; } }; class GUIFactory { public: virtual std::shared_ptr<Button> createButton() const = 0; virtual std::shared_ptr<TextBox> createTextBox() const = 0; virtual ~GUIFactory() = default; }; class WindowsFactory : public GUIFactory { public: std::shared_ptr<Button> createButton() const override { return std::make_shared<WindowsButton>(); } std::shared_ptr<TextBox> createTextBox() const override { return std::make_shared<WindowsTextBox>(); } }; class MacOSFactory : public GUIFactory { public: std::shared_ptr<Button> createButton() const override { return std::make_shared<MacOSButton>(); } std::shared_ptr<TextBox> createTextBox() const override { return std::make_shared<MacOSTextBox>(); } }; int main() { std::shared_ptr<GUIFactory> factory; // 使用Windows工厂创建产品 factory = std::make_shared<WindowsFactory>(); std::shared_ptr<Button> winButton = factory->createButton(); std::shared_ptr<TextBox> winTextBox = factory->createTextBox(); winButton->click(); winTextBox->type(); // 使用MacOS工厂创建产品 factory = std::make_shared<MacOSFactory>(); std::shared_ptr<Button> macButton = factory->createButton(); std::shared_ptr<TextBox> macTextBox = factory->createTextBox(); macButton->click(); macTextBox->type(); return 0; }\",\"总结\",\"工厂模式：用于创建单一类型的对象，将对象的实例化过程封装在工厂类中，减少客户端与具体类的耦合。\",\"抽象工厂模式：用于创建一系列相关或相互依赖的对象，通过定义一组工厂接口，客户端可以使用这些接口创建具体的产品对象，适用于需要创建多个产品族的场景。\",\"这两种模式都可以提高代码的灵活性和可维护性，特别是在需要扩展产品种类或改变产品族的实现时，非常有用。\"]},\"154\":{\"c\":[\"架构设计\"]},\"155\":{\"c\":[\"c++\",\"设计模式\",\"工厂模式\",\"抽象工厂模式\"]},\"156\":{\"h\":\"责任链模式\"},\"157\":{\"h\":\"概述\",\"t\":[\"责任链模式（Chain of Responsibility Pattern）是一种行为设计模式，它允许多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合。该模式将这些对象连成一条链，并沿着这条链传递请求，直到有对象处理它为止。\"]},\"158\":{\"h\":\"结构\",\"t\":[\"责任链模式的核心思想是将请求沿着一条链传递，每个链上的对象都有机会处理请求。如果当前对象无法处理该请求，则将其传递给下一个对象，直到找到能够处理请求的对象。\",\"这个模式主要包括以下几个部分：\",\"处理者（Handler）：接口或抽象类，定义了处理请求的抽象方法，同时维护一个指向下一个处理者的引用。\",\"具体处理者（Concrete Handler）：实现了处理者接口，负责处理具体的请求。\",\"请求：需要沿着责任链传递的请求。\"]},\"159\":{\"h\":\"\",\"t\":[\"下面是一个用 C++ 实现的请假流程处理的责任链模式示例。这个示例模拟了请假请求根据天数由不同级别的领导审批的场景。\",\"#include <iostream> #include <memory> // 抽象处理者类 class LeaveHandler { protected: std::shared_ptr<LeaveHandler> nextHandler; public: // 设置下一个处理者 void setNextHandler(std::shared_ptr<LeaveHandler> handler) { nextHandler = handler; } // 处理请假请求的虚函数 virtual bool handleRequest(int days) = 0; }; // Team Leader 处理类 class TeamLeaderHandler : public LeaveHandler { public: bool handleRequest(int days) override { if (days <= 3) { std::cout << \\\"Team Leader approved \\\" << days << \\\" days leave.\\\" << std::endl; return true; } else if (nextHandler != nullptr) { return nextHandler->handleRequest(days); } else { return false; } } }; // Manager 处理类 class ManagerHandler : public LeaveHandler { public: bool handleRequest(int days) override { if (days > 3 && days <= 7) { std::cout << \\\"Manager approved \\\" << days << \\\" days leave.\\\" << std::endl; return true; } else if (nextHandler != nullptr) { nextHandler->handleRequest(days); } else { return false; } } }; // Director 处理类 class DirectorHandler : public LeaveHandler { public: bool handleRequest(int days) override { if (days > 7) { std::cout << \\\"Director approved \\\" << days << \\\" days leave.\\\" << std::endl; return true; } else if (nextHandler != nullptr) { nextHandler->handleRequest(days); } else { return false; } } }; int main() { // 创建处理者对象 std::shared_ptr<LeaveHandler> teamLeader = std::make_shared<TeamLeaderHandler>(); std::shared_ptr<LeaveHandler> manager = std::make_shared<ManagerHandler>(); std::shared_ptr<LeaveHandler> director = std::make_shared<DirectorHandler>(); // 设置责任链 teamLeader->setNextHandler(manager); manager->setNextHandler(director); // 发送不同天数的请假请求 int leaveDays1 = 2; // 由 Team Leader 处理 int leaveDays2 = 5; // 由 Manager 处理 int leaveDays3 = 10; // 由 Director 处理 teamLeader->handleRequest(leaveDays1); teamLeader->handleRequest(leaveDays2); teamLeader->handleRequest(leaveDays3); return 0; }\",\"运行上述代码后，输出结果如下：\",\"Team Leader approved 2 days leave. Manager approved 5 days leave. Director approved 10 days leave.\"]},\"160\":{\"h\":\"应用场景\",\"t\":[\"请求处理链：例如在 Web 服务器中，处理请求的各个过滤器（Filter）构成了一条责任链，每个过滤器负责处理特定类型的请求。\",\"事件处理系统：在图形用户界面（GUI）中，事件处理链可以使用责任链模式，将事件沿着组件树传递，直到某个组件处理该事件。\",\"日志处理：在日志框架中，多个日志处理器（如控制台日志、文件日志、远程日志等）可以组成责任链，依次处理日志信息。\",\"总结\",\"责任链模式通过将请求沿着一条链传递，实现了请求的解耦处理。它使得请求的发送者和接收者之间不再紧耦合，增强了系统的灵活性和可扩展性。在某些需要链式处理请求的场景中，责任链模式非常有用，但也需要注意链条过长带来的性能问题。\"]},\"161\":{\"c\":[\"架构设计\"]},\"162\":{\"c\":[\"c++\",\"设计模式\",\"责任链模式\"]},\"163\":{\"h\":\"MVVM 模式\",\"t\":[\"MVVM（Model-View-ViewModel）是一种常用于前端开发中的架构模式，它将用户界面逻辑和业务逻辑进行分离，从而使代码更具可维护性和可测试性。MVVM 模式是由微软架构师 John Gossman 于 2005 年提出的，最初用于 WPF（Windows Presentation Foundation） 和 Silverlight 中，现已广泛应用于各种前端框架和工具，如 Vue.js、Angular、React+Redux 等。\"]},\"164\":{\"h\":\"MVVM 的核心概念\",\"t\":[\"MVVM 模式由三部分组成：\",\"Model（模型）\",\"View（视图）\",\"ViewModel（视图模型）\",\"这三部分通过数据绑定（Data Binding）机制相互通信，实现界面和数据的自动同步。下面是各个部分的详细解释：\"]},\"165\":{\"h\":\"1. Model（模型）\",\"t\":[\"Model 代表应用程序的数据和业务逻辑，通常是纯粹的 JavaScript 对象、类或者数据结构。它负责处理与业务逻辑相关的所有操作，如数据的获取、保存和更新等。\",\"职责： \",\"管理应用程序的核心数据。\",\"处理业务逻辑，如增删改查等。\",\"与服务层（如 API）交互，获取或更新数据。\"]},\"166\":{\"h\":\"2. View（视图）\",\"t\":[\"View 是用户界面（UI）的展现层，负责将 ViewModel 中的数据展示给用户。它通常由 HTML、CSS 等构建而成，负责呈现数据和处理用户的输入（如按钮点击、表单提交等）。\",\"职责： \",\"负责界面的展示。\",\"捕捉用户输入，并将其传递给 ViewModel。\",\"数据绑定机制确保视图能够实时反映 ViewModel 的变化。\"]},\"167\":{\"h\":\"3. ViewModel（视图模型）\",\"t\":[\"ViewModel 作为 View 和 Model 之间的桥梁，负责处理界面显示逻辑。它从 Model 中获取数据并提供给 View，还处理用户的输入，并将其传递给 Model。ViewModel 不直接操作 View，而是通过数据绑定和命令机制进行交互。\",\"职责： \",\"提供 View 所需的数据。\",\"响应 View 的用户操作，并将操作传递给 Model。\",\"实现双向数据绑定，使得 View 和 Model 之间保持同步。\"]},\"168\":{\"h\":\"MVVM 的工作原理\",\"t\":[\"MVVM 的工作原理是通过数据绑定实现视图和模型的同步。视图层（View）直接绑定到 ViewModel 中的属性，这样当 ViewModel 中的数据发生变化时，视图会自动更新。同时，视图的用户输入会通过绑定机制传递给 ViewModel，ViewModel 再更新 Model。\",\"单向绑定：ViewModel 到 View 的数据流动。当 ViewModel 中的数据发生变化时，View 自动更新。\",\"双向绑定：View 到 ViewModel 的数据流动也同步。例如，用户在表单中输入数据时，ViewModel 会自动更新。\"]},\"169\":{\"h\":\"MVVM 与 MVC、MVP 的对比\",\"t\":[\"MVC（Model-View-Controller）：MVC 中，控制器（Controller）负责响应用户交互并更新模型（Model）。视图（View）观察模型，并根据模型的变化进行更新。MVC 的控制器承担了较多的业务逻辑处理工作。\",\"MVP（Model-View-Presenter）：MVP 中，Presenter 是负责视图与模型之间通信的中介，View 不直接依赖 Model。Presenter 包含了 UI 逻辑和交互逻辑，处理用户事件，并与 Model 交互。\",\"MVVM：MVVM 的核心是 ViewModel，它将 Model 和 View 进行解耦。View 和 ViewModel 通过数据绑定机制进行通信，View 只关注界面展示，ViewModel 负责处理逻辑。\",\"对比总结：\",\"解耦程度：MVVM 提高了 View 和 Model 的解耦程度，尤其在数据绑定方面更为自动化和灵活。\",\"代码维护：由于 ViewModel 仅处理与 UI 逻辑相关的部分，Model 专注于业务逻辑，这使得 MVVM 在代码的分离和维护性方面优于 MVC 和 MVP。\",\"适用场景：MVVM 更适合需要复杂数据绑定和动态 UI 更新的应用，特别是在现代前端框架（如 Vue、Angular）中应用广泛。\"]},\"170\":{\"h\":\"MVVM 的优缺点\"},\"171\":{\"h\":\"优点：\",\"t\":[\"解耦性好：View 和 Model 之间没有直接的依赖关系，二者通过 ViewModel 进行沟通，代码更具模块化。\",\"可测试性强：由于 ViewModel 独立于 View，业务逻辑和数据处理部分可以通过单元测试进行验证，而不依赖于实际的 UI。\",\"数据绑定机制：数据绑定使得 View 和 ViewModel 之间的同步更加方便，减少了手动操作 DOM 的代码。\"]},\"172\":{\"h\":\"缺点：\",\"t\":[\"学习成本高：对于初学者来说，理解 MVVM 的数据绑定和通信机制可能有一定的难度。\",\"性能问题：在复杂的场景下，大量的数据绑定可能会引起性能问题，尤其是在数据变更频繁的情况下。\",\"调试难度增加：由于数据绑定是自动化的，可能导致调试过程变得更加复杂，不易跟踪数据的流动。\"]},\"173\":{\"h\":\"MVVM 应用示例：使用 Vue.js\",\"t\":[\"Vue.js 是一种典型的 MVVM 框架，下面展示了一个简单的 Vue.js 示例，展示 MVVM 的工作原理。\",\"<div id=\\\"app\\\"> <input v-model=\\\"name\\\" placeholder=\\\"Enter your name\\\"> <p>Hello, {{ name }}!</p> </div> <script src=\\\"https://cdn.jsdelivr.net/npm/vue@2\\\"></script> <script> new Vue({ el: '#app', data: { name: '' } }); </script>\",\"在这个示例中：\",\"Model：data 对象中存储的 name 字段。\",\"View：HTML 模板中展示数据的部分，如 input 和 p 标签。\",\"ViewModel：Vue 实例管理的数据和行为，负责与 View 的数据绑定和交互。\",\"当用户在输入框中输入数据时，v-model 会自动更新 data 中的 name，并且由于数据绑定，{{ name }} 会同步更新到页面上。\"]},\"174\":{\"h\":\"总结\",\"t\":[\"MVVM 模式通过数据绑定机制，将 View 和 Model 进行解耦，使得前端开发中的数据管理和 UI 渲染变得更加高效。它非常适合需要频繁更新 UI 的应用，尤其在现代前端开发框架中广泛应用。虽然 MVVM 提供了很好的解耦性和可维护性，但也带来了性能和调试方面的挑战，因此在应用时需要根据具体情况权衡。\"]},\"175\":{\"c\":[\"架构设计\"]},\"176\":{\"c\":[\"设计模式\",\"MVVM\"]},\"177\":{\"h\":\"Model-View 框架\",\"t\":[\"Qt 的 Model-View 框架是一种用于处理和显示数据的灵活机制，特别适合需要在用户界面中展示大量或复杂数据的应用程序。通过将数据和显示逻辑解耦，Model-View 框架提供了更高的灵活性和可维护性。Qt 的 Model-View 框架包含三个主要组件：Model（模型）、View（视图）和 Delegate（委托）。\"]},\"178\":{\"h\":\"Model-View 框架的核心概念\"},\"179\":{\"h\":\"Model（模型）\",\"t\":[\"Model 是数据的抽象表示，负责存储和管理数据，并向 View 提供访问这些数据的接口。Model 不直接与 UI 打交道，而是通过信号和槽机制通知 View 数据的变化。Qt 提供了几个现成的模型类，如 QStandardItemModel 和 QStringListModel，开发者也可以通过继承 QAbstractItemModel、QAbstractTableModel 或 QAbstractListModel 来自定义模型。\",\"Model 的主要职责：\",\"管理数据：模型负责存储和管理数据，包括对数据的增删改查操作。\",\"提供接口：模型通过标准化的接口提供数据给 View。\",\"通知数据变更：模型会在数据发生变化时发出信号，通知 View 更新显示。\",\"Qt 中常用的 Model 类：\",\"QAbstractItemModel：所有自定义模型的基类，适合树状结构数据。\",\"QAbstractListModel：用于一维列表数据的基类。\",\"QAbstractTableModel：用于二维表格数据的基类。\",\"QStandardItemModel：提供标准的项目模型，实现了表格和树状结构的支持。\",\"示例：使用 QStandardItemModel 来存储和操作数据。\",\"QStandardItemModel *model = new QStandardItemModel(); model->setHorizontalHeaderLabels({\\\"Name\\\", \\\"Age\\\"}); QStandardItem *item1 = new QStandardItem(\\\"John\\\"); QStandardItem *item2 = new QStandardItem(\\\"25\\\"); model->appendRow({item1, item2});\"]},\"180\":{\"h\":\"View（视图）\",\"t\":[\"View 负责展示数据，是用户与数据进行交互的界面部分。View 通过访问 Model 提供的数据，并将这些数据渲染到屏幕上。常用的视图类包括 QListView、QTableView 和 QTreeView，它们分别用于显示列表、表格和树形数据。\",\"View 的主要职责：\",\"显示数据：View 从 Model 中获取数据并进行显示。\",\"用户交互：View 处理用户的输入，如点击、编辑等。\",\"数据同步：View 会自动更新显示，确保与 Model 数据保持一致。\",\"Qt 中常用的 View 类：\",\"QListView：用于显示列表数据。\",\"QTableView：用于显示表格数据。\",\"QTreeView：用于显示树形结构数据。\",\"示例：使用 QTableView 显示 QStandardItemModel 的数据。\",\"QTableView *view = new QTableView(); view->setModel(model); view->show();\"]},\"181\":{\"h\":\"Delegate（委托）\",\"t\":[\"Delegate 是 View 和 Model 之间的中介，用于定制数据的显示和编辑。通过委托，开发者可以控制单元格的外观和编辑方式。Qt 默认的委托类是 QStyledItemDelegate，你可以继承这个类来自定义数据的显示和编辑行为。\",\"Delegate 的主要职责：\",\"渲染数据：委托负责将 Model 中的数据渲染为可视化的控件或元素。\",\"编辑数据：委托还负责处理数据的编辑，提供自定义的编辑控件和逻辑。\",\"示例：自定义委托，通过 QStyledItemDelegate 渲染数据。\",\"class CustomDelegate : public QStyledItemDelegate { Q_OBJECT public: CustomDelegate(QObject *parent = nullptr) : QStyledItemDelegate(parent) {} void paint(QPainter *painter, const QStyleOptionViewItem &option, const QModelIndex &index) const override { painter->save(); // 自定义绘制逻辑 painter->drawText(option.rect, Qt::AlignCenter, index.data().toString()); painter->restore(); } }; // 在视图中使用自定义委托 view->setItemDelegate(new CustomDelegate());\"]},\"182\":{\"h\":\"Model-View 的数据流\",\"t\":[\"Model-View 模式的关键在于数据与 UI 的分离，数据流的方向如下：\",\"View 获取数据：View 通过 setModel() 设置模型，并通过模型的标准接口（如 data()、rowCount()、columnCount()）获取数据并显示在界面上。\",\"用户交互：用户在 View 中进行操作（如点击、编辑），这些操作会通过委托发送到 Model，Model 根据操作更新数据。\",\"Model 通知 View：当 Model 数据发生变化时，Model 通过信号通知 View，View 自动刷新显示。\"]},\"183\":{\"h\":\"数据绑定与更新\",\"t\":[\"在 Qt 的 Model-View 模式中，数据更新主要依赖于信号与槽机制。Model 通过 dataChanged() 等信号通知 View 数据已更改，View 会根据这些信号自动更新显示内容。常用的更新信号包括：\",\"dataChanged()：当模型中的某个数据项发生变化时发出。\",\"layoutChanged()：当模型的布局发生变化时发出，例如排序、筛选等操作。\",\"rowsInserted()、rowsRemoved()：当插入或删除行时发出。\"]},\"184\":{\"h\":\"Qt 中的 Model-View 与 MVC\",\"t\":[\"Qt 的 Model-View 框架类似于传统的 MVC（Model-View-Controller）模式，但它没有显式的 Controller。Qt 的设计将 Controller 的职责分散到 View 和 Delegate 中：\",\"View：负责展示数据，并处理用户交互。\",\"Delegate：负责处理数据的呈现和编辑。\",\"通过这种设计，Qt 的 Model-View 框架能够更加灵活地支持各种数据展示场景，开发者可以更自由地定制数据的显示和交互行为。\"]},\"185\":{\"h\":\"自定义模型\",\"t\":[\"虽然 Qt 提供了多种现成的模型类，但在实际应用中，经常需要创建自定义模型，以适应复杂的数据结构和特定的业务需求。自定义模型需要继承 QAbstractItemModel、QAbstractTableModel 或 QAbstractListModel，并实现相关的接口方法。\",\"常见需要实现的方法：\",\"rowCount()：返回模型的行数。\",\"columnCount()：返回模型的列数。\",\"data()：返回指定索引处的数据。\",\"setData()：用于修改指定索引处的数据。\",\"headerData()：返回模型的表头数据。\",\"示例：自定义一个简单的表格模型。\",\"class CustomTableModel : public QAbstractTableModel { Q_OBJECT public: CustomTableModel(QObject *parent = nullptr) : QAbstractTableModel(parent) {} int rowCount(const QModelIndex &parent = QModelIndex()) const override { return 5; // 5 行 } int columnCount(const QModelIndex &parent = QModelIndex()) const override { return 3; // 3 列 } QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const override { if (role == Qt::DisplayRole) { return QString(\\\"Row%1, Column%2\\\").arg(index.row()).arg(index.column()); } return QVariant(); } };\"]},\"186\":{\"h\":\"代理模型\",\"t\":[\"Qt 提供了一些代理模型（Proxy Model）来对原始模型的数据进行转换或过滤。常用的代理模型有：\",\"QSortFilterProxyModel：用于对数据进行排序和过滤。\",\"QIdentityProxyModel：直接映射原始模型，适合做数据的装饰或修改。\",\"使用代理模型可以在不修改原始模型的情况下，对数据进行排序、过滤或其他转换操作。\",\"示例：使用 QSortFilterProxyModel 进行排序。\",\"QSortFilterProxyModel *proxyModel = new QSortFilterProxyModel(); proxyModel->setSourceModel(model); proxyModel->sort(0, Qt::AscendingOrder); // 对第 0 列进行升序排序 view->setModel(proxyModel);\",\"总结\",\"Qt 的 Model-View 框架通过将数据和显示逻辑解耦，提供了更高的灵活性和可维护性。无论是使用现成的模型类，还是通过自定义模型，开发者都能够以更清晰的方式管理复杂的数据展示和用户交互。通过委托机制，Qt 允许开发者定制数据的显示和编辑，使得 UI 的表现力更强。而代理模型则进一步扩展了数据处理的能力，使得数据的排序、过滤等操作更加方便。\"]},\"187\":{\"c\":[\"架构设计\"]},\"188\":{\"c\":[\"设计模式\",\"Model-View\",\"Qt\"]},\"189\":{\"h\":\"架构设计\"},\"190\":{\"c\":[\"架构设计\"]},\"191\":{\"h\":\"书籍推荐\"},\"192\":{\"c\":[\"书籍\"]},\"193\":{\"h\":\"c++ 书籍推荐\",\"t\":[\"推荐几本C++书籍，从入门，到进阶，到实战，一网打尽。\"]},\"194\":{\"h\":\"入门推荐\",\"t\":[\"C++ Primer\",\"前些年这本书可以说是C++入门必备，C++基础知识介绍的非常全面，缺点也很明显。。。就是是书太厚了-_-||\",\"C++20高级编程\",\"C++基础、C++进阶、C++20各种新特性、C++实战经验，本书都有涉及，内容丰富且有条理有深度，唯一的缺点，就是有点厚。\"]},\"195\":{\"h\":\"进阶推荐\",\"t\":[\"C++程序设计 进阶篇\",\"C++之父大作，关于C++，应该没谁比C++之父更有发言权吧，不过这本书我更推荐有一定基础，想提升C++达到进阶水平的朋友学习。\",\"Effective Modern C++\",\"本书介绍的多是C++11的新特性，如果C++98的朋友想进阶到C++11，推荐学习这本书。\",\"C++ Core Guidelines解析\",\"它的前身C++之父的很多心得经验的博客，英文不错的朋友可以直接看原文，国内有大佬把它翻译成了中文书籍，内容质量很高，推荐阅读。\",\"深入理解计算机系统\",\"C++不能只学习语言本身，还需要对操作系统有深刻的理解，操作系统我只推荐这一本书。\"]},\"196\":{\"c\":[\"c++\",\"book\"]},\"197\":{\"h\":\"c++ 基础\"},\"198\":{\"h\":\"1. static 关键字的作用？\",\"t\":[\"修饰全局变量或函数，限制作用范围，只可以在当前文件访问；\",\"修饰局部变量，延长变量的生命周期为整个程序的生命周期，函数return 后变量不会释放；\",\"在class中用于声明类成员或函数，类成员或函数可以直接通过类名访问无需创建对象；\"]},\"199\":{\"h\":\"2. new/delete与malloc/new的区别？\",\"t\":[\"malloc/new 是c语言标准库提供的一组用于动态申请释放内存的API；\",\"new/delete是c++语言标准库提供的一组用于动态创建/释放对象的操作符，在申请/释放内存的基础上还会额外调用构造/析构函数，是c++ RAII 实现的基础；\",\"new = malloc + 构造函数，delete = 析构函数 + free；\"]},\"200\":{\"h\":\"3. 假设有数组 int a[10], a、&a[0]与 &a 这3者的区别？\",\"t\":[\"a、&a[0]与 &a 都是一个指针代表一个内存，且值相同；\",\"其中a 为数组名指向首元素地址即与&a[0] 相同，&a 为数组的指针，三者做运算时有差异： a+1 和 &a[0]+1 是内存地址偏移一个元素的位置(地址值+sizeof(int))，即指向第二个元素a[1], &a+1, 内存地址偏移一个数组的位置(地址值+sizeof(int)*10)\"]},\"201\":{\"h\":\"4. 宏与constexpr 区别?\",\"t\":[\"宏用于定义常量和简单的代码片段，在预编译时期会被完整替换；\",\"constexpr 可以取代宏的功能，用来定义常量和函数；\",\"宏没有类型安全检查，而constexpr有\"]},\"202\":{\"h\":\"5. extern \\\"C\\\"\",\"t\":[\"c++ 为支持函数重载引入了name mangling 技术，将重载函数重新命名成唯一的标识符，如void foo(int) 函数名被修饰成_ZfooEi, 这样 c 代码link foo 函数时会失败；\",\"extern \\\"C\\\" 让c++ 代码编译时不使用name mangling，保持与c 语言一样的方式， 这样就可以解决c代码调用c++ 代码的存在的link 问题\"]},\"203\":{\"h\":\"6. const 关键字的作用？\",\"t\":[\"定义常量，即被修饰变量不可以被修改；\",\"const& 用于函数穿参数\",\"修饰成员函数表示函数体不会修改类成员（被mutable 修饰除外）\"]},\"204\":{\"h\":\"继承与多态\"},\"205\":{\"h\":\"C++的多态如何实现\",\"t\":[\"C++的多态性，一言以蔽之就是：\",\"在基类的函数前加上virtual关键字，在派生类中重写该函数，运行时将会根据所指对象的实际类型来调用相应的函数，如果对象类型是派生类，就调用派生类的函数，如果对象类型是基类，就调用基类的函数。\",\"举个例子：\",\"#include <iostream> using namespace std; class Base{ public: virtual void fun(){ cout << \\\" Base::func()\\\" <<endl; } }; class Son1 : public Base{ public: virtual void fun() override{ cout << \\\" Son1::func()\\\" <<endl; } }; class Son2 : public Base{ }; int main() { Base* base = new Son1; base->fun(); base = new Son2; base->fun(); delete base; base = NULL; return 0; } // 运行结果 // Son1::func() // Base::func()\",\"例子中，Base为基类，其中的函数为虚函数。子类1继承并重写了基类的函数，子类2继承基类但没有重写基类的函数，从结果分析子类体现了多态性，那么为什么会出现多态性，其底层的原理是什么？这里需要引出虚表和虚基表指针的概念。\",\"虚表：虚函数表的缩写，类中含有virtual关键字修饰的方法时，编译器会自动生成虚表\",\"虚表指针：在含有虚函数的类实例化对象时，对象地址的前四个字节存储的指向虚表的指针\",\"上图中展示了虚表和虚表指针在基类对象和派生类对象中的模型，下面阐述实现多态的过程：\",\"(1)编译器在发现基类中有虚函数时，会自动为每个含有虚函数的类生成一份虚表，该表是一个一维数组，虚表里保存了虚函数的入口地址\",\"(2)编译器会在每个对象的前四个字节中保存一个虚表指针，即vptr，指向对象所属类的虚表。在构造时，根据对象的类型去初始化虚指针vptr，从而让vptr指向正确的虚表，从而在调用虚函数时，能找到正确的函数\",\"(3)所谓的合适时机，在派生类定义对象时，程序运行会自动调用构造函数，在构造函数中创建虚表并对虚表初始化。在构造子类对象时，会先调用父类的构造函数，此时，编译器只“看到了”父类，并为父类对象初始化虚表指针，令它指向父类的虚表；当调用子类的构造函数时，为子类对象初始化虚表指针，令它指向子类的虚表\",\"(4)当派生类对基类的虚函数没有重写时，派生类的虚表指针指向的是基类的虚表；当派生类对基类的虚函数重写时，派生类的虚表指针指向的是自身的虚表；当派生类中有自己的虚函数时，在自己的虚表中将此虚函数地址添加在后面\",\"这样指向派生类的基类指针在运行时，就可以根据派生类对虚函数重写情况动态的进行调用，从而实现多态性。\"]},\"206\":{\"h\":\"基类的虚函数表存放在内存的什么区，虚表指针vptr的初始化时间\",\"t\":[\"首先整理一下虚函数表的特征：\",\"虚函数表是全局共享的元素，即全局仅有一个，在编译时就构造完成\",\"虚函数表类似一个数组，类对象中存储vptr指针，指向虚函数表，即虚函数表不是函数，不是程序代码，不可能存储在代码段\",\"虚函数表存储虚函数的地址,即虚函数表的元素是指向类成员函数的指针,而类中虚函数的个数在编译时期可以确定，即虚函数表的大小可以确定,即大小是在编译时期确定的，不必动态分配内存空间存储虚函数表，所以不在堆中\",\"根据以上特征，虚函数表类似于类中静态成员变量.静态成员变量也是全局共享，大小确定，因此最有可能存在全局数据区，测试结果显示：\",\"虚函数表vtable在Linux/Unix中存放在可执行文件的只读数据段中(rodata)，这与微软的编译器将虚函数表存放在常量段存在一些差别\",\"由于虚表指针vptr跟虚函数密不可分，对于有虚函数或者继承于拥有虚函数的基类，对该类进行实例化时，在构造函数执行时会对虚表指针进行初始化，并且存在对象内存布局的最前面。\"]},\"207\":{\"h\":\"构造函数和析构函数可以调用虚函数?\",\"t\":[\"在C++中，提倡不在构造函数和析构函数中调用虚函数；\",\"构造函数和析构函数调用虚函数时都不使用动态联编，如果在构造函数或析构函数中调用虚函数，则运行的是为构造函数或析构函数自身类型定义的版本；\",\"因为父类对象会在子类之前进行构造，此时子类部分的数据成员还未初始化，因此调用子类的虚函数时不安全的，故而C++不会进行动态联编；\",\"析构函数是用来销毁一个对象的，在销毁一个对象时，先调用子类的析构函数，然后再调用基类的析构函数。所以在调用基类的析构函数时，派生类对象的数据成员已经销毁，这个时候再调用子类的虚函数没有任何意义。\"]},\"208\":{\"h\":\"构造函数为什么不能为虚函数？析构函数为什么要虚函数？\",\"t\":[\"1、 从存储空间角度，虚函数相应一个指向vtable虚函数表的指针，这大家都知道，但是这个指向vtable的指针事实上是存储在对象的内存空间的。\",\"问题出来了，假设构造函数是虚的，就须要通过 vtable来调用，但是对象还没有实例化，也就是内存空间还没有，怎么找vtable呢？所以构造函数不能是虚函数。\",\"2、 从使用角度，虚函数主要用于在信息不全的情况下，能使重载的函数得到相应的调用。\",\"构造函数本身就是要初始化实例，那使用虚函数也没有实际意义呀。\",\"所以构造函数没有必要是虚函数。虚函数的作用在于通过父类的指针或者引用来调用它的时候可以变成调用子类的那个成员函数。而构造函数是在创建对象时自己主动调用的，不可能通过父类的指针或者引用去调用，因此也就规定构造函数不能是虚函数。\",\"3、构造函数不须要是虚函数，也不同意是虚函数，由于创建一个对象时我们总是要明白指定对象的类型，虽然我们可能通过实验室的基类的指针或引用去訪问它但析构却不一定，我们往往通过基类的指针来销毁对象。这时候假设析构函数不是虚函数，就不能正确识别对象类型从而不能正确调用析构函数。\",\"4、从实现上看，vbtl在构造函数调用后才建立，因而构造函数不可能成为虚函数从实际含义上看，在调用构造函数时还不能确定对象的真实类型（由于子类会调父类的构造函数）；并且构造函数的作用是提供初始化，在对象生命期仅仅运行一次，不是对象的动态行为，也没有必要成为虚函数。\",\"5、当一个构造函数被调用时，它做的首要的事情之中的一个是初始化它的VPTR。\",\"因此，它仅仅能知道它是“当前”类的，而全然忽视这个对象后面是否还有继承者。当编译器为这个构造函数产生代码时，它是为这个类的构造函数产生代码——既不是为基类，也不是为它的派生类（由于类不知道谁继承它）。所以它使用的VPTR必须是对于这个类的VTABLE。\",\"并且，仅仅要它是最后的构造函数调用，那么在这个对象的生命期内，VPTR将保持被初始化为指向这个VTABLE, 但假设接着另一个更晚派生的构造函数被调用，这个构造函数又将设置VPTR指向它的 VTABLE，等.直到最后的构造函数结束。\",\"VPTR的状态是由被最后调用的构造函数确定的。这就是为什么构造函数调用是从基类到更加派生类顺序的还有一个理由。可是，当这一系列构造函数调用正发生时，每一个构造函数都已经设置VPTR指向它自己的VTABLE。假设函数调用使用虚机制，它将仅仅产生通过它自己的VTABLE的调用，而不是最后的VTABLE（全部构造函数被调用后才会有最后的VTABLE）。\",\"因为构造函数本来就是为了明确初始化对象成员才产生的，然而virtual function主要是为了再不完全了解细节的情况下也能正确处理对象。另外，virtual函数是在不同类型的对象产生不同的动作，现在对象还没有产生，如何使用virtual函数来完成你想完成的动作。\",\"直接的讲，C++中基类采用virtual虚析构函数是为了防止内存泄漏。\",\"具体地说，如果派生类中申请了内存空间，并在其析构函数中对这些内存空间进行释放。假设基类中采用的是非虚析构函数，当删除基类指针指向的派生类对象时就不会触发动态绑定，因而只会调用基类的析构函数，而不会调用派生类的析构函数。那么在这种情况下，派生类中申请的空间就得不到释放从而产生内存泄漏。\",\"所以，为了防止这种情况的发生，C++中基类的析构函数应采用virtual虚析构函数。\"]},\"209\":{\"c\":[\"面试题\"]},\"210\":{\"c\":[\"c++\"]},\"211\":{\"h\":\"进程编程\"},\"212\":{\"h\":\"进程状态\"},\"213\":{\"h\":\"进程的基本状态\",\"t\":[\"新建（New）：\",\"进程正在被创建，还未进入准备就绪队列。\",\"就绪（Ready）：\",\"进程已经被创建并准备好执行，等待被调度器分配 CPU 资源。\",\"运行（Running）：\",\"进程正在 CPU 上执行代码。\",\"阻塞（Blocked）：\",\"进程无法继续执行，正在等待某个事件（如 I/O 完成、资源可用）发生。\",\"终止（Terminated）：\",\"进程已完成执行或因某种原因被强制终止，系统将其从内存中移除。\"]},\"214\":{\"h\":\"进程状态之间的转换\",\"t\":[\"进程在其生命周期内可以在不同状态之间进行转换，以下是常见的状态转换路径：\",\"新建 → 就绪：\",\"当进程创建完成，分配了必要的资源后，就会进入就绪状态，等待调度器的调度。\",\"就绪 → 运行：\",\"调度器选择一个就绪的进程并将其分配给 CPU，进程进入运行状态。\",\"运行 → 就绪：\",\"如果运行中的进程的时间片耗尽，或者由于其他更高优先级的进程需要 CPU，则该进程被挂起并返回到就绪队列中，等待下一次调度。\",\"运行 → 阻塞：\",\"当进程执行 I/O 操作或等待某个事件发生（如等待信号、等待资源）时，进程进入阻塞状态，CPU 被释放给其他就绪进程。\",\"阻塞 → 就绪：\",\"当等待的事件发生（如 I/O 完成或资源可用），阻塞的进程会被移回就绪队列，等待再次被调度。\",\"运行 → 终止：\",\"当进程完成其任务或被强制终止时，进程进入终止状态，系统将其从内存中清除。\"]},\"215\":{\"h\":\"状态转换示意图\"},\"216\":{\"h\":\"僵尸进程\",\"t\":[\"僵尸进程（Zombie Process）是在 UNIX 或类 UNIX 系统（如 Linux）中，子进程终止后，其父进程没有及时调用 wait() 或 waitpid() 函数回收子进程的退出状态信息，从而导致的进程状态。\",\"具体来说，当一个子进程结束时，它的所有资源（如内存、文件描述符等）都会被操作系统回收，但它的进程描述符（即进程控制块，包含退出状态信息等）仍然保留在系统中。这是为了允许父进程能够获取子进程的退出状态。当父进程调用 wait() 或 waitpid() 获取子进程的退出状态后，僵尸进程的进程描述符才会被完全清除。\"]},\"217\":{\"h\":\"僵尸进程的影响\",\"t\":[\"资源占用：虽然僵尸进程不会占用内存或 CPU，但它会占用一个进程表项（即进程描述符）。在系统中，进程表项的数量是有限的，如果有大量僵尸进程存在，可能会导致系统无法创建新进程。\",\"系统管理的麻烦：大量僵尸进程可能会让系统管理者难以管理和监控系统状态。\"]},\"218\":{\"h\":\"如何避免产生僵尸进程？\",\"t\":[\"避免产生僵尸进程的关键在于确保父进程能够及时处理子进程的退出状态。以下是几种常用的方法：\",\"及时调用 wait() 或 waitpid()：\",\"父进程在适当的时机调用 wait() 或 waitpid() 函数，以获取并处理子进程的退出状态，从而防止僵尸进程的产生。\",\"pid_t pid = fork(); if (pid == 0) { // 子进程代码 exit(0); } else { // 父进程代码 wait(NULL); // 等待子进程结束并回收资源 }\",\"使用 SIGCHLD 信号处理子进程的结束：\",\"当子进程结束时，父进程会收到 SIGCHLD 信号。父进程可以在信号处理程序中调用 wait() 或 waitpid() 以回收子进程的资源。\",\"#include <iostream> #include <sys/wait.h> #include <unistd.h> #include <signal.h> void sigchld_handler(int signum) { // 等待所有已终止的子进程 while (waitpid(-1, NULL, WNOHANG) > 0); } int main() { // 注册 SIGCHLD 信号处理程序 signal(SIGCHLD, sigchld_handler); pid_t pid = fork(); if (pid == 0) { // 子进程代码 exit(0); } else { // 父进程代码 // 父进程继续执行其任务 pause(); // 等待信号（例如 SIGCHLD） } return 0; }\",\"将子进程的父进程设置为 init 进程（或 systemd）：\",\"如果父进程在子进程结束前退出，子进程会被 init 进程（PID 为 1 的进程）接管。init 进程会自动调用 wait() 回收子进程的资源，避免僵尸进程的产生。可以通过调用 fork() 后使父进程退出，子进程被 init 接管。\",\"pid_t pid = fork(); if (pid > 0) { // 父进程退出 exit(0); } // 子进程继续执行 // 此时子进程的父进程是 init 进程\",\"采用 double fork() 技术：\",\"父进程通过 fork() 创建一个子进程，子进程再 fork() 创建一个孙子进程，然后子进程立即退出，父进程只需等待子进程的退出状态，孙子进程则由 init 进程接管。\",\"pid_t pid = fork(); if (pid == 0) { // 第一个子进程 pid_t pid2 = fork(); if (pid2 == 0) { // 孙子进程 // 在此处执行需要守护的任务 exit(0); } else { // 第一个子进程退出 exit(0); } } else { // 父进程等待第一个子进程退出 wait(NULL); }\",\"::: 僵尸进程是因父进程未及时处理子进程的退出状态而产生的。通过及时调用 wait() 系列函数、处理 SIGCHLD 信号、使用 init 进程接管孤儿进程或采用 double fork() 技术，可以有效避免僵尸进程的产生。在实际开发中，选择适当的方法管理子进程的生命周期，对于保持系统的稳定性和资源利用率至关重要。 :::\"]},\"219\":{\"h\":\"守护进程\",\"t\":[\"在 Linux 系统中，守护进程（Daemon）是一种在后台运行的进程，通常不与任何终端关联。创建守护进程的步骤包括分离进程、关闭标准文件描述符、设置新的会话等。下面是一个用 C++ 创建守护进程的示例代码。\"]},\"220\":{\"h\":\"代码示例\",\"t\":[\"#include <iostream> #include <unistd.h> #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> #include <signal.h> #include <stdlib.h> void createDaemon() { pid_t pid; // 1. Fork子进程并退出父进程，使子进程在后台运行 pid = fork(); if (pid < 0) { std::cerr << \\\"Fork failed.\\\" << std::endl; exit(EXIT_FAILURE); } if (pid > 0) { // 父进程退出 exit(EXIT_SUCCESS); } // 2. 创建新的会话，脱离终端 if (setsid() < 0) { std::cerr << \\\"Failed to create new session.\\\" << std::endl; exit(EXIT_FAILURE); } // 3. Fork第二个子进程，确保守护进程不能重新打开控制终端 pid = fork(); if (pid < 0) { std::cerr << \\\"Fork failed.\\\" << std::endl; exit(EXIT_FAILURE); } if (pid > 0) { // 第一个子进程退出 exit(EXIT_SUCCESS); } // 4. 设置文件权限掩码 umask(0); // 5. 更改工作目录 if (chdir(\\\"/\\\") < 0) { std::cerr << \\\"Failed to change directory to /.\\\" << std::endl; exit(EXIT_FAILURE); } // 6. 关闭标准文件描述符 close(STDIN_FILENO); close(STDOUT_FILENO); close(STDERR_FILENO); // 7. 将标准文件描述符重定向到 /dev/null open(\\\"/dev/null\\\", O_RDWR); // STDIN_FILENO = 0 dup(0); // STDOUT_FILENO = 1 dup(0); // STDERR_FILENO = 2 // 守护进程的主循环 while (true) { // 执行守护进程的任务 sleep(10); // 示例：每隔10秒执行一次任务 } } int main() { // 创建守护进程 createDaemon(); // 守护进程的其他工作逻辑可以写在这里 return 0; }\"]},\"221\":{\"h\":\"代码解释\",\"t\":[\"Fork 子进程并退出父进程：\",\"调用 fork() 创建一个子进程。父进程退出，子进程继续运行，从而实现进程在后台运行。\",\"创建新的会话：\",\"调用 setsid() 创建一个新的会话。子进程成为新的会话组长，从而脱离控制终端。\",\"Fork 第二个子进程：\",\"再次 fork()，目的是防止守护进程重新获取控制终端。第一个子进程退出，第二个子进程继续运行。\",\"设置文件权限掩码：\",\"使用 umask(0) 清除文件权限掩码，以确保守护进程创建的新文件有正确的权限。\",\"更改工作目录：\",\"将当前工作目录更改为根目录（/），以避免守护进程占用可卸载的文件系统。\",\"关闭标准文件描述符：\",\"关闭标准输入、标准输出和标准错误输出文件描述符，守护进程不再依赖于终端。\",\"重定向标准文件描述符：\",\"将标准文件描述符重定向到 /dev/null，即使守护进程尝试读取或写入标准输入输出，也不会有任何操作。\",\"主循环：\",\"在守护进程的主循环中执行具体任务。可以使用 sleep() 模拟周期性任务执行。\"]},\"222\":{\"h\":\"注意事项\",\"t\":[\"信号处理：守护进程通常需要处理系统信号，如 SIGTERM 用于优雅地终止进程。\",\"日志记录：守护进程不能直接输出到终端，通常会使用日志文件或 syslog 记录日志。\",\"运行权限：某些守护进程需要特定的权限，如 root 权限，这时需要特别注意权限管理。\",\"以上代码创建了一个简单的守护进程，实际应用中可以根据需求扩展守护进程的功能，如处理信号、写日志等。\"]},\"223\":{\"h\":\"进程间通信\",\"t\":[\"进程间通信（Inter-rocess Communication，IPC）是操作系统提供的功能，允许不同的进程之间交换数据和信号。在多任务操作系统中，进程是独立的实体，各自拥有独立的内存空间。因此，IPC 成为进程之间协调和数据共享的关键手段。常见的进程间通信方式包括：\"]},\"224\":{\"h\":\"1.\",\"t\":[\"管道是最基本的 IPC 机制，用于在父子进程之间传递数据。管道是一种半双工的通信方式，数据只能单向流动。\",\"无名管道 (Anonymous Pipes)：只能用于有亲缘关系的进程（如父子进程）之间。\",\"有名管道 (Named Pipes, FIFO)：可以用于无亲缘关系的进程之间。\",\"示例代码（无名管道）：\",\"#include <iostream> #include <unistd.h> int main() { int fd[2]; pipe(fd); // 创建无名管道 pid_t pid = fork(); if (pid == 0) { // 子进程 close(fd[0]); // 关闭读端 const char* msg = \\\"Hello from child process\\\"; write(fd[1], msg, strlen(msg) + 1); // 写入管道 close(fd[1]); // 关闭写端 } else { // 父进程 close(fd[1]); // 关闭写端 char buffer[128]; read(fd[0], buffer, sizeof(buffer)); // 从管道读取 std::cout << \\\"Parent received: \\\" << buffer << std::endl; close(fd[0]); // 关闭读端 } return 0; }\"]},\"225\":{\"h\":\"2.\",\"t\":[\"消息队列允许进程以消息为单位进行通信，消息队列可以实现多个进程之间的消息传递和同步。\",\"示例代码：\",\"#include <iostream> #include <sys/ipc.h> #include <sys/msg.h> #include <cstring> struct Message { long msg_type; char msg_text[100]; }; int main() { key_t key = ftok(\\\"progfile\\\", 65); // 生成唯一键 int msgid = msgget(key, 0666 | IPC_CREAT); // 创建消息队列 if (fork() == 0) { // 子进程 Message msg; msg.msg_type = 1; strcpy(msg.msg_text, \\\"Hello from child process\\\"); msgsnd(msgid, &msg, sizeof(msg.msg_text), 0); // 发送消息 std::cout << \\\"Message sent from child process\\\" << std::endl; } else { // 父进程 Message msg; msgrcv(msgid, &msg, sizeof(msg.msg_text), 1, 0); // 接收消息 std::cout << \\\"Parent received: \\\" << msg.msg_text << std::endl; msgctl(msgid, IPC_RMID, NULL); // 删除消息队列 } return 0; }\"]},\"226\":{\"h\":\"3.\",\"t\":[\"共享内存是一种高效的进程间通信方式，允许多个进程直接访问同一块内存区域。共享内存速度快，但需要进程间同步机制（如信号量）来避免数据竞争。\",\"示例代码：\",\"#include <iostream> #include <sys/ipc.h> #include <sys/shm.h> #include <cstring> int main() { key_t key = ftok(\\\"shmfile\\\", 65); // 生成唯一键 int shmid = shmget(key, 1024, 0666 | IPC_CREAT); // 创建共享内存 if (fork() == 0) { // 子进程 char* str = (char*) shmat(shmid, (void*)0, 0); // 连接共享内存 strcpy(str, \\\"Hello from child process\\\"); shmdt(str); // 分离共享内存 } else { // 父进程 wait(NULL); // 等待子进程完成 char* str = (char*) shmat(shmid, (void*)0, 0); // 连接共享内存 std::cout << \\\"Parent received: \\\" << str << std::endl; shmdt(str); // 分离共享内存 shmctl(shmid, IPC_RMID, NULL); // 销毁共享内存 } return 0; }\"]},\"227\":{\"h\":\"4.\",\"t\":[\"信号量是一种用于进程间同步的机制，常与共享内存结合使用，以防止多个进程同时访问共享资源。\",\"示例代码：\",\"#include <iostream> #include <sys/ipc.h> #include <sys/sem.h> union semun { int val; struct semid_ds *buf; unsigned short *array; struct seminfo *__buf; }; void semaphoreWait(int semid) { struct sembuf sb = {0, -1, 0}; // 减少信号量 semop(semid, &sb, 1); } void semaphoreSignal(int semid) { struct sembuf sb = {0, 1, 0}; // 增加信号量 semop(semid, &sb, 1); } int main() { key_t key = ftok(\\\"semfile\\\", 65); int semid = semget(key, 1, 0666 | IPC_CREAT); semun sem_union; sem_union.val = 1; semctl(semid, 0, SETVAL, sem_union); // 初始化信号量 if (fork() == 0) { // 子进程 semaphoreWait(semid); std::cout << \\\"Child process is in critical section\\\" << std::endl; sleep(2); std::cout << \\\"Child process leaving critical section\\\" << std::endl; semaphoreSignal(semid); } else { // 父进程 semaphoreWait(semid); std::cout << \\\"Parent process is in critical section\\\" << std::endl; sleep(2); std::cout << \\\"Parent process leaving critical section\\\" << std::endl; semaphoreSignal(semid); wait(NULL); // 等待子进程完成 semctl(semid, 0, IPC_RMID); // 删除信号量 } return 0; }\"]},\"228\":{\"h\":\"5.\",\"t\":[\"信号是一种异步通知机制，用于通知进程某个事件发生。信号可以用于进程间的简单通信或异常处理。\",\"示例代码：\",\"#include <iostream> #include <csignal> #include <unistd.h> void signalHandler(int signum) { std::cout << \\\"Interrupt signal (\\\" << signum << \\\") received.\\\\n\\\"; exit(signum); } int main() { signal(SIGINT, signalHandler); // 注册信号处理程序 std::cout << \\\"Waiting for signal SIGINT (Ctrl+C)...\\\\n\\\"; while (true) { sleep(1); // 模拟进程在运行 } return 0; }\"]},\"229\":{\"h\":\"6.\",\"t\":[\"套接字是一种网络通信的进程间通信方式，适用于分布式系统中的进程间通信。它支持 TCP 和 UDP 两种模式，可以用于不同主机之间的进程通信。\",\"示例代码（TCP 套接字）：\",\"// server.cpp #include <iostream> #include <sys/socket.h> #include <netinet/in.h> #include <unistd.h> int main() { int server_fd = socket(AF_INET, SOCK_STREAM, 0); sockaddr_in address = {AF_INET, htons(8080), INADDR_ANY}; bind(server_fd, (struct sockaddr*)&address, sizeof(address)); listen(server_fd, 3); int new_socket = accept(server_fd, NULL, NULL); const char* msg = \\\"Hello from server\\\"; send(new_socket, msg, strlen(msg), 0); close(new_socket); close(server_fd); return 0; } // client.cpp #include <iostream> #include <sys/socket.h> #include <arpa/inet.h> #include <unistd.h> int main() { int sock = socket(AF_INET, SOCK_STREAM, 0); sockaddr_in serv_addr = {AF_INET, htons(8080), inet_addr(\\\"127.0.0.1\\\")}; connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)); char buffer[1024] = {0}; read(sock, buffer, sizeof(buffer)); std::cout << \\\"Message from server: \\\" << buffer << std::endl; close(sock); return 0; }\"]},\"230\":{\"h\":\"总结\",\"t\":[\"进程间通信是操作系统中用于协调和共享数据的重要机制。根据应用场景的不同，可以选择不同的 IPC 方式，如管道、消息队列、共享内存、信号量、信\",\"号和套接字。每种通信方式都有其优缺点和适用场景，需要根据需求进行选择。\"]},\"231\":{\"c\":[\"面试题\"]},\"232\":{\"c\":[\"c++\",\"多进程\",\"进程通信\"]},\"233\":{\"h\":\"线程编程\"},\"234\":{\"h\":\"如何创建线程？\",\"t\":[\"C++11引入了std::thread来创建线程，支持对线程join或者detach。直接看代码：\",\"// thread example #include <iostream> // std::cout #include <thread> // std::thread void foo() { // do stuff... } void bar(int x) { // do stuff... } int main() { std::thread first (foo); // spawn new thread that calls foo() std::thread second (bar,0); // spawn new thread that calls bar(0) std::cout << \\\"main, foo and bar now execute concurrently...\\\\n\\\"; // synchronize threads: first.join(); // pauses until first finishes second.join(); // pauses until second finishes std::cout << \\\"foo and bar completed.\\\\n\\\"; return 0; }\",\"上述代码中，函数 foo() 和 bar(0) 分别运行在线程对象 first 和 second 中，从刚创建对象开始就会新建一个线程用于执行函数，调用 join() 函数将会阻塞主线程，直到线程函数执行结束，线程函数的返回值将会被忽略。如果不希望线程被阻塞执行，可以调用线程对象的 detach() 函数，表示将线程和线程对象分离，新的线程与主线程没有任何关联，线程资源在任务结束后会由操作系统自动回收。\",\"如果没有调用 join() 或者 detach() 函数，假如线程函数执行时间较长，此时线程对象的生命周期结束调用析构函数清理资源，这时可能会发生crash，这里有两种解决办法，一个是调用 join()，保证线程函数的生命周期和线程对象的生命周期相同，另一个是调用 detach()，将线程和线程对象分离，这里需要注意，如果线程已经和对象分离，那我们就再也无法控制线程什么时候结束了，不能再通过join来等待线程执行完成。\"]},\"235\":{\"h\":\"线程同步机制\"},\"236\":{\"h\":\"\",\"t\":[\"实现原理：\",\"互斥量的核心原理是通过锁定和解锁机制来控制对共享资源的访问。具体实现步骤如下：\",\"基本结构：\",\"互斥量有一个内部状态，通常用布尔值或整数表示（锁定或未锁定）。\",\"维护一个等待队列，用于保存等待锁的线程。\",\"锁定 (Lock)：\",\"当一个线程尝试锁定互斥量时，如果互斥量未锁定，则线程成功锁定，并将互斥量状态设置为锁定。\",\"如果互斥量已锁定，则该线程进入等待队列并挂起，直到互斥量被解锁。\",\"解锁 (Unlock)：\",\"当一个线程解锁互斥量时，如果等待队列中有其他线程，则唤醒一个线程，使其尝试重新锁定互斥量。\",\"如果没有线程在等待，则将互斥量状态设置为未锁定。\",\"代码示例：\",\"#include <iostream> #include <thread> #include <mutex> std::mutex mtx; void print_thread_id(int id) { std::lock_guard<std::mutex> guard(mtx); // 自动加锁和解锁 std::cout << \\\"Thread #\\\" << id << std::endl; } int main() { std::thread threads[10]; for (int i = 0; i < 10; ++i) { threads[i] = std::thread(print_thread_id, i); } for (auto& th : threads) { th.join(); } return 0; }\"]},\"237\":{\"h\":\"\",\"t\":[\"实现原理：\",\"读写锁允许多个线程同时读取，但在写入时只允许一个线程操作。其实现原理如下：\",\"基本结构：\",\"读写锁包含两个计数器：一个用于记录当前正在读取的线程数，另一个用于记录是否有写线程在等待。\",\"维护一个等待队列，用于保存等待的线程。\",\"读锁定 (Read Lock)：\",\"当一个线程请求读锁定时，如果没有写锁存在，则增加读计数器，线程继续执行。\",\"如果有写锁存在，则线程进入等待队列。\",\"写锁定 (Write Lock)：\",\"当一个线程请求写锁定时，如果没有读锁和写锁存在，则锁定成功。\",\"如果有读锁或写锁存在，则线程进入等待队列。\",\"解锁 (Unlock)：\",\"当读线程解锁时，减少读计数器，如果读计数器为0且有写线程在等待，则唤醒一个写线程。\",\"当写线程解锁时，如果有读线程在等待，则唤醒所有读线程；如果有写线程在等待，则唤醒一个写线程。\",\"代码示例：\",\"#include <iostream> #include <thread> #include <shared_mutex> #include <vector> std::shared_mutex rw_mtx; std::vector<int> data; void reader() { std::shared_lock<std::shared_mutex> lock(rw_mtx); for (const auto& d : data) { std::cout << d << \\\" \\\"; } std::cout << std::endl; } void writer(int value) { std::unique_lock<std::shared_mutex> lock(rw_mtx); data.push_back(value); } int main() { std::thread t1(writer, 1); std::thread t2(reader); std::thread t3(writer, 2); std::thread t4(reader); t1.join(); t2.join(); t3.join(); t4.join(); return 0; }\"]},\"238\":{\"h\":\"\",\"t\":[\"实现原理：\",\"条件变量用于线程之间的等待和通知机制。其实现原理如下：\",\"基本结构：\",\"条件变量与一个互斥量和一个条件状态相关联。\",\"维护一个等待队列，用于保存等待条件的线程。\",\"等待 (Wait)：\",\"线程在等待条件变量时，需要持有相关的互斥量。\",\"线程将自己添加到等待队列，并释放互斥量，等待条件变量的通知。\",\"通知 (Notify)：\",\"当一个线程修改条件状态并调用 notify_one 或 notify_all 时，唤醒一个或所有等待队列中的线程。\",\"被唤醒的线程重新获得互斥量，检查条件状态，如果条件满足，线程继续执行；如果条件不满足，线程再次进入等待状态。\",\"代码示例：\",\"#include <iostream> #include <thread> #include <mutex> #include <condition_variable> std::mutex cv_mtx; std::condition_variable cv; bool ready = false; void print_id(int id) { std::unique_lock<std::mutex> lock(cv_mtx); cv.wait(lock, [] { return ready; }); // 等待 ready 变为 true std::cout << \\\"Thread #\\\" << id << std::endl; } void set_ready() { std::this_thread::sleep_for(std::chrono::seconds(1)); { std::lock_guard<std::mutex> lock(cv_mtx); ready = true; } cv.notify_all(); // 唤醒所有等待的线程 } int main() { std::thread threads[10]; for (int i = 0; i < 10; ++i) { threads[i] = std::thread(print_id, i); } std::thread t(set_ready); for (auto& th : threads) { th.join(); } t.join(); return 0; }\",\"使用场景：\",\"条件变量常用于线程之间的协调，例如在生产者-消费者模型中，生产者线程通知消费者线程有新数据可用，消费者线程等待该通知。\"]},\"239\":{\"h\":\"\",\"t\":[\"实现原理：\",\"原子操作通过硬件支持的指令集实现，保证在并发环境下操作的不可分割性。其实现原理如下：\",\"硬件支持：\",\"原子操作依赖于硬件提供的原子指令，如 compare-and-swap (CAS)、fetch-and-add 等，这些指令能够确保在多个线程操作同一数据时不会产生竞争条件。\",\"内存模型：\",\"C++ 中的 std::atomic 提供了对不同内存模型的支持，确保在不同平台上实现一致的原子操作行为。\",\"无需锁定：\",\"原子操作直接操作共享变量，不需要加锁解锁，因此在高并发场景下具有更好的性能。\",\"代码示例：\",\"#include <iostream> #include <thread> #include <atomic> std::atomic<int> counter(0); void increment() { for (int i = 0; i < 1000; ++i) { ++counter; // 原子操作 } } int main() { std::thread threads[10]; for (int i = 0; i < 10; ++i) { threads[i] = std::thread(increment); } for (auto& th : threads) { th.join(); } std::cout << \\\"Final counter value: \\\" << counter << std::endl; return 0; }\",\"使用场景：\",\"原子操作适用于需要高效并发访问的场景，如计数器、标志位等，避免使用锁机制带来的开销。\"]},\"240\":{\"h\":\"\",\"t\":[\"实现原理：\",\"信号量是一种控制对共享资源访问的计数器，分为计数信号量和二进制信号量。其实现原理如下：\",\"计数器：\",\"信号量内部维护一个计数器，表示当前可用资源的数量。计数器初始值通常为资源的总量。\",\"P 操作 (等待操作)：\",\"当一个线程执行 P 操作（wait 或 acquire）时，计数器减 1。如果计数器值为正，线程继续执行；如果计数器值为零或负，线程进入等待队列，等待资源释放。\",\"V 操作 (释放操作)：\",\"当一个线程执行 V 操作（signal 或 release）时，计数器加 1。如果有线程在等待队列中，唤醒一个线程，使其继续执行。\",\"代码示例：\",\"#include <iostream> #include <thread> #include <semaphore> std::counting_semaphore<1> sem(1); void worker(int id) { sem.acquire(); // P 操作 std::cout << \\\"Thread #\\\" << id << \\\" is working\\\" << std::endl; std::this_thread::sleep_for(std::chrono::seconds(1)); sem.release(); // V 操作 } int main() { std::thread threads[10]; for (int i = 0; i < 10; ++i) { threads[i] = std::thread(worker, i); } for (auto& th : threads) { th.join(); } return 0; }\",\"使用场景：\",\"信号量适用于控制对资源的并发访问数量，例如限制同时访问文件的线程数、实现生产者-消费者模型等。\"]},\"241\":{\"h\":\"6. 自旋锁 (Spinlock)\",\"t\":[\"实现原理：\",\"自旋锁是一种忙等待锁，线程在尝试获取锁时会反复检查锁的状态，而不会阻塞或挂起。其实现原理如下：\",\"忙等待：\",\"当一个线程尝试获取自旋锁时，如果锁已经被其他线程持有，线程将反复检查锁的状态，直到锁可用为止。\",\"自旋锁通常通过硬件的原子操作实现，如 test-and-set、compare-and-swap 等。\",\"解锁：\",\"当持有锁的线程释放自旋锁时，其他线程可以成功获取锁并继续执行。\",\"代码示例：\",\"#include <iostream> #include <thread> #include <atomic> class Spinlock { std::atomic_flag flag = ATOMIC_FLAG_INIT; public: void lock() { while (flag.test_and_set(std::memory_order_acquire)); // 自旋等待 } void unlock() { flag.clear(std::memory_order_release); } }; Spinlock spinlock; void worker(int id) { spinlock.lock(); std::cout << \\\"Thread #\\\" << id << \\\" is working\\\" << std::endl; std::this_thread::sleep_for(std::chrono::seconds(1)); spinlock.unlock(); } int main() { std::thread threads[10]; for (int i = 0; i < 10; ++i) { threads[i] = std::thread(worker, i); } for (auto& th : threads) { th.join(); } return 0; }\",\"使用场景：\",\"自旋锁适用于锁定时间非常短的场景，例如在中断上下文或需要避免线程调度开销的情况下使用。\"]},\"242\":{\"h\":\"\",\"t\":[\"实现原理：\",\"屏障用于同步一组线程，确保所有线程都到达某个同步点后才能继续执行。其实现原理如下：\",\"计数器：\",\"屏障内部维护一个计数器，表示已到达屏障的线程数量。每当一个线程到达屏障点时，计数器减 1。\",\"等待机制：\",\"当计数器达到零时，表示所有线程都已到达屏障点，屏障解除，所有等待的线程继续执行。\",\"代码示例：\",\"#include <iostream> #include <thread> #include <barrier> #include <vector> std::barrier sync_point(10); void worker(int id) { std::cout << \\\"Thread #\\\" << id << \\\" is waiting\\\" << std::endl; sync_point.arrive_and_wait(); // 等待所有线程到达屏障点 std::cout << \\\"Thread #\\\" << id << \\\" is proceeding\\\" << std::endl; } int main() { std::vector<std::thread> threads; for (int i = 0; i < 10; ++i) { threads.emplace_back(worker, i); } for (auto& th : threads) { th.join(); } return 0; }\",\"使用场景：\",\"屏障适用于并行计算中需要同步多个线程的场景，例如在每个计算步骤完成后同步所有线程。\"]},\"243\":{\"h\":\"\",\"t\":[\"实现原理：\",\"锁存器类似于屏障，但只能使用一次，线程等待直到锁存器倒数到零。其实现原理如下：\",\"倒数计数器：\",\"锁存器内部维护一个倒数计数器，表示需要完成的任务数量。每次完成任务时，计数器减 1。\",\"等待机制：\",\"当计数器减为零时，所有等待的线程被唤醒，继续执行。\",\"代码示例：\",\"#include <iostream> #include <thread> #include <latch> #include <vector> std::latch sync_point(10); void worker(int id) { std::cout << \\\"Thread #\\\" << id << \\\" has reached the latch point\\\" << std::endl; sync_point.count_down(); // 锁存器计数减少 sync_point.wait(); // 等待所有线程到达锁存器 std::cout << \\\"Thread #\\\" << id << \\\" is proceeding\\\" << std::endl; } int main() { std::vector<std::thread> threads; for (int i = 0; i < 10; ++i) { threads.emplace_back(worker, i); } for (auto& th : threads) { th.join(); } return 0; }\",\"使用场景：\",\"锁存器适用于需要等待一组线程或任务完成后才能继续执行的场景，例如初始化任务完成后启动主任务。\"]},\"244\":{\"h\":\"死锁\",\"t\":[\"死锁的四个条件(循环等待不可抢占的互斥资源):\",\"禁止抢占(no preemption)：系统资源不能被强制从一个进程(线程)中退出，已经获得的资源在未使用完之前不能被抢占。\",\"等待和保持(hold and wait)：一个进程(线程)因请求资源阻塞时，对已获得的资源保持不放。\",\"互斥(mutual exclusion)：资源只能同时分配给一个进程(线程)，无法多个进程(线程)共享。\",\"循环等待(circular waiting)：一系列进程(线程)互相持有其他进程(线程)所需要的资源。\",\"死锁问题的排查\",\"参考 1\",\"参考 2\"]},\"245\":{\"h\":\"无锁编程\",\"t\":[\"无锁编程（Lock-Free Programming）是一种在多线程环境中实现并发访问的技术，目的是避免传统锁机制（如互斥锁）带来的性能开销和死锁风险。无锁编程主要依赖于原子操作和内存序列模型，以确保在没有锁的情况下实现线程安全。\"]},\"246\":{\"h\":\"1. 基本概念\",\"t\":[\"原子操作：原子操作是不可分割的，多个线程对同一变量进行原子操作时，不会引起数据竞争。\",\"CAS (Compare-and-Swap)：这是无锁编程的核心操作之一，它检查一个变量是否有特定的值，如果是，则将其更改为新值。这个操作是原子的，即在执行时不会被其他线程打断。\",\"内存序列模型：C++ 提供了一组内存序列模型（如 memory_order_relaxed、memory_order_acquire、memory_order_release 等），以控制并发操作的顺序性。\"]},\"247\":{\"h\":\"2. C++ 中的原子操作\",\"t\":[\"C++11 引入了 std::atomic 模板类，为实现无锁编程提供了基础设施。它支持以下操作：\",\"原子加载和存储\",\"原子递增和递减\",\"原子交换\",\"原子比较并交换（CAS）\"]},\"248\":{\"h\":\"3. 使用原子变量实现无锁队列\",\"t\":[\"下面是一个简单的无锁单生产者单消费者队列的实现示例：\",\"#include <atomic> #include <iostream> #include <thread> #include <vector> template <typename T> class LockFreeQueue { public: LockFreeQueue(size_t capacity) : capacity(capacity), head(0), tail(0) { buffer = new T[capacity]; } ~LockFreeQueue() { delete[] buffer; } bool enqueue(const T& item) { size_t currentTail = tail.load(std::memory_order_relaxed); size_t nextTail = (currentTail + 1) % capacity; if (nextTail == head.load(std::memory_order_acquire)) { return false; // 队列已满 } buffer[currentTail] = item; tail.store(nextTail, std::memory_order_release); return true; } bool dequeue(T& item) { size_t currentHead = head.load(std::memory_order_relaxed); if (currentHead == tail.load(std::memory_order_acquire)) { return false; // 队列为空 } item = buffer[currentHead]; // 使用 memory_order_release 确保更新操作一定在取值之后 head.store((currentHead + 1) % capacity, std::memory_order_release); return true; } private: T* buffer; size_t capacity; std::atomic<size_t> head; std::atomic<size_t> tail; }; int main() { LockFreeQueue<int> queue(10); // 启动生产者线程 std::thread producer([&queue]() { for (int i = 0; i < 20; ++i) { while (!queue.enqueue(i)) { // 如果队列已满，等待 } std::cout << \\\"Produced: \\\" << i << std::endl; } }); // 启动消费者线程 std::thread consumer([&queue]() { for (int i = 0; i < 20; ++i) { int item; while (!queue.dequeue(item)) { // 如果队列为空，等待 } std::cout << \\\"Consumed: \\\" << item << std::endl; } }); producer.join(); consumer.join(); return 0; }\"]},\"249\":{\"h\":\"4. 代码结构和作用\",\"t\":[\"类定义与构造函数\",\"template <typename T> class LockFreeQueue { public: LockFreeQueue(size_t capacity) : capacity(capacity), head(0), tail(0) { buffer = new T[capacity]; } ~LockFreeQueue() { delete[] buffer; }\",\"LockFreeQueue 类是一个泛型队列，使用模板参数 T 来定义队列元素的类型。\",\"构造函数初始化队列的容量 capacity，并将 head 和 tail 指针初始化为 0。\",\"队列使用一个动态分配的数组 buffer 来存储元素。\",\"enqueue 方法\",\"bool enqueue(const T& item) { size_t currentTail = tail.load(std::memory_order_relaxed); size_t nextTail = (currentTail + 1) % capacity; if (nextTail == head.load(std::memory_order_acquire)) { return false; // 队列已满 } buffer[currentTail] = item; tail.store(nextTail, std::memory_order_release); return true; }\",\"enqueue 方法用于将一个元素插入队列。\",\"tail.load(std::memory_order_relaxed)：原子地加载当前的尾部指针 tail 的值。使用 memory_order_relaxed 是因为我们不需要同步其他内存操作，仅仅读取尾部的值。\",\"nextTail = (currentTail + 1) % capacity：计算插入元素后的尾部指针值，使用取模操作来实现循环队列。\",\"if (nextTail == head.load(std::memory_order_acquire))：检查队列是否已满。如果 nextTail 与头部指针 head 相等，说明队列已满。\",\"buffer[currentTail] = item：将元素存储在当前尾部指针所指向的位置。\",\"tail.store(nextTail, std::memory_order_release)：将新的尾部指针存储到 tail，并使用 memory_order_release 以确保插入操作完成后，其他线程能正确地看到更新的尾部指针。\",\"dequeue 方法\",\"bool dequeue(T& item) { size_t currentHead = head.load(std::memory_order_relaxed); if (currentHead == tail.load(std::memory_order_acquire)) { return false; // 队列为空 } item = buffer[currentHead]; head.store((currentHead + 1) % capacity, std::memory_order_release); return true; }\",\"dequeue 方法用于从队列中取出一个元素。\",\"currentHead = head.load(std::memory_order_relaxed)：原子地加载当前的头部指针 head 的值。\",\"if (currentHead == tail.load(std::memory_order_acquire))：检查队列是否为空。如果 head 与 tail 相等，说明队列为空。\",\"item = buffer[currentHead]：将头部指针所指向的元素存储到 item 中。\",\"head.store((currentHead + 1) % capacity, std::memory_order_release)：更新头部指针，指向下一个元素的位置，并使用 memory_order_release 以确保取出操作完成后，其他线程能正确地看到更新的头部指针。\",\"主函数中的生产者和消费者\",\"int main() { LockFreeQueue<int> queue(10); // 启动生产者线程 std::thread producer([&queue]() { for (int i = 0; i < 20; ++i) { while (!queue.enqueue(i)) { // 如果队列已满，等待 } std::cout << \\\"Produced: \\\" << i << std::endl; } }); // 启动消费者线程 std::thread consumer([&queue]() { for (int i = 0; i < 20; ++i) { int item; while (!queue.dequeue(item)) { // 如果队列为空，等待 } std::cout << \\\"Consumed: \\\" << item << std::endl; } }); producer.join(); consumer.join(); return 0; }\",\"在 main 函数中，创建了一个 LockFreeQueue 对象 queue，容量为 10。\",\"生产者线程 producer 向队列中插入元素，使用 while (!queue.enqueue(i)) 检查插入操作是否成功。如果队列已满，线程会持续等待直到成功插入。\",\"消费者线程 consumer 从队列中取出元素，使用 while (!queue.dequeue(item)) 检查取出操作是否成功。如果队列为空，线程会持续等待直到成功取出元素。\",\"两个线程同时运行，生产者插入数据，消费者取出数据，并输出相应的信息。\",\"最后，通过 join() 等待线程完成，确保主线程在两个子线程结束后才退出。\"]},\"250\":{\"h\":\"\",\"t\":[\"memory_order_relaxed：用于没有数据依赖的地方，只要求操作是原子的，不需要同步内存顺序。适用于 load 和 store，如 tail.load(std::memory_order_relaxed)。\",\"memory_order_acquire：用于加载操作，以确保加载的结果及其后续的操作不会被重排序到 acquire 之前。适用于检查队列是否满或空，如 head.load(std::memory_order_acquire)。\",\"memory_order_release：用于存储操作，以确保在此之前的所有操作不会被重排序到 release 之后。适用于更新指针操作，如 tail.store(nextTail, std::memory_order_release)。\"]},\"251\":{\"c\":[\"面试题\"]},\"252\":{\"c\":[\"c++\",\"多线程\",\"线程同步\"]},\"253\":{\"h\":\"c++11 新特性\"},\"254\":{\"h\":\"新增线程编程相关模块\",\"t\":[\"相关信息\",\"c++11关于并发引入了好多好东西，这里按照如下顺序介绍：\",\"std::thread相关\",\"std::mutex相关\",\"std::lock相关\",\"std::atomic相关\",\"std::call_once相关\",\"std::condition_variable相关\",\"std::future相关\",\"async相关\"]},\"255\":{\"h\":\"std::thread相关\",\"t\":[\"c++11引入了std::thread来创建线程，支持对线程join或者detach。直接看代码：\",\"#include <iostream> #include <thread> using namespace std; int main() { auto func = []() { for (int i = 0; i < 10; ++i) { cout << i << \\\" \\\"; } cout << endl; }; std::thread t(func); if (t.joinable()) { t.detach(); } auto func1 = [](int k) { for (int i = 0; i < k; ++i) { cout << i << \\\" \\\"; } cout << endl; }; std::thread tt(func1, 20); if (tt.joinable()) { // 检查线程可否被join tt.join(); } return 0; }\",\"上述代码中，函数func和func1运行在线程对象t和tt中，从刚创建对象开始就会新建一个线程用于执行函数，调用join函数将会阻塞主线程，直到线程函数执行结束，线程函数的返回值将会被忽略。如果不希望线程被阻塞执行，可以调用线程对象的detach函数，表示将线程和线程对象分离。\",\"如果没有调用join或者detach函数，假如线程函数执行时间较长，此时线程对象的生命周期结束调用析构函数清理资源，这时可能会发生错误，这里有两种解决办法，一个是调用join()，保证线程函数的生命周期和线程对象的生命周期相同，另一个是调用detach()，将线程和线程对象分离，这里需要注意，如果线程已经和对象分离，那我们就再也无法控制线程什么时候结束了，不能再通过join来等待线程执行完。\",\"这里可以对thread进行封装，避免没有调用join或者detach可导致程序出错的情况出现：\",\"class ThreadGuard { public: enum class DesAction { join, detach }; ThreadGuard(std::thread&& t, DesAction a) : t_(std::move(t)), action_(a){}; ~ThreadGuard() { if (t_.joinable()) { if (action_ == DesAction::join) { t_.join(); } else { t_.detach(); } } } ThreadGuard(ThreadGuard&&) = default; ThreadGuard& operator=(ThreadGuard&&) = default; std::thread& get() { return t_; } private: std::thread t_; DesAction action_; }; int main() { ThreadGuard t(std::thread([]() { for (int i = 0; i < 10; ++i) { std::cout << \\\"thread guard \\\" << i << \\\" \\\"; } std::cout << std::endl;}), ThreadGuard::DesAction::join); return 0; }\",\"c++11还提供了获取线程id，或者系统cpu个数，获取thread native_handle，使得线程休眠等功能\",\"std::thread t(func); cout << \\\"当前线程ID \\\" << t.get_id() << endl; cout << \\\"当前cpu个数 \\\" << std::thread::hardware_concurrency() << endl; auto handle = t.native_handle();// handle可用于pthread相关操作 std::this_thread::sleep_for(std::chrono::seconds(1));\"]},\"256\":{\"h\":\"std::mutex相关\",\"t\":[\"std::mutex是一种线程同步的手段，用于保存多线程同时操作的共享数据。\",\"mutex分为四种：\",\"std::mutex：独占的互斥量，不能递归使用，不带超时功能\",\"std::recursive_mutex：递归互斥量，可重入，不带超时功能\",\"std::timed_mutex：带超时的互斥量，不能递归\",\"std::recursive_timed_mutex：带超时的互斥量，可以递归使用\",\"拿一个std::mutex和std::timed_mutex举例吧，别的都是类似的使用方式：\",\"std::mutex: #include <iostream> #include <mutex> #include <thread> using namespace std; std::mutex mutex_; int main() { auto func1 = [](int k) { mutex_.lock(); for (int i = 0; i < k; ++i) { cout << i << \\\" \\\"; } cout << endl; mutex_.unlock(); }; std::thread threads[5]; for (int i = 0; i < 5; ++i) { threads[i] = std::thread(func1, 200); } for (auto& th : threads) { th.join(); } return 0; } std::timed_mutex: #include <iostream> #include <mutex> #include <thread> #include <chrono> using namespace std; std::timed_mutex timed_mutex_; int main() { auto func1 = [](int k) { timed_mutex_.try_lock_for(std::chrono::milliseconds(200)); for (int i = 0; i < k; ++i) { cout << i << \\\" \\\"; } cout << endl; timed_mutex_.unlock(); }; std::thread threads[5]; for (int i = 0; i < 5; ++i) { threads[i] = std::thread(func1, 200); } for (auto& th : threads) { th.join(); } return 0; }\"]},\"257\":{\"h\":\"std::lock相关\",\"t\":[\"这里主要介绍两种RAII方式的锁封装，可以动态的释放锁资源，防止线程由于编码失误导致一直持有锁。\",\"c++11主要有std::lock_guard和std::unique_lock两种方式，使用方式都类似，如下：\",\"#include <iostream> #include <mutex> #include <thread> #include <chrono> using namespace std; std::mutex mutex_; int main() { auto func1 = [](int k) { // std::lock_guard<std::mutex> lock(mutex_); std::unique_lock<std::mutex> lock(mutex_); for (int i = 0; i < k; ++i) { cout << i << \\\" \\\"; } cout << endl; }; std::thread threads[5]; for (int i = 0; i < 5; ++i) { threads[i] = std::thread(func1, 200); } for (auto& th : threads) { th.join(); } return 0; }\",\"std::lock_gurad相比于std::unique_lock更加轻量级，少了一些成员函数，std::unique_lock类有unlock函数，可以手动释放锁，所以条件变量都配合std::unique_lock使用，而不是std::lock_guard，因为条件变量在wait时需要有手动释放锁的能力，具体关于条件变量后面会讲到。\"]},\"258\":{\"h\":\"std::atomic相关\",\"t\":[\"c++11提供了原子类型 std::atomic<T>，理论上这个T可以是任意类型，但是我平时只存放整形，别的还真的没用过，整形有这种原子变量已经足够方便，就不需要使用std::mutex来保护该变量啦。看一个计数器的代码：\",\"struct OriginCounter { // 普通的计数器 int count; std::mutex mutex_; void add() { std::lock_guard<std::mutex> lock(mutex_); ++count; } void sub() { std::lock_guard<std::mutex> lock(mutex_); --count; } int get() { std::lock_guard<std::mutex> lock(mutex_); return count; } }; struct NewCounter { // 使用原子变量的计数器 std::atomic<int> count; void add() { ++count; // count.store(++count);这种方式也可以 } void sub() { --count; // count.store(--count); } int get() { return count.load(); } };\"]},\"259\":{\"h\":\"std::call_once相关\",\"t\":[\"c++11提供了std::call_once来保证某一函数在多线程环境中只调用一次，它需要配合std::once_flag使用，直接看使用代码吧：\",\"std::once_flag onceflag; void CallOnce() { std::call_once(onceflag, []() { cout << \\\"call once\\\" << endl; }); } int main() { std::thread threads[5]; for (int i = 0; i < 5; ++i) { threads[i] = std::thread(CallOnce); } for (auto& th : threads) { th.join(); } return 0; }\"]},\"260\":{\"h\":\"std::condition_variable相关\",\"t\":[\"条件变量是c++11引入的一种同步机制，它可以阻塞一个线程或者个线程，直到有线程通知或者超时才会唤醒正在阻塞的线程，条件变量需要和锁配合使用，这里的锁就是上面介绍的std::unique_lock。\",\"这里使用条件变量实现一个CountDownLatch：\",\"class CountDownLatch { public: explicit CountDownLatch(uint32_t count) : count_(count); void CountDown() { std::unique_lock<std::mutex> lock(mutex_); --count_; if (count_ == 0) { cv_.notify_all(); } } void Await(uint32_t time_ms = 0) { std::unique_lock<std::mutex> lock(mutex_); while (count_ > 0) { if (time_ms > 0) { cv_.wait_for(lock, std::chrono::milliseconds(time_ms)); } else { cv_.wait(lock); } } } uint32_t GetCount() const { std::unique_lock<std::mutex> lock(mutex_); return count_; } private: std::condition_variable cv_; mutable std::mutex mutex_; uint32_t count_ = 0; };\",\"关于条件变量其实还涉及到通知丢失和虚假唤醒问题，因为不是本文的主题，这里暂不介绍，大家有需要可以留言。\"]},\"261\":{\"h\":\"std::future相关\",\"t\":[\"c++11关于异步操作提供了future相关的类，主要有std::future、std::promise和std::packaged_task，std::future比std::thread高级些，std::future作为异步结果的传输通道，通过get()可以很方便的获取线程函数的返回值，std::promise用来包装一个值，将数据和future绑定起来，而std::packaged_task则用来包装一个调用对象，将函数和future绑定起来，方便异步调用。而std::future是不可以复制的，如果需要复制放到容器中可以使用std::shared_future。\",\"std::promise与std::future配合使用\",\"#include <functional> #include <future> #include <iostream> #include <thread> using namespace std; void func(std::future<int>& fut) { int x = fut.get(); cout << \\\"value: \\\" << x << endl; } int main() { std::promise<int> prom; std::future<int> fut = prom.get_future(); std::thread t(func, std::ref(fut)); prom.set_value(144); t.join(); return 0; }\",\"std::packaged_task与std::future配合使用\",\"#include <functional> #include <future> #include <iostream> #include <thread> using namespace std; int func(int in) { return in + 1; } int main() { std::packaged_task<int(int)> task(func); std::future<int> fut = task.get_future(); std::thread(std::move(task), 5).detach(); cout << \\\"result \\\" << fut.get() << endl; return 0; }\",\"三者之间的关系:\",\"std::future用于访问异步操作的结果，而std::promise和std::packaged_task在future高一层，它们内部都有一个future;\",\"promise包装的是一个值，packaged_task包装的是一个函数，当需要获取线程中的某个值，可以使用std::promise，当需要获取线程函数返回值，可以使用std::packaged_task。\"]},\"262\":{\"h\":\"async相关\",\"t\":[\"async是比future，packaged_task，promise更高级的东西，它是基于任务的异步操作，通过async可以直接创建异步的任务，返回的结果会保存在future中，不需要像packaged_task和promise那么麻烦，关于线程操作应该优先使用async，看一段使用代码：\",\"#include <functional> #include <future> #include <iostream> #include <thread> using namespace std; int func(int in) { return in + 1; } int main() { auto res = std::async(func, 5); // res.wait(); cout << res.get() << endl; // 阻塞直到函数返回 return 0; }\",\"async具体语法如下：\",\"async(std::launch::async | std::launch::deferred, func, args...);\",\"第一个参数是创建策略：\",\"std::launch::async表示任务执行在另一线程\",\"std::launch::deferred表示延迟执行任务，调用get或者wait时才会执行，不会创建线程，惰性执行在当前线程。\",\"如果不明确指定创建策略，以上两个都不是async的默认策略，而是未定义，它是一个基于任务的程序设计，内部有一个调度器(线程池)，会根据实际情况决定采用哪种策略。\",\"若从 std::async 获得的 std::future 未被移动或绑定到引用，则在完整表达式结尾， std::future的析构函数将阻塞直至异步计算完成，实际上相当于同步操作：\",\"std::async(std::launch::async, []{ f(); }); // 临时量的析构函数等待 f() std::async(std::launch::async, []{ g(); }); // f() 完成前不开始\",\"注意：关于async启动策略这里网上和各种书籍介绍的五花八门，这里会以cppreference为主。\",\"• 有时候我们如果想真正执行异步操作可以对async进行封装，强制使用std::launch::async策略来调用async。\",\"template <typename F, typename... Args> inline auto ReallyAsync(F&& f, Args&&... params) { return std::async(std::launch::async, std::forward<F>(f), std::forward<Args>(params)...); }\",\"总结\",\"std::thread使线程的创建变得非常简单，还可以获取线程id等信息。\",\"std::mutex通过多种方式保证了线程安全，互斥量可以独占，也可以重入，还可以设置互斥量的超时时间，避免一直阻塞等锁。\",\"std::lock通过RAII技术方便了加锁和解锁调用，有std::lock_guard和std::unique_lock。\",\"std::atomic提供了原子变量，更方便实现实现保护，不需要使用互斥量\",\"std::call_once保证函数在多线程环境下只调用一次，可用于实现单例。\",\"std::condition_variable提供等待的同步机制，可阻塞一个或多个线程，等待其它线程通知后唤醒。\",\"std::future用于异步调用的包装和返回值。\",\"async更方便的实现了异步调用，异步调用优先使用async取代创建线程。\"]},\"263\":{\"h\":\"性能优化\"},\"264\":{\"h\":\"\",\"t\":[\"相关信息\",\"智能指针是为没有垃圾回收机制的语言解决可能的内存泄露问题的利器，但是在实际应用中使用智能指针有一些需要注意的地方，好在这些问题都可以解决。\",\"shared_ptr 和 unqi_ptr 使用时如何选择：如果希望只有一个智能指针管理资源或者管理数组，可以用 uniq_ptr；如果希望多个智能指针管理同一个资源，可以用 shared_ptr。\",\"weak_ptr 是 shared_ptr 的助手，只是监视 shared_ptr 管理的资源是否被释放，本身并不操作或者管理资源。用于解决 shared_ptr 循环引用和返回 this 指针的问题\",\"智能指针线程安全\"]},\"265\":{\"h\":\"\",\"t\":[\"实现原理：采用引用计数器的方法，允许多个智能指针指向同一个对象，每当多一个指针指向该对象时，指向该对象的所有智能指针内部的引用计数加1，每当减少一个智能指针指向对象时，引用计数会减1，当计数为0的时候会自动的释放动态分配的资源。\",\"智能指针将一个计数器与类指向的对象相关联，引用计数器跟踪共有多少个类对象共享同一指针\",\"每次创建类的新对象时，初始化指针并将引用计数置为1\",\"当对象作为另一对象的副本而创建时，拷贝构造函数拷贝指针并增加与之相应的引用计数\",\"对一个对象进行赋值时，赋值操作符减少左操作数所指对象的引用计数（如果引用计数为减至0，则删除对象），并增加右操作数所指对象的引用计数\",\"调用析构函数时，构造函数减少引用计数（如果引用计数减至0，则删除基础对象）\"]},\"266\":{\"h\":\"\",\"t\":[\"unique_ptr采用的是独享所有权语义，一个非空的unique_ptr总是拥有它所指向的资源。转移一个unique_ptr将会把所有权全部从源指针转移给目标指针，源指针被置空；所以unique_ptr不支持普通的拷贝和赋值操作，不能用在STL标准容器中；局部变量的返回值除外（因为编译器知道要返回的对象将要被销毁）；如果你拷贝一个unique_ptr，那么拷贝结束后，这两个unique_ptr都会指向相同的资源，造成在结束时对同一内存指针多次释放而导致程序崩溃。\"]},\"267\":{\"h\":\"\",\"t\":[\"weak_ptr：弱引用。引用计数有一个问题就是互相引用形成环（环形引用），这样两个指针指向的内存都无法释放。需要使用weak_ptr打破环形引用。weak_ptr是一个弱引用，它是为了配合shared_ptr而引入的一种智能指针，它指向一个由shared_ptr管理的对象而不影响所指对象的生命周期，也就是说，它只引用，不计数。如果一块内存被shared_ptr和weak_ptr同时引用，当所有shared_ptr析构了之后，不管还有没有weak_ptr引用该内存，内存也会被释放。所以weak_ptr不保证它指向的内存一定是有效的，在使用之前使用函数lock()检查weak_ptr是否为空指针。\"]},\"268\":{\"h\":\"和\",\"t\":[\"移动构造函数 + std::move: 减少内存拷贝\",\"#include <iostream> using namespace std; struct A { A(){cout<<\\\"construct\\\"<<endl;} A(const A& a){cout<<\\\"copy construct\\\" <<endl;} ~A(){cout<<\\\"destruct\\\"<<endl;} }; A GetA(){ return A();} int main() { /* 在没有返回值优化的情况下，拷贝构造函数调用了两次，一次是GetA（）函数内部创建的对象返回后构造一个临时对象产生的，另一次是在main函数中构造a对象产生的。第二次的destruct是因为临时对象在构造a对象之后就销毁了 */ A a = GetA(); /* 通过右值引用，比之前少了一次拷贝构造和一次析构，原因在于右值引用绑定了右值，让临时右值的生命周期延长了。我们可以利用这个特点做一些性能优化，即避免临时对象的拷贝构造和析构 */ //A&& a = GetA(); return 0; }\",\"[root@centos7 c++]# g++ test.cpp [root@centos7 c++]# ./a.out construct destruct [root@centos7 c++]# g++ test.cpp -fno-elide-constructors [root@centos7 c++]# ./a.out construct copy construct destruct copy construct destruct destruct [root@centos7 c++]# g++ test.cpp -fno-elide-constructors [root@centos7 c++]# ./a.out construct copy construct destruct destruct\"]},\"269\":{\"h\":\"容器新增 操作减少内存拷贝和移动\",\"t\":[\"#include <vector> #include <map> #include <string> #include <iostream> using namespace std; struct Complicated { int year; std::string name; Complicated(int a, string c):year(a),name(c) { cout<<\\\"is constucted\\\"<<endl; } Complicated(const Complicated&other):year(other.year),name(std::move(other.name)) { cout<<\\\"is moved\\\"<<endl; } }; int main() { std::map<int, Complicated> m; int anInt = 4; std::string aString = \\\"C++\\\"; cout<<\\\"—insert--\\\"<<endl; m.insert(std::make_pair(4, Complicated(anInt, aString))); cout<<\\\"—emplace--\\\"<<endl; // should be easier for the optimizer m.emplace(4, Complicated(anInt, aString)); cout<<\\\"--emplace_back--\\\"<<endl; vector<Complicated> v; v.emplace_back(anInt, aString); cout<<\\\"--push_back--\\\"<<endl; v.push_back(Complicated(anInt, aString)); return 0; }\",\"[root@centos7 c++]# ./a.out —insert-- is constucted is moved is moved —emplace-- is constucted is moved --emplace_back-- is constucted --push_back-- is constucted is moved is moved\"]},\"270\":{\"h\":\"语法糖\"},\"271\":{\"h\":\"\",\"t\":[\" template<class... Types> void f(Types... args); f(); // OK: args contains no arguments f(1); // OK: args contains one argument: int f(2, 1.0); // OK: args contains two arguments: int and double\"]},\"272\":{\"h\":\"\",\"t\":[\" auto x = 5; // OK: x has type int const auto *v = &x, u = 6; // OK: v has type const int*, u has type const int static auto y = 0.0; // OK: y has type double\"]},\"273\":{\"h\":\"\",\"t\":[\" std::vector<int> v = {0, 1, 2, 3, 4, 5}; for (const int& i : v) // access by const reference std::cout << i << ' ';\"]},\"274\":{\"h\":\"\",\"t\":[\"auto f = [&](int)->void{}; f();\"]},\"275\":{\"h\":\"\",\"t\":[\"#include <iostream> int main() { enum class Color { red, green = 20, blue }; Color r = Color::blue; switch(r) { case Color::red : std::cout << \\\"red\\\\n\\\"; break; case Color::green: std::cout << \\\"green\\\\n\\\"; break; case Color::blue : std::cout << \\\"blue\\\\n\\\"; break; } // int n = r; // error: no implicit conversion from scoped enum to int int n = static_cast<int>(r); // OK, n = 21 std::cout << n << '\\\\n'; // prints 21 }\"]},\"276\":{\"c\":[\"面试题\"]},\"277\":{\"c\":[\"c++11\",\"多线程\",\"线程同步\"]},\"278\":{\"h\":\"编程语言\"},\"279\":{\"c\":[\"面试题\"]},\"280\":{\"h\":\"Linux 常用命令\"},\"281\":{\"c\":[\"Linux\",\"命令\"]},\"282\":{\"h\":\"constexpr 实现编译时加密\",\"t\":[\"介绍一种利用 constexpr 实现编译时加密，运行时解密的方法。本文将介绍这一技术，并展示一个具体的实现示例。\",\"提示\",\"逆向工程常通过执行文件的中静态字符串信息找到关键点函数进行逆向，编译时加密可以一定程度上避免这个问题。\"]},\"283\":{\"h\":\"？\",\"t\":[\"constexpr 是 C++11 引入的一个关键字，允许我们在编译时计算表达式的值。这意味着某些计算可以在编译时完成，从而提高运行时性能。在我们的例子中，我们使用 constexpr 实现编译时加密。\"]},\"284\":{\"h\":\"编译时加密与运行时解密的工作原理\",\"t\":[\"我们通过定义一个 constexpr 函数来实现字符的加密和解密。然后，使用模板类在编译时对字符串进行加密，并在运行时对其进行解密。这样，敏感信息在编译时就被加密，从而不会以明文形式出现在可执行文件中。\"]},\"285\":{\"h\":\"实现示例\",\"t\":[\"以下是一个完整的实现示例：\",\"#include <iostream> // 用于字符加密和解密的constexpr函数 constexpr char xor_character(char c, unsigned key) { return c ^ key; } // 模板类用于编译时加密和运行时解密 template<unsigned SIZE> class EncryptString { public: // 构造函数在编译时对字符串进行加密 constexpr EncryptString(const char* raw_str) { for(unsigned i = 0; i < SIZE - 1; ++i) { m_data[i] = xor_character(raw_str[i], i); } m_data[SIZE - 1] = 0; // 添加字符串结束符 } // 解密函数在运行时对字符串进行解密 char* decrypt() const { unsigned i = 0; for(; i < SIZE-1; ++i) { m_data[i] = xor_character(m_data[i], i); } m_data[SIZE-1] = 0; // 添加字符串结束符 return m_data; } private: mutable char m_data[SIZE]={'\\\\0'}; }; // 宏定义用于简化加密字符串的使用 #define PROTECTED_STR(str) []{ \\\\ constexpr EncryptString<sizeof(str)> e(str);\\\\ std::cout << e.decrypt() << std::endl;\\\\ }() int main() { PROTECTED_STR(\\\"heng\\\");//编译后的执行文件中不存在‘heng’ 关键字符串信息 // std::cout << \\\"heng\\\" << std::endl;// 编译后的执行文件包含有 ‘heng’ 关键字符串信息，提供逆袭的信息点 return 0; }\"]},\"286\":{\"h\":\"代码详解\",\"t\":[\"xor_character 函数:\",\"使用 XOR 操作对字符进行加密和解密。密钥是字符的位置索引。\",\"EncryptString 类:\",\"模板类，用于在编译时加密字符串。\",\"构造函数通过 xor_character 函数对输入字符串进行加密，并存储在 m_data 数组中。\",\"decrypt 函数在运行时对字符串进行解密。\",\"PROTECTED_STR 宏:\",\"利用 lambda 表达式和 constexpr 特性，简化加密字符串的使用。\",\"在运行时对加密的字符串进行解密并返回。\",\"main 函数:\",\"演示如何使用 PROTECTED_STR 宏来加密和解密字符串，并将解密后的字符串输出。\",\"利用 constexpr 实现编译时加密和运行时解密是一种有效保护敏感信息的方法。本文展示了该技术的一个具体实现示例，并详细解释了其工作原理。通过这种方式，可以提高应用程序的安全性，避免给逆向提供敏感信息点。\"]},\"287\":{\"c\":[\"其他\"]},\"288\":{\"c\":[\"c++\",\"constexpr\",\"逆向\"]},\"289\":{\"h\":\"tcp 连接状态\",\"t\":[\"TCP连接的状态图（TCP Connection State Diagram）展示了TCP协议在建立连接、传输数据、关闭连接过程中可能的状态及其转换。了解这些状态对于网络调试、性能优化和网络编程都非常有帮助。\"]},\"290\":{\"h\":\"TCP状态图解释\",\"t\":[\"在TCP连接的生命周期中，有多个状态，以下是主要的TCP连接状态及其转换：\",\"CLOSED: 初始状态，表示套接字没有被使用或已经关闭。\",\"LISTEN: 服务器套接字正在监听连接请求。这个状态通常由服务器处于被动打开（Passive Open）状态时进入。\",\"SYN-SENT: 客户端在发送SYN（同步）包后进入这个状态，等待服务器的SYN-ACK。表示主动打开（Active Open）的一端已经发送了连接请求。\",\"SYN-RECEIVED: 服务器在接收到客户端的SYN包后，发送SYN-ACK，并进入这个状态，等待客户端的ACK确认。\",\"ESTABLISHED: 表示连接已经建立，数据可以在客户端和服务器之间双向传输。这个是正常的数据传输状态。\",\"FIN-WAIT-1: 连接的主动关闭方（通常是客户端）发送FIN（结束）包后进入这个状态，等待对方的ACK。\",\"FIN-WAIT-2: 主动关闭方接收到ACK后，进入这个状态，等待对方发送FIN包。\",\"CLOSE-WAIT: 被动关闭方接收到FIN包后，进入这个状态，等待应用程序关闭连接。\",\"CLOSING: 在极少见的情况下，双方同时发送FIN包时会进入这个状态，等待对方的ACK。\",\"LAST-ACK: 被动关闭方在发送ACK并等待对方确认后进入这个状态。\",\"TIME-WAIT: 主动关闭方在发送最后的ACK后，进入这个状态，确保对方收到了ACK，防止旧数据包干扰，保持这个状态2倍的最大报文段寿命时间（通常是2分钟）。\",\"CLOSED: 所有资源释放后，连接彻底关闭，返回到初始状态。\"]},\"291\":{\"h\":\"状态转换图\",\"t\":[\"以下是TCP连接状态的转换图：\"]},\"292\":{\"h\":\"状态转换的简要说明\",\"t\":[\"CLOSED 到 LISTEN： 服务器调用listen()函数进入LISTEN状态，准备接受连接。\",\"SYN-SENT： 客户端调用connect()后发送SYN包，进入SYN-SENT状态。\",\"SYN-RECEIVED： 服务器接收到SYN包后，回复SYN-ACK，并进入SYN-RECEIVED状态。\",\"ESTABLISHED： 双方都接收到对方的确认包后，进入ESTABLISHED状态，开始数据传输。\",\"FIN-WAIT-1： 主动关闭方发送FIN包后进入FIN-WAIT-1状态。\",\"CLOSE-WAIT： 被动关闭方接收到FIN包后进入CLOSE-WAIT状态，等待应用程序关闭连接。\",\"LAST-ACK： 被动关闭方在发送ACK包后进入LAST-ACK状态，等待最后的确认。\",\"TIME-WAIT： 主动关闭方在发送最后的ACK包后进入TIME-WAIT状态，确保对方接收并释放资源。\"]},\"293\":{\"h\":\"状态的作用\",\"t\":[\"LISTEN： 服务器等待连接请求的状态。\",\"SYN-SENT/SYN-RECEIVED： 建立连接时的握手状态，确保双方都准备好通信。\",\"ESTABLISHED： 连接已建立，数据可以传输。\",\"FIN-WAIT-1/FIN-WAIT-2/CLOSE-WAIT/LAST-ACK/TIME-WAIT： 连接关闭时的状态，确保所有数据正确传输，并正确关闭连接。\"]},\"294\":{\"h\":\"总结\",\"t\":[\"TCP连接状态图详细展示了从连接建立到数据传输，再到连接关闭的整个过程。理解这些状态对于调试网络问题、优化应用程序性能、设计健壮的网络服务非常重要。通过分析TCP连接的状态，可以识别出哪些连接处于非正常状态，并采取相应的措施来修复或优化。\"]},\"295\":{\"c\":[\"其他\"]},\"296\":{\"c\":[\"tcp\"]},\"297\":{\"h\":\"waitpid\",\"t\":[\"waitpid 是 Unix/Linux 系统中用于等待子进程状态变化的系统调用。它允许父进程挂起执行，直到指定的子进程终止或者发生了其他指定的状态变化。\"]},\"298\":{\"h\":\"的语法\",\"t\":[\"pid_t waitpid(pid_t pid, int *status, int options);\",\"pid: 要等待的子进程的进程 ID，特殊值如下：\",\"pid > 0: 等待进程 ID 为 pid 的特定子进程。\",\"pid == 0: 等待任何属于与调用进程相同进程组的子进程。\",\"pid < -1: 等待进程组 ID 等于 |pid| 的任何子进程。\",\"pid == -1: 等待任何子进程，即等效于 wait()。\",\"status: 指向一个 int 变量的指针，用于保存子进程的终止状态。\",\"options: 可以是 0 或者下列标志的组合：\",\"WNOHANG: 如果没有子进程退出或状态变化，则立即返回，而不阻塞。\",\"WUNTRACED: 当一个子进程停止（例如被 SIGSTOP 信号停止）时返回其状态，而不是等到子进程终止。\",\"WCONTINUED: 如果子进程在接收到 SIGCONT 信号后继续运行，并且其状态尚未报告，则返回其状态。\"]},\"299\":{\"h\":\"的返回值\",\"t\":[\"成功时，返回等待的子进程的 PID。\",\"如果设置了 WNOHANG 且没有立即可用的子进程终止状态，则返回 0。\",\"失败时，返回 -1，并设置 errno 以指示错误。\"]},\"300\":{\"h\":\"变量解释\",\"t\":[\"status 变量是一个整数，包含子进程的状态信息。可以使用一系列宏来解析这个状态值：\",\"WIFEXITED(status)：如果子进程正常终止，则返回非零值。\",\"WEXITSTATUS(status)：如果子进程正常终止，返回子进程的退出状态码。\",\"WIFSIGNALED(status)：如果子进程因信号终止，则返回非零值。\",\"WTERMSIG(status)：如果子进程因信号终止，返回导致终止的信号编号。\",\"WIFSTOPPED(status)：如果子进程处于停止状态，则返回非零值。\",\"WSTOPSIG(status)：如果子进程处于停止状态，返回导致停止的信号编号。\",\"WIFCONTINUED(status)：如果子进程已继续执行，则返回非零值（使用 WCONTINUED 标志时）。\"]},\"301\":{\"h\":\"示例代码\",\"t\":[\"以下是一个使用 waitpid 等待子进程终止的示例代码：\",\"#include <iostream> #include <sys/wait.h> #include <unistd.h> int main() { pid_t pid = fork(); if (pid == 0) { // 子进程代码 std::cout << \\\"Child process running, PID: \\\" << getpid() << std::endl; sleep(2); // 模拟一些工作 std::cout << \\\"Child process terminating\\\" << std::endl; return 42; // 子进程的退出状态码 } else if (pid > 0) { // 父进程代码 int status; pid_t result = waitpid(pid, &status, 0); // 等待子进程终止 if (result == -1) { std::cerr << \\\"waitpid failed\\\" << std::endl; } else { std::cout << \\\"Child process \\\" << result << \\\" terminated\\\" << std::endl; if (WIFEXITED(status)) { std::cout << \\\"Child exited with status: \\\" << WEXITSTATUS(status) << std::endl; } else if (WIFSIGNALED(status)) { std::cout << \\\"Child killed by signal: \\\" << WTERMSIG(status) << std::endl; } else if (WIFSTOPPED(status)) { std::cout << \\\"Child stopped by signal: \\\" << WSTOPSIG(status) << std::endl; } else if (WIFCONTINUED(status)) { std::cout << \\\"Child continued\\\" << std::endl; } } } else { std::cerr << \\\"fork failed\\\" << std::endl; } return 0; }\"]},\"302\":{\"h\":\"代码解释\",\"t\":[\"fork(): 创建一个子进程。pid 为 0 表示子进程，在子进程中执行特定代码。pid 为正表示父进程，父进程等待子进程结束。\",\"waitpid(pid, &status, 0): 父进程调用 waitpid 等待子进程终止，并获取其退出状态。\",\"WIFEXITED(status): 检查子进程是否正常退出。如果是，WEXITSTATUS(status) 将返回子进程的退出状态码。\",\"WIFSIGNALED(status): 检查子进程是否被信号终止。如果是，WTERMSIG(status) 将返回导致子进程终止的信号编号。\"]},\"303\":{\"h\":\"的常见应用\",\"t\":[\"管理多个子进程：waitpid 可以与 WNOHANG 选项一起使用，用于轮询多个子进程的状态，适合管理并发运行的子进程。\",\"处理特定子进程：通过传递特定的 PID，waitpid 可以用于等待和管理某个特定子进程的状态变化。\",\"防止僵尸进程：父进程使用 waitpid 回收子进程的退出状态，可以防止僵尸进程的产生。\"]},\"304\":{\"h\":\"总结\",\"t\":[\"waitpid 是一个强大的系统调用，允许父进程灵活地等待和处理子进程的状态变化。通过正确使用 waitpid，可以有效地管理并发进程，处理子进程的终止状态，防止僵尸进程。\"]},\"305\":{\"c\":[\"其他\"]},\"306\":{\"c\":[\"linux\"]},\"307\":{\"h\":\"梳理下在工作中使用到的设计模式\"},\"308\":{\"h\":\"，模版方法\",\"t\":[\" class Wave { public: //模版方法，draw 的流程基本固定，但是某些步骤的细节部分由子类实现 void draw(const DrawOption& op) { beginDraw(op); doDraw(op);// 具体绘制延后到子类实现 endDraw(); } protected: // 抽象方法, 具体的绘制由子类实现 virtual void doDraw(const DrawOption&) = 0; private: void beginDraw(const drawOption& op) { // do something } void endDraw() { } }; class BitWav : public Wave { protected: void doDraw(const DrawOption& op) override { // draw bit wave } }; class BusWav : public Wave { protected: void doDraw(const DrawOption& op) override { // draw bus wave } }; //策略模式, 将波形绘制配置的初始化逻辑抽象出来，由子类实现具体的设置逻辑 class WaveStyle { public: virtual void initDrawOption(DrawOption& op) const = 0; }; class DarkWaveStyle : public WaveStyle { public: void initDrawOption(DrawOption& op) const override { //do something 用dark style 初始化op } }; class LightWaveStyle : public WaveStyle { public: virtual void initDrawOption(DrawOption& op) const override { //do something light style 初始化op } }; class Cavas { public: void drawWaves() { auto& waves = getWaves(); //策略模式 for (auto& wave : waves) { DrawOption op;// 绘制参数 color, width, ... //根据装载的mStyle 初始化绘制参数op mstlye->initDrawOption(op); wave->draw(op); } } void setWaveStyle(WaveStyle* style) { mStyle = style; } private: WaveStyle* mStyle = nullptr; };\"]},\"309\":{\"h\":\"工厂方法模式 + 内存池 用于创建频繁的对象\",\"t\":[\"class Signal { public: static Signal* create(const SignalOption& op) { // do something 从内存中申请一个对象，并初始化 void* mem = pool->malloc(sizeof(Signal)); new (mem) Signal(op); return (Signal*)mem; } }; class Scope { public: static Scope* create(const ScopeOption& op) { // do something 从内存中申请一个对象，并初始化 void* mem = pool->malloc(sizeof(Scope)); new (mem) Scope(op); return (Scope*)mem; } };\"]},\"310\":{\"h\":\"，实现preference 配置更改的更新\",\"t\":[\"class Preference { public: class PreferenceObserver { public: virtual void update() = 0; }; void setValue(float value) { if (mValue != value) { mValue = value; notifyObservers(); } } void addObserver(PreferenceObserver* observer) { mObservers.push_back(observer); } void notifyObservers() { for (auto& observer : mObservers) { observer->update(); } } private: std::vector<PreferenceObserver*> mObservers; int mValue; };\"]},\"311\":{\"h\":\"，将任务逻辑和浏览器实现进行分离\",\"t\":[\"class Browser { public: virtual void play(const Option& script) = 0; }; class ChromeBrowser : public Browser { public: void play(const Option& script) override { // do something } }; class IEBrower : public Browser { public: void play(const Option& script) override { // do something } }; class Task { public: void setBrowser(Browser* browser) { // do something mBrowser = browser; } virtual void run() = 0; protected: Browser* mBrowser = nullptr; }; class WebTask : public Task { public: void run() override { // do something auto script = getScript(); mBrower->play(script); // do something 数据处理 } }; class VideoTask : public Task { public: void run() override { // do something auto url = getVideoURL(); mBrower->play(url); // do something 数据处理 } }; class TaskManager { public: void runTasks() { //根据配置 task 装载不同 browser 做具体的浏览操作 //桥接模式： 分离任务逻辑和执行实现 for (auto& task : mTaskList) { if (useIE) { task->setBrower(new IEBrowser); } else { task->setBrower(new Chrome); } task->run(); } } private: std::vector<Task*> mTaskList; };\"]},\"312\":{\"c\":[\"其他\"]},\"313\":{\"c\":[\"设计模式\"]},\"314\":{\"h\":\"利用QEMU+GDB调试Linux内核\",\"t\":[\"使用 QEMU 和 GDB 调试 Linux 内核是一种非常强大的方法，可以帮助开发人员调试和分析内核的行为。下面将详细介绍如何设置和使用 QEMU 和 GDB 来调试 Linux 内核。\"]},\"315\":{\"h\":\"环境准备\",\"t\":[\"系统环境\",\"22.04.3-Ubuntu\",\"gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\",\"GNU gdb (Ubuntu 12.1-0ubuntu1~22.04.2) 12.1\"]},\"316\":{\"h\":\"编译 Linux 内核源码\",\"t\":[\"# 获取 Linux 内核源码 wget https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.10.6.tar.xz # 解压 tar -xvf linux-6.10.6.tar.xz cd linux-6.10.6 # 配置内核（使用默认配置） make defconfig #运行结束生成 .config 文件在当前目录 # 生成调试符号并编译内核 make -j$(nproc) vmlinux # 拷贝编译好的镜像备用 cp vmlinux ../ cp arch/x86/boot/bzImage ../\",\"提示\",\"vmlinux: 一个包含调试符号的未压缩内核映像，GDB 调试时会用到它,在当前目录linux-6.10.6\",\"bzImage: 编译后的镜像 bzImage, 路径： linux-6.10.6/arch/x86/boot/bzImage\"]},\"317\":{\"h\":\"启动文件系统制作\",\"t\":[\"wget https://busybox.net/downloads/busybox-1.36.1.tar.bz2 tar -xvf busybox-1.36.1.tar.bz2 cd busybox-1.36.1 make menuconfig #-> Settings # --- Build Options # [*] Build static binary (no shared libs) #进行静态编译 (CONFIG_STATIC) # 安装完成后生成的相关文件会在 _install 目录下 make && make install #busybox-1.36.1/_install cd _install mkdir proc mkdir sys # init 为内核启动的初始化程序, 内容在下面 vim init # 必须设置成可执行文件 chmod +x init # 打包启动的文件系统 find . | cpio -o --format=newc > ../../rootfs.img\",\"init 文件内容\",\"#!/bin/sh echo \\\"{==DBG==} INIT SCRIPT\\\" mkdir /tmp mount -t proc none /proc mount -t sysfs none /sys mount -t debugfs none /sys/kernel/debug mount -t tmpfs none /tmp mdev -s echo -e \\\"{==DBG==} Boot took $(cut -d' ' -f1 /proc/uptime) seconds\\\" # normal user setsid /bin/cttyhack setuidgid 1000 /bin/sh\"]},\"318\":{\"h\":\"安装 QEMU\",\"t\":[\"apt install qemu qemu-utils qemu-kvm virt-manager libvirt-daemon-system libvirt-clients bridge-utils\"]},\"319\":{\"h\":\"使用 QEMU 启动内核\",\"t\":[\"提示\",\"确保已经安装QEMU\",\"确保以下文件准备好： \",\"rootfs.img\",\"bzImage\",\"vmlinux\",\"使用 QEMU 启动内核，并开启 QEMU 的 GDB 远程调试功能。\",\"#ls 当前目录文件 #busybox-1.36.1 #busybox-1.36.1.tar.bz2 #rootfs.img #bzImage #vmlinux #linux-6.10.6 #linux-6.10.6.tar.xz qemu-system-x86_64 -kernel ./bzImage -initrd ./rootfs.img -append \\\"nokaslr console=ttyS0\\\" -s -S -nographic\",\"参数说明\",\"-kernel ./bzImage：指定启用的内核镜像；\",\"-initrd ./rootfs.img：指定启动的文件系统；\",\"-append \\\"nokaslr console=ttyS0\\\" ：附加参数，其中 nokaslr 参数必须添加进来，防止内核起始地址随机化，这样会导致 gdb 断点不能命中；\",\"-s ：监听在 gdb 1234 端口；\",\"-S ：表示启动后就挂起，等待 gdb 连接；\",\"-nographic：不启动图形界面，调试信息输出到终端与参数 console=ttyS0 组合使用\",\"此时，QEMU 已经启动并等待 GDB 的连接，CPU 被暂停。\"]},\"320\":{\"h\":\"使用 GDB 调试内核\",\"t\":[\"在另一个终端中启动 GDB，加载 vmlinux 文件（未压缩的内核映像），以便使用调试符号。\",\"gdb vmlinux\",\"在 GDB 中，使用 target remote 命令连接到 QEMU 提供的 GDB 服务器：\",\"(gdb) target remote :1234\",\"此时，GDB 已经连接到 QEMU，并可以控制虚拟机的执行。可以在内核的特定位置设置断点，并开始调试。例如，可以设置断点在 start_kernel 函数：\",\"(gdb) b start_kernel\",\"然后使用 continue 命令继续运行内核：\",\"(gdb) c\",\"当内核运行到 start_kernel 时，GDB 会暂停并命中断点，接下来你可以逐步执行代码 (step 或 next 命令)，查看变量的值等。\"]},\"321\":{\"h\":\"常用 GDB 命令\",\"t\":[\"b <function>：在函数入口处设置断点。\",\"b *<address>：在特定内存地址设置断点。\",\"info breakpoints：查看当前设置的断点。\",\"c：继续执行程序，直到下一个断点。\",\"step：单步执行代码，进入函数内部。\",\"next：单步执行代码，跳过函数调用。\",\"print <variable>：打印变量的值。\",\"x/<n> <address>：查看指定地址的内存内容。\",\"注意事项\",\"内核编译时需要启用调试符号 (.config 文件CONFIG_DEBUG_INFO=y)。\",\"QEMU 的 -s 和 -S 参数用于设置 GDB 远程调试的端口和暂停启动。\"]},\"322\":{\"h\":\"参考：\",\"t\":[\"官方文档\",\"其他资料1\",\"其他资料2\"]},\"323\":{\"c\":[\"其他\"]},\"324\":{\"c\":[\"Linux\",\"GDB\",\"kernel\",\"QEMU\"]},\"325\":{\"h\":\"http 介绍\"},\"326\":{\"h\":\"HTTP 基础知识\"},\"327\":{\"h\":\"请求/响应模型\",\"t\":[\"请求方法：\",\"GET：从服务器获取资源。请求参数附加在 URL 上。\",\"POST：向服务器发送数据，通常用于提交表单或上传文件。数据包含在请求体中。\",\"PUT：更新资源，将客户端提供的资源完整替换。\",\"DELETE：删除指定资源。\",\"HEAD：与 GET 类似，但只返回响应头，不包含响应体。\",\"PATCH：部分更新资源，而非完全替换。\",\"请求的构成：\",\"请求行：包括 HTTP 方法、目标 URL 和 HTTP 版本。\",\"请求头：包含元数据（如 User-Agent、Accept、Authorization）。\",\"请求体：携带数据内容（如表单数据、JSON 数据）。\",\"响应的构成：\",\"状态行：包括 HTTP 版本、状态码和状态描述（如 HTTP/1.1 200 OK）。\",\"响应头：包含元数据（如 Content-Type、Content-Length）。\",\"响应体：实际的内容数据（如 HTML 文档、图片）。\"]},\"328\":{\"h\":\"HTTP 状态码\",\"t\":[\"1xx 信息性状态码：\",\"100 Continue：表示客户端可以继续发送请求。\",\"2xx 成功状态码：\",\"200 OK：请求成功，服务器返回所请求的数据。\",\"201 Created：资源已创建，通常用于 POST 请求。\",\"3xx 重定向状态码：\",\"301 Moved Permanently：永久重定向。\",\"302 Found：临时重定向。\",\"4xx 客户端错误状态码：\",\"400 Bad Request：请求格式错误。\",\"401 Unauthorized：未授权，需要身份验证。\",\"404 Not Found：请求的资源不存在。\",\"5xx 服务器错误状态码：\",\"500 Internal Server Error：服务器内部错误。\",\"503 Service Unavailable：服务器暂时无法处理请求。\"]},\"329\":{\"h\":\"HTTP 头\",\"t\":[\"请求头：\",\"Content-Type：说明请求体的内容类型（如 application/json）。\",\"Accept：客户端愿意接受的响应类型（如 Accept: text/html）。\",\"Authorization：用于传递身份验证信息（如 Bearer 令牌）。\",\"响应头：\",\"Content-Type：响应体的内容类型（如 Content-Type: text/html）。\",\"Cache-Control：控制缓存行为（如 no-cache、max-age=3600）。\"]},\"330\":{\"h\":\"URL 和 URI\",\"t\":[\"URL 的组成部分： \",\"协议：如 http:// 或 https://。\",\"域名：如 www.example.com。\",\"端口：如 :80 或 :443。\",\"路径：如 /path/to/resource。\",\"查询参数：如 ?key=value。\"]},\"331\":{\"h\":\"HTTP 方法的幂等性和安全性\",\"t\":[\"幂等性：方法执行多次和执行一次的效果相同。例如，GET 和 DELETE 是幂等的，POST 通常不是。\",\"安全性：指该操作不会对服务器上的资源进行修改，如 GET 方法是安全的，而 POST 则不是。\"]},\"332\":{\"h\":\"HTTP 协议版本\"},\"333\":{\"h\":\"HTTP/1.0 和 HTTP/1.1\",\"t\":[\"HTTP/1.0：每个请求需要建立单独的 TCP 连接，请求完成后关闭连接。\",\"HTTP/1.1：引入了连接保持（Keep-Alive），允许在同一连接上发送多个请求。还引入了分块传输编码（chunked transfer encoding），支持部分内容请求（Range 请求）。\"]},\"334\":{\"h\":\"HTTP/2\",\"t\":[\"多路复用：在同一个 TCP 连接上并发发送多个请求，解决了 HTTP/1.1 的队头阻塞问题。\",\"头部压缩：使用 HPACK 压缩请求和响应头，减少了带宽消耗。\",\"服务器推送：服务器可以主动向客户端推送资源，避免客户端需要再次请求。\"]},\"335\":{\"h\":\"HTTP/3\",\"t\":[\"基于 QUIC 协议：使用 UDP 而非 TCP 进行传输，减少了连接建立时间，提升了传输效率。\",\"抗网络抖动：改善了在高丢包率、抖动较大的网络环境下的性能。\"]},\"336\":{\"h\":\"安全性\"},\"337\":{\"h\":\"HTTPS\",\"t\":[\"工作原理：HTTP over TLS，使用公钥和私钥对传输的数据进行加密，确保数据的保密性和完整性。需要配置 SSL/TLS 证书。\",\"证书链：理解根证书、中间证书和服务器证书之间的信任关系。\"]},\"338\":{\"h\":\"CORS（跨域资源共享）\",\"t\":[\"原理：浏览器的同源策略限制了跨域请求，CORS 通过设置 Access-Control-Allow-Origin 等响应头来允许跨域访问。\"]},\"339\":{\"h\":\"身份验证\",\"t\":[\"基本认证和摘要认证：基于用户名和密码的简单验证方法。\",\"基于令牌的身份验证：如 JSON Web Token (JWT)，在请求头中传递令牌来验证身份。\"]},\"340\":{\"h\":\"CSRF/XSS 攻击\",\"t\":[\"CSRF 防御：通过使用令牌（如 CSRF Token）或 SameSite Cookie 来防止跨站请求伪造攻击。\",\"XSS 防御：通过输入输出的严格验证和编码来防止跨站脚本攻击。\"]},\"341\":{\"h\":\"HTTP 缓存\"},\"342\":{\"h\":\"缓存控制头\",\"t\":[\"Cache-Control：如 no-store（不缓存），no-cache（需重新验证），max-age=3600（缓存时长为 3600 秒）。\",\"ETag 和 Last-Modified：用于缓存验证，ETag 是资源的唯一标识符，而 Last-Modified 则基于资源的最后修改时间。\"]},\"343\":{\"h\":\"强缓存和协商缓存\",\"t\":[\"强缓存：在缓存有效期内不会与服务器通信，直接使用本地缓存。\",\"协商缓存：在缓存有效期过后，通过 ETag 或 Last-Modified 验证资源是否更新，决定是否重新获取资源。\"]},\"344\":{\"h\":\"CDN 和缓存层\",\"t\":[\"CDN：通过将资源缓存到靠近用户的节点，减少访问延迟，提高网站加载速度。\",\"缓存层：可以在服务器端配置反向代理或缓存服务器（如 Varnish）来提高性能。\"]},\"345\":{\"h\":\"HTTP 在实际开发中的应用\"},\"346\":{\"h\":\"API 开发和调用\",\"t\":[\"RESTful API：设计基于资源的接口，使用 HTTP 方法来表示不同的操作（如 GET 获取资源，POST 创建资源）。\",\"状态码的使用：合理使用状态码来表示不同的操作结果，如 201 表示资源创建成功，204 表示删除成功但无返回内容。\"]},\"347\":{\"h\":\"调试工具\",\"t\":[\"curl：命令行工具，用于发送 HTTP 请求并查看响应。\",\"Postman：用于调试和测试 API 的图形化工具。\",\"浏览器开发者工具（DevTools）：用于查看页面的 HTTP 请求和响应，分析网络性能。\",\"Fiddler 和 Wireshark：用于捕获和分析 HTTP 流量，帮助调试网络问题。\"]},\"348\":{\"h\":\"WebSocket\",\"t\":[\"WebSocket：提供全双工的通信能力，允许服务器和客户端实时通信。WebSocket 在 HTTP 协议的基础上进行升级，之后切换为专用的 WebSocket 协议。\"]},\"349\":{\"h\":\"HTTP 性能优化\"},\"350\":{\"h\":\"压缩\",\"t\":[\"Gzip/Brotli：通过压缩响应内容，减少传输的数据量，从而提升页面加载速度。Brotli 在压缩效率上优于 Gzip。\"]},\"351\":{\"h\":\"请求优化\",\"t\":[\"减少 HTTP 请求数量：通过合并 CSS、JavaScript 文件，使用 CSS Sprites 合并图片，减少页面加载时的请求数量。\",\"懒加载：对于图片或其他资源，使用懒加载技术，即在用户滚动到相应位置时才加载资源。\"]},\"352\":{\"h\":\"HTTP/2 和 HTTP/3 的性能优势\",\"t\":[\"HTTP/2：多路复用、服务器推送、头部压缩等特性显著减少了请求延迟，提高了页面加载速度。\",\"HTTP/3：通过使用基于 UDP 的 QUIC 协议，进一步减少了网络延迟，改善了不良网络环境下的传输效率。\"]},\"353\":{\"h\":\"高级 HTTP 特性\"},\"354\":{\"h\":\"代理和负载均衡\",\"t\":[\"反向代理：通过反向代理服务器（如 Nginx、HAProxy）处理客户端请求，并将请求转发到后端服务器。可以提高安全性、扩展性和负载分担能力\",\"。\",\"负载均衡器：通过负载均衡器分配流量，确保多个服务器间的请求均衡，避免单一服务器过载。\"]},\"355\":{\"h\":\"Webhooks\",\"t\":[\"Webhooks：一种基于 HTTP 的事件回调机制，当特定事件发生时，服务器自动向预设的 URL 发送 POST 请求。\"]},\"356\":{\"h\":\"SSE（Server-Sent Events）\",\"t\":[\"SSE：一种单向的服务器推送技术，通过 HTTP 连接，服务器可以持续向客户端推送更新的数据，常用于实时通知等场景。\"]},\"357\":{\"h\":\"HTTP 的扩展和定制\"},\"358\":{\"h\":\"HTTP 扩展机制\",\"t\":[\"自定义 HTTP 头：可以通过添加自定义的请求头或响应头来传递额外的信息（如 X-Custom-Header）。\",\"扩展状态码和方法：某些特定场景下，可以定义私有的状态码或方法（尽量避免与标准规范冲突）。\"]},\"359\":{\"h\":\"传输编码\",\"t\":[\"Chunked Transfer-Encoding：用于分块传输大数据，服务器分批发送数据块，客户端将其组装成完整的响应体。\"]},\"360\":{\"h\":\"HTTP 的错误处理\"},\"361\":{\"h\":\"重试策略\",\"t\":[\"幂等操作：对于幂等的操作（如 GET、PUT），在请求失败时可以安全地进行重试，而不会导致数据重复提交或操作错误。\"]},\"362\":{\"h\":\"网络故障恢复\",\"t\":[\"重试延迟：实现指数退避算法，逐步增加重试的时间间隔，以避免在网络恢复前过度占用资源。\"]},\"363\":{\"h\":\"HTTP 协议在架构中的角色\"},\"364\":{\"h\":\"微服务通信\",\"t\":[\"RESTful API 与 gRPC：REST API 基于 HTTP 进行通信，适用于跨平台和跨语言的微服务架构；gRPC 则基于 HTTP/2，更适合高性能需求的服务间通信。\"]},\"365\":{\"h\":\"异步 HTTP 调用\",\"t\":[\"消息队列和任务系统：在高并发或长时间任务处理中，结合队列（如 RabbitMQ）和任务系统（如 Celery）进行异步处理，减少 HTTP 请求的等待时间。\"]},\"366\":{\"h\":\"总结\",\"t\":[\"HTTP 协议在现代网络应用开发中无处不在。要真正熟悉 HTTP，不仅要掌握其基础知识，还需要深入了解各个版本的特性、安全性要求、缓存机制、性能优化以及实际开发中的应用场景。通过不断学习和实践，尤其是在 API 开发、调试、优化和安全性方面的应用，可以逐步提高对 HTTP 的掌握程度。\"]},\"367\":{\"c\":[\"其他\"]},\"368\":{\"c\":[\"http\"]},\"369\":{\"h\":\"MySQL 的基本使用\",\"t\":[\"MySQL 是一个广泛使用的关系型数据库管理系统 (RDBMS)，可以用来存储和管理数据。它使用 SQL（结构化查询语言）来进行数据操作。MySQL 主要操作分为三个层次：数据库操作、表操作和数据行操作。以下是对每个层次的详细介绍和常用命令的解释。\"]},\"370\":{\"h\":\"\",\"t\":[\"数据库是 MySQL 中用于存储表和其他数据库对象的逻辑容器。以下是与数据库相关的基本操作：\"]},\"371\":{\"h\":\"\",\"t\":[\"使用 CREATE DATABASE 命令创建一个新的数据库。\",\"CREATE DATABASE database_name;\",\"示例：\",\"CREATE DATABASE my_database;\"]},\"372\":{\"h\":\"\",\"t\":[\"可以使用 SHOW DATABASES 来查看 MySQL 服务器上现有的所有数据库。\",\"SHOW DATABASES;\"]},\"373\":{\"h\":\"\",\"t\":[\"在执行与某个数据库相关的操作之前，需要使用 USE 命令选择该数据库。\",\"USE database_name;\",\"示例：\",\"USE my_database;\"]},\"374\":{\"h\":\"\",\"t\":[\"使用 DROP DATABASE 删除一个现有的数据库。这将删除数据库及其所有数据，因此需要谨慎操作。\",\"DROP DATABASE database_name;\",\"示例：\",\"DROP DATABASE my_database;\"]},\"375\":{\"h\":\"\",\"t\":[\"表是数据库中的核心对象，它包含行和列，用于存储结构化数据。以下是与表操作相关的基本命令：\"]},\"376\":{\"h\":\"\",\"t\":[\"使用 CREATE TABLE 命令来创建一个新表。表由列定义，每列有特定的数据类型。\",\"CREATE TABLE table_name ( column1 datatype, column2 datatype, ... );\",\"示例：\",\"CREATE TABLE users ( id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP );\"]},\"377\":{\"h\":\"\",\"t\":[\"使用 DESCRIBE 或 SHOW COLUMNS 命令查看表的列结构。\",\"DESCRIBE table_name;\",\"或\",\"SHOW COLUMNS FROM table_name;\",\"示例：\",\"DESCRIBE users;\"]},\"378\":{\"h\":\"\",\"t\":[\"使用 SELECT 语句可以查询表中的数据。\",\"SELECT * FROM table_name;\",\"示例：\",\"SELECT * FROM users;\"]},\"379\":{\"h\":\"\",\"t\":[\"使用 ALTER TABLE 命令可以修改现有表的结构，包括添加、删除或修改列。\",\"添加列：\",\"ALTER TABLE table_name ADD column_name datatype;\",\"示例：\",\"ALTER TABLE users ADD age INT;\",\"修改列：\",\"ALTER TABLE table_name MODIFY column_name datatype;\",\"示例：\",\"ALTER TABLE users MODIFY age SMALLINT;\",\"删除列：\",\"ALTER TABLE table_name DROP COLUMN column_name;\",\"示例：\",\"ALTER TABLE users DROP COLUMN age;\"]},\"380\":{\"h\":\"\",\"t\":[\"使用 RENAME TABLE 来重命名一个现有的表。\",\"RENAME TABLE old_table_name TO new_table_name;\",\"示例：\",\"RENAME TABLE users TO customers;\"]},\"381\":{\"h\":\"\",\"t\":[\"使用 DROP TABLE 删除表。此操作会删除表和表中的所有数据。\",\"DROP TABLE table_name;\",\"示例：\",\"DROP TABLE users;\"]},\"382\":{\"h\":\"\",\"t\":[\"数据行是表中实际存储的数据记录。以下是与数据行相关的常用操作：\"]},\"383\":{\"h\":\"\",\"t\":[\"使用 INSERT INTO 命令将一行或多行数据插入表中。\",\"INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...);\",\"示例：\",\"INSERT INTO users (username, email) VALUES ('john_doe', 'john@example.com');\",\"一次性插入多行：\",\"INSERT INTO users (username, email) VALUES ('alice', 'alice@example.com'), ('bob', 'bob@example.com');\"]},\"384\":{\"h\":\"\",\"t\":[\"使用 UPDATE 命令修改表中的现有记录。通常需要指定条件以避免更新所有行。\",\"UPDATE table_name SET column1 = value1, column2 = value2 WHERE condition;\",\"示例：\",\"UPDATE users SET email = 'new_email@example.com' WHERE id = 1;\"]},\"385\":{\"h\":\"\",\"t\":[\"使用 DELETE 命令删除表中的记录。同样需要注意指定条件，以避免删除所有行。\",\"DELETE FROM table_name WHERE condition;\",\"示例：\",\"DELETE FROM users WHERE id = 1;\",\"删除所有数据（不推荐使用，不加条件会删除所有记录）：\",\"DELETE FROM users;\"]},\"386\":{\"h\":\"\",\"t\":[\"数据查询操作是数据库管理和应用开发中的核心任务之一。不同场景下的数据查询需求多种多样，涉及从简单的记录提取到复杂的多表关联。以下是对各种场景下数据查询操作的详细介绍，包括基础查询、条件查询、排序、分组、聚合、联接查询、子查询、联合查询等。\"]},\"387\":{\"h\":\"\",\"t\":[\"基础查询是从数据库表中提取数据的最基本方式，通常使用 SELECT 语句。\",\"示例：\",\"SELECT column1, column2 FROM table_name;\",\"查询所有列：\",\"SELECT * FROM users;\",\"这将返回表 users 中的所有列和记录。\",\"查询特定列：\",\"SELECT username, email FROM users;\",\"只返回 username 和 email 列的值。\"]},\"388\":{\"h\":\"\",\"t\":[\"条件查询用于根据特定条件筛选数据。使用 WHERE 子句可以指定条件。\",\"示例：\",\"SELECT * FROM users WHERE age > 18;\",\"常见条件操作符： \",\"等于 (=)： age = 25\",\"不等于 (<> 或 !=)： age <> 25\",\"大于 (>)、小于 (<)、大于等于 (>=)、小于等于 (<=)\",\"匹配模式 (LIKE)： email LIKE '%@example.com'\",\"范围 (BETWEEN)： age BETWEEN 20 AND 30\",\"列表 (IN)： id IN (1, 2, 3)\",\"空值检查 (IS NULL 和 IS NOT NULL)： email IS NOT NULL\"]},\"389\":{\"h\":\"\",\"t\":[\"使用 ORDER BY 子句对查询结果进行排序，默认按升序排序。可以指定升序 (ASC) 或降序 (DESC)。\",\"示例：\",\"SELECT * FROM users ORDER BY created_at DESC;\",\"按 created_at 列进行降序排序，最近创建的用户将排在最前面。\"]},\"390\":{\"h\":\"\",\"t\":[\"分组查询用于将数据按照某一列或多列的值分组，通常与聚合函数一起使用。使用 GROUP BY 子句进行分组。\",\"示例：\",\"SELECT department, COUNT(*) as employee_count FROM employees GROUP BY department;\",\"统计每个部门的员工数量。\",\"HAVING 子句：用于对分组后的数据进行筛选。\",\"SELECT department, COUNT(*) as employee_count FROM employees GROUP BY department HAVING employee_count > 10;\"]},\"391\":{\"h\":\"\",\"t\":[\"聚合查询用于对一组数据进行计算，返回单一值。常用的聚合函数包括：\",\"COUNT()：计算行数\",\"SUM()：求和\",\"AVG()：求平均值\",\"MIN()：求最小值\",\"MAX()：求最大值\",\"示例：\",\"SELECT AVG(salary) FROM employees;\",\"返回员工工资的平均值。\",\"带条件的聚合查询：\",\"SELECT department, MAX(salary) as max_salary FROM employees WHERE age > 30 GROUP BY department;\"]},\"392\":{\"h\":\"\",\"t\":[\"联接（JOIN）查询用于从多个表中同时提取数据，根据某些列之间的关系将表连接在一起。常见的联接类型包括：\",\"内联接 (INNER JOIN) 只返回两个表中匹配的行。\",\"SELECT users.username, orders.order_id FROM users INNER JOIN orders ON users.id = orders.user_id;\",\"左联接 (LEFT JOIN) 返回左表中的所有行，即使右表中没有匹配的行。\",\"SELECT users.username, orders.order_id FROM users LEFT JOIN orders ON users.id = orders.user_id;\",\"右联接 (RIGHT JOIN) 返回右表中的所有行，即使左表中没有匹配的行。\",\"SELECT users.username, orders.order_id FROM users RIGHT JOIN orders ON users.id = orders.user_id;\",\"全联接 (FULL JOIN) 返回两个表中所有的行，只要其中一张表中有匹配的行。MySQL 不支持 FULL JOIN，通常通过 UNION 实现。\",\"SELECT users.username, orders.order_id FROM users LEFT JOIN orders ON users.id = orders.user_id UNION SELECT users.username, orders.order_id FROM users RIGHT JOIN orders ON users.id = orders.user_id;\"]},\"393\":{\"h\":\"\",\"t\":[\"子查询是嵌套在另一个查询中的查询，通常用于在主查询中使用子查询结果。子查询可以出现在 SELECT、FROM、WHERE 或 HAVING 子句中。\",\"示例：\",\"SELECT username FROM users WHERE id = (SELECT user_id FROM orders WHERE order_id = 1);\",\"查找下订单 order_id = 1 的用户名。\"]},\"394\":{\"h\":\"\",\"t\":[\"使用 EXISTS 关键字检查子查询是否返回结果。\",\"SELECT username FROM users WHERE EXISTS (SELECT 1 FROM orders WHERE users.id = orders.user_id);\",\"返回所有至少有一个订单的用户。\"]},\"395\":{\"h\":\"\",\"t\":[\"联合查询将多个 SELECT 语句的结果合并到一个结果集中。使用 UNION 操作符时，默认会去除重复行；使用 UNION ALL 可以保留所有行。\",\"示例：\",\"SELECT username, email FROM users UNION SELECT customer_name as username, customer_email as email FROM customers;\",\"将 users 和 customers 两个表的数据合并输出。\"]},\"396\":{\"h\":\"\",\"t\":[\"分页查询用于获取大数据集中的一部分记录，通常与 LIMIT 和 OFFSET 子句结合使用。\",\"示例：\",\"SELECT * FROM users LIMIT 10 OFFSET 20;\",\"获取从第 21 行开始的 10 条记录。\"]},\"397\":{\"h\":\"\",\"t\":[\"复杂查询场景可能涉及多种查询操作的组合，例如在子查询中使用联接，或结合聚合、分组和条件查询。复杂查询往往用于解决特定业务需求，以下是一个综合示例：\",\"示例：\",\"SELECT department, COUNT(*) as employee_count, AVG(salary) as avg_salary FROM employees WHERE department IN (SELECT department FROM departments WHERE location = 'New York') GROUP BY department HAVING AVG(salary) > 50000 ORDER BY employee_count DESC LIMIT 5;\",\"查询位于纽约的部门中，员工平均工资大于 50000 的前 5 个部门，并按员工数量降序排序。\",\"总结\",\"基础查询：使用 SELECT 提取数据。\",\"条件查询：通过 WHERE 过滤数据。\",\"排序查询：使用 ORDER BY 对结果排序。\",\"分组查询：使用 GROUP BY 按特定列分组，常与聚合函数结合使用。\",\"聚合查询：使用 COUNT、SUM、AVG 等函数进行统计。\",\"联接查询：通过 JOIN 从多个表中提取关联数据。\",\"子查询：在一个查询中嵌套另一个查询。\",\"联合查询：通过 UNION 合并多个 SELECT 结果集。\",\"分页查询：使用 LIMIT 和 OFFSET 实现分页。\"]},\"398\":{\"h\":\"总结\",\"t\":[\"数据库操作：创建、选择、查看和删除数据库。\",\"表操作：创建、修改、查看和删除表，以及重命名表。\",\"数据行操作：插入、查询、更新和删除表中的数据行，以及对数据进行统计。\"]},\"399\":{\"h\":\"参考\",\"t\":[\"官方文档入门教程\"]},\"400\":{\"c\":[\"其他\"]},\"401\":{\"c\":[\"MySQL\",\"SQL\"]},\"402\":{\"h\":\"正则表达式的基本使用\",\"t\":[\"正则表达式（Regular Expression，简称正则或 RegEx）是一种用来匹配字符串的模式描述语言。它在字符串搜索、替换等文本处理操作中具有强大的功能。正则表达式广泛应用于文本解析、数据验证、模式匹配等场景。\",\"在一个正则表达式中，主要由元字符（Metacharacters） 和 量词（Quantifiers） 2部分组成。以下是对它们的详细介绍:\"]},\"403\":{\"h\":\"\",\"t\":[\"元字符是正则表达式中的特殊字符，用于构建匹配模式。这些字符具有特定的功能，而非代表实际的字符。\"]},\"404\":{\"h\":\"\",\"t\":[\". (点号)：匹配任意单个字符，除了换行符。\",\"示例：a.b 可以匹配 a+b、a3b 等。\",\"^ (插入符号)：匹配字符串的开始位置。\",\"示例：^abc 只能匹配以 abc 开头的字符串。\",\"$ (美元符号)：匹配字符串的结束位置。\",\"示例：xyz$ 只能匹配以 xyz 结尾的字符串。\",\"[] (字符集)：匹配方括号内的任意一个字符。\",\"示例：[aeiou] 可以匹配任意元音字母。\",\"| (管道符号)：表示逻辑 \\\"或\\\" 操作，匹配左边或右边的表达式。\",\"示例：abc|xyz 可以匹配 abc 或 xyz。\",\"() (小括号)：用于分组，捕获匹配的内容，或者将表达式的多个部分视为一个整体。\",\"示例：(abc)+ 表示 abc 可以重复一次或多次。\",\"\\\\ (反斜杠)：转义字符，用来取消元字符的特殊含义，或者引入特殊的元字符。\",\"示例：\\\\. 可以匹配字符 .，而不是匹配任意字符。\"]},\"405\":{\"h\":\"\",\"t\":[\"\\\\d：匹配任意一个数字字符，相当于 [0-9]。\",\"示例：\\\\d{3} 可以匹配任意三位数字。\",\"\\\\D：匹配任意一个非数字字符，相当于 [^0-9]。\",\"示例：\\\\D 可以匹配任何非数字字符。\",\"\\\\w：匹配任意一个字母、数字或下划线字符，相当于 [a-zA-Z0-9_]。\",\"示例：\\\\w+ 可以匹配一个或多个字母、数字或下划线。\",\"\\\\W：匹配任意一个非字母、数字或下划线字符，相当于 [^a-zA-Z0-9_]。\",\"示例：\\\\W 可以匹配任何非字母或非数字字符。\",\"\\\\s：匹配任意一个空白字符（空格、制表符、换行符等）。\",\"示例：\\\\s 可以匹配空格或换行符。\",\"\\\\S：匹配任意一个非空白字符。\",\"示例：\\\\S 可以匹配任何非空白字符。\"]},\"406\":{\"h\":\"\",\"t\":[\"[abc]：匹配字符 a、b 或 c 中的任意一个。\",\"示例：[aeiou] 匹配任意元音字母。\",\"[a-z]：匹配从 a 到 z 范围内的任意一个字符。\",\"示例：[0-9] 匹配任意一个数字字符。\",\"[^abc]：匹配除了 a、b、c 以外的任意一个字符。\",\"示例：[^0-9] 匹配任意一个非数字字符。\",\"[a-zA-Z]：匹配任意大小写字母。\"]},\"407\":{\"h\":\"\",\"t\":[\"\\\\b：匹配一个单词的边界，通常用于匹配完整的单词。\",\"示例：\\\\bword\\\\b 匹配 word，但不匹配 words 或 sword。\",\"\\\\B：匹配非单词边界。\",\"示例：\\\\Bword\\\\B 不会匹配 word，但会匹配像 swordsmanship 这样单词中间的部分。\"]},\"408\":{\"h\":\"\",\"t\":[\"量词用于控制前一个字符或子表达式出现的次数。量词允许你指定匹配的数量范围。\"]},\"409\":{\"h\":\"\",\"t\":[\"* (星号)：匹配前面的字符 0 次或多次。\",\"示例：a* 可以匹配空字符串、a、aa、aaa 等。\",\"+ (加号)：匹配前面的字符 1 次或多次。\",\"示例：a+ 可以匹配 a、aa、aaa 等，但不匹配空字符串。\",\"? (问号)：匹配前面的字符 0 次或 1 次，即表示这个字符是可选的。\",\"示例：colou?r 可以匹配 color 和 colour。\"]},\"410\":{\"h\":\"\",\"t\":[\"{n}：匹配前面的字符 恰好 n 次。\",\"示例：\\\\d{4} 可以匹配四位数字，如 2023。\",\"{n,}：匹配前面的字符 至少 n 次。\",\"示例：\\\\d{2,} 匹配至少两位数字，如 12、123 等。\",\"{n,m}：匹配前面的字符 至少 n 次，至多 m 次。\",\"示例：\\\\d{2,4} 可以匹配两位、三位或四位数字，如 12、123、1234。\"]},\"411\":{\"h\":\"\",\"t\":[\"默认情况下，量词是“贪婪”的，这意味着它们会匹配尽可能多的字符。你可以通过在量词后添加 ? 将其转换为“懒惰”模式，匹配尽可能少的字符。\",\"*?：匹配 0 次或更多，但尽量少匹配。\",\"+?：匹配 1 次或更多，但尽量少匹配。\",\"??：匹配 0 次或 1 次，但尽量少匹配。\",\"{n,m}?：匹配 n 到 m 次，但尽量少匹配。\",\"示例：\",\"<a href=\\\"http://example.com\\\">Example</a>\",\"贪婪匹配 \\\"<.*>\\\" 会匹配整个字符串，而懒惰匹配 \\\"<.*?>\\\" 只匹配第一个标签。\"]},\"412\":{\"h\":\"\",\"t\":[\"字符串搜索：\",\"搜索符合某个模式的字符串，如电话号码或电子邮件地址。\",\"\\\\b\\\\d{3}-\\\\d{3}-\\\\d{4}\\\\b # 匹配美国电话号码格式\",\"数据验证：\",\"验证输入是否符合特定格式，如密码复杂度、日期格式等。\",\"^[a-zA-Z0-9]{8,}$ # 验证至少包含 8 个字母或数字的密码\",\"替换操作：\",\"查找并替换字符串中符合特定模式的部分，如将 HTML 标签移除。\",\"<[^>]+> # 匹配 HTML 标签\",\"提取数据：\",\"从文本中提取特定格式的数据，如提取电子邮件地址。\",\"\\\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Z|a-z]{2,}\\\\b # 匹配电子邮件地址\",\"总结\",\"元字符 (Metacharacters) 是正则表达式中的基础元素，用于构建匹配模式。包括特殊字符、字符集、范围、边界匹配等。\",\"量词 (Quantifiers) 用于指定字符或表达式出现的次数，控制匹配的数量。\",\"正则表达式的强大在于其灵活性，可以根据实际需求设计复杂的匹配规则。掌握正则表达式的语法和使用场景，有助于处理文本、数据验证和复杂的字符串操作。\"]},\"413\":{\"h\":\"参考\",\"t\":[\"可视化工具\"]},\"414\":{\"c\":[\"其他\"]},\"415\":{\"c\":[\"正则表达式\"]},\"416\":{\"h\":\"其他\"},\"417\":{\"c\":[\"其他\"]},\"418\":{\"h\":\"副业搞钱\"},\"419\":{\"c\":[\"副业\"]},\"420\":{\"h\":\"\",\"t\":[\"Install Ollama\",\" curl -fsSL https://ollama.com/install.sh | sh # 启动服务 sudo systemctl restart ollama sudo vim /etc/systemd/system/ollama.service [Unit] Description=Ollama Service After=network-online.target [Service] ExecStart=/usr/local/bin/ollama serve User=ollama Group=ollama Restart=always RestartSec=3 Environment=\\\"PATH=/home/lucas/.local/bin:/home/lucas/anaconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\\\" Environment=\\\"OLLAMA_HOST=0.0.0.0:11434\\\" Environment=\\\"OLLAMA_ORIGINS=*\\\" [Install] WantedBy=default.target\",\"Start Using Models: Once installed, you can start downloading and running models, such as Llama, directly using commands like:\",\"ollama run llama3.1:8b\",\"The first time you run a model, it will be downloaded. Subsequent runs will use the local copy.\",\"Running Ollama with Docker and Open WebUI\",\"If you prefer a GUI over the command line, you can set up Open WebUI to interact with your models in a browser. First, ensure Docker is installed, then run:\",\"docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main\",\"Then, open your browser and go to http://localhost:3000.\"]},\"421\":{\"h\":\"在线工具\"},\"422\":{\"c\":[\"工具\"]},\"423\":{\"h\":\"git 基本使用\",\"t\":[\"Git 是最常用的版本控制工具之一，广泛用于开发和项目管理中。以下是一些常用的 Git 命令及其详细说明：\"]},\"424\":{\"h\":\"repository 操作\"},\"425\":{\"h\":\"1.\",\"t\":[\"作用：本地初始化一个新的 Git 仓库。\",\"用法：在一个空目录中运行 git init，Git 会创建一个 .git 目录，用于存储仓库的元数据。\",\" git init\"]},\"426\":{\"h\":\"2.\",\"t\":[\"作用：从远程仓库克隆一个仓库到本地。\",\"用法：git clone 后跟仓库 URL，可以将远程仓库复制到本地。\",\" git clone https://github.com/user/repository.git\"]},\"427\":{\"h\":\"3.\",\"t\":[\"作用：管理远程仓库地址。\",\"用法：\",\"查看当前的远程仓库：git remote -v\",\"添加新的远程仓库：git remote add origin https://github.com/user/repo.git\",\"删除远程仓库：git remote remove origin\",\"git remote -v # 查看远程仓库 git remote add origin https://github.com/user/repo.git # 添加远程仓库\"]},\"428\":{\"h\":\"修改管理\"},\"429\":{\"h\":\"1.\",\"t\":[\"作用：将文件添加到暂存区（stage），为下次提交做准备。\",\"用法：git add 后跟文件路径，或使用 . 添加当前目录下的所有更改。\",\"git add file.txt git add .\"]},\"430\":{\"h\":\"2.\",\"t\":[\"作用：提交暂存区的更改，生成新的提交。\",\"用法：git commit 通常跟 -m 选项来添加提交信息，描述本次提交的内容。\",\"git commit -m \\\"Add new feature\\\"\",\"修改commit信息： 使用 --amend 修改最后一次提交的信息或内容。\",\"git commit --amend -m \\\"Corrected commit message\\\"\",\"多次提交合并：使用 rebase 合并最近几次的commit。\",\"git rebase -i HEAD～n\"]},\"431\":{\"h\":\"3.\",\"t\":[\"作用：显示工作目录和暂存区的状态，查看哪些文件有更改、哪些文件被暂存、哪些文件未被跟踪。\",\"用法：运行 git status 可以看到当前分支的状态信息。\",\"git status\"]},\"432\":{\"h\":\"4.\",\"t\":[\"作用：显示仓库的提交历史记录。\",\"用法：git log 列出当前分支的所有提交。你可以使用 --oneline 选项简化输出，或者 --graph 查看分支图形。\",\"git log git log --oneline git log --graph --oneline\"]},\"433\":{\"h\":\"5.\",\"t\":[\"作用：查看工作目录、暂存区和最新提交之间的差异。\",\"用法：git diff 显示未暂存的更改，git diff --staged 显示已暂存但未提交的更改。\",\"git diff git diff --staged\"]},\"434\":{\"h\":\"6.\",\"t\":[\"作用：恢复工作目录中文件的状态。\",\"用法：git checkout -- 后跟文件。\",\" git checkout feature-branch git checkout -- file.txt # 恢复文件\"]},\"435\":{\"h\":\"7.\",\"t\":[\"作用：保存当前工作目录的更改，以便稍后恢复，而不影响当前的代码提交历史。\",\"用法：git stash 可以在不提交代码的情况下保存未完成的工作。\",\"git stash git stash pop # 恢复工作\"]},\"436\":{\"h\":\"8.\",\"t\":[\"作用：重置当前分支的提交历史或工作目录状态，回退到之前的某个提交点。\",\"用法：\",\"git reset --soft：保留工作区文件，只回退提交。\",\"git reset --hard：丢弃工作区文件和提交历史。\",\"git reset --soft HEAD~1 # 回退一提交，但保留工作目录更改 git reset --hard HEAD~1 # 丢弃更改\"]},\"437\":{\"h\":\"分支管理\"},\"438\":{\"h\":\"1.\",\"t\":[\"作用：切换分支。\",\"用法：git checkout 后跟分支名称，切换到指定分支\",\"git checkout feature-branch git checkout -b feature-branch #创建并切换分支\"]},\"439\":{\"h\":\"2.\",\"t\":[\"作用：管理分支。列出、创建或删除分支。\",\"用法：\",\"列出分支：git branch\",\"创建新分支：git branch branch_name\",\"删除分支：git branch -d branch_name\",\"git branch # 列出所有分支 git branch feature-branch # 创建新分支 git branch -d feature-branch # 删除分支\"]},\"440\":{\"h\":\"3.\",\"t\":[\"作用：合并分支，将指定分支的更改合并到当前分支。\",\"用法：git merge 后跟要合并的分支名称。\",\"git merge feature-branch\"]},\"441\":{\"h\":\"4.\",\"t\":[\"作用：将当前分支的更改应用到另一分支的顶端，从而保持线性历史。\",\"用法：git rebase 可以让你的提交历史保持整洁。\",\"git rebase main\"]},\"442\":{\"h\":\"数据同步\"},\"443\":{\"h\":\"1.\",\"t\":[\"作用：从远程仓库拉取更改并合并到本地分支。相当于 git fetch 加 git merge。\",\"用法：git pull 默认从当前跟踪的远程分支拉取更新。\",\" git pull origin main\"]},\"444\":{\"h\":\"2.\",\"t\":[\"作用：将本地分支的提交推送到远程仓库。\",\"用法：git push 将更改推送到远程分支。\",\"git push origin main\"]},\"445\":{\"h\":\"3.\",\"t\":[\"作用：从远程仓库获取最新的提交和分支信息，但不合并到本地分支。\",\"用法：git fetch 会下载远程仓库的所有更改，但不会自动合并。\",\" git fetch origin\"]},\"446\":{\"h\":\"管理 Submodule\",\"t\":[\"Git Submodule 是一个非常有用的功能，允许你在一个 Git 仓库中包含另一个独立的 Git 仓库。这对于需要将多个项目组合在一起的场景非常实用，例如一个大型项目包含多个子模块。以下是常见的 Git Submodule 操作和使用场景的详细介绍。\"]},\"447\":{\"h\":\"1.\",\"t\":[\"作用：在你的项目中添加一个子模块，它指向另一个 Git 仓库。\",\"命令：\",\"git submodule add <repository_url> <path>\",\"示例：\",\"git submodule add https://github.com/example/repo.git libs/repo\",\"这会将 repo 仓库克隆到当前项目的 libs/repo 目录，并将其作为子模块添加。\"]},\"448\":{\"h\":\"2.\",\"t\":[\"初始化：当你克隆包含子模块的仓库时，子模块不会自动被克隆。你需要先初始化它们：\",\"git submodule init\",\"更新子模块：初始化之后，使用以下命令克隆并更新子模块到最新提交：\",\"git submodule update\",\"克隆仓库时自动初始化和更新子模块：可以使用 --recurse-submodules 选项在克隆时自动初始化并更新所有子模块：\",\"git clone --recurse-submodules <repository_url>\"]},\"449\":{\"h\":\"3.\",\"t\":[\"作用：显示当前仓库中所有子模块的状态，例如子模块当前指向的 commit。\",\"命令：\",\"git submodule status\",\"输出中会显示子模块的哈希、路径以及子模块是否是最新的。\"]},\"450\":{\"h\":\"4.\",\"t\":[\"作用：如果子模块的上游仓库有新的提交，你可以将子模块更新到最新版本。\",\"命令：\",\"进入子模块目录，然后拉取最新的更改：\",\"cd libs/repo git pull origin main\",\"回到主项目后，提交子模块的更新：\",\"git add libs/repo git commit -m \\\"Update submodule\\\"\"]},\"451\":{\"h\":\"5.\",\"t\":[\"作用：从项目中移除子模块。\",\"步骤：\",\"删除子模块的条目：从 .gitmodules 文件中移除子模块条目。\",\"删除子模块配置：从 .git/config 文件中移除子模块的配置条目。\",\"删除子模块目录：手动删除子模块目录并从版本控制中移除：\",\"git rm -f libs/repo\",\"提交更改：\",\"git commit -m \\\"Remove submodule\\\"\"]},\"452\":{\"h\":\"6.\",\"t\":[\"作用：在某些场景下，你可能希望子模块保持在特定的 commit，而不是跟随最新的更改。\",\"命令：\",\"进入子模块目录，检查出所需的 commit：\",\"cd libs/repo git checkout <commit_hash>\",\"回到主项目，添加并提交子模块的状态：\",\"git add libs/repo git commit -m \\\"Update submodule to specific commit\\\"\"]},\"453\":{\"h\":\"7.\",\"t\":[\"子模块本身也可以包含子模块，称为嵌套子模块。这些子模块的操作与普通子模块类似，但需要特别注意初始化和更新嵌套结构时可能出现的复杂性。\"]},\"454\":{\"h\":\"8.\",\"t\":[\"子模块指针未更新：当你更新子模块后，可能会忘记将更新提交到主仓库。确保更新完子模块后，执行 git add 和 git commit 将指针的变化保存到主仓库。\",\"子模块无法初始化或更新：确保子模块的 URL 正确，并且你有相应的权限克隆子模块。\",\"总结\",\"Git Submodule 是在大型项目或多仓库项目中非常有用的功能，可以让你更好地组织代码。通过上述命令，你可以轻松地添加、更新、管理和删除子模块。掌握这些操作将帮助你有效地管理项目依赖关系和模块化代码结构。\"]},\"455\":{\"h\":\"参考资料\",\"t\":[\"git 官方文档\",\"在线学习git\",\"git 在线文档\"]},\"456\":{\"c\":[\"工具\"]},\"457\":{\"c\":[\"git\"]},\"458\":{\"h\":\"cmake 基本使用\",\"t\":[\"CMake 是一个跨平台的构建系统生成工具，广泛用于 C/C++ 项目的构建管理。它可以生成适用于不同编译器和操作系统的构建系统文件，如 Makefile、Ninja 文件或 Visual Studio 工程文件。以下是 CMake 的基本教程，帮助你快速上手。\"]},\"459\":{\"h\":\"\",\"t\":[\"CMake 支持多平台，以下是不同系统的安装方式：\",\"Ubuntu/Debian：\",\"sudo apt-get install cmake\",\"macOS（使用 Homebrew）：\",\"brew install cmake\",\"Windows： 通过 CMake 官方网站 下载安装程序。\"]},\"460\":{\"h\":\"\",\"t\":[\"CMakeLists.txt：CMake 的核心文件，包含构建系统的配置和构建指令。每个 CMake 项目都至少需要一个 CMakeLists.txt 文件。\",\"生成器：CMake 可以为不同平台生成相应的构建系统，如 Makefiles、Ninja 文件或 Visual Studio 项目文件。\",\"构建目录：通常，CMake 项目采用 \\\"out-of-source\\\" 构建，即构建文件和源文件分离。\"]},\"461\":{\"h\":\"\",\"t\":[\"一个简单的 CMakeLists.txt 文件通常包含以下内容：\",\"# 声明最低 CMake 版本要求 cmake_minimum_required(VERSION 3.10) # 定义项目名称和语言 project(HelloWorld VERSION 1.0 LANGUAGES C CXX) # 添加可执行文件 add_executable(hello main.cpp)\",\"cmake_minimum_required()：指定最低 CMake 版本。\",\"project()：定义项目的名称和版本信息。\",\"add_executable()：定义一个可执行文件，并指定源文件。\"]},\"462\":{\"h\":\"\"},\"463\":{\"h\":\"项目结构\",\"t\":[\"创建一个简单的项目结构：\",\"my_project/ ├── CMakeLists.txt └── main.cpp\"]},\"464\":{\"h\":\"示例\",\"t\":[\"在 main.cpp 中编写简单的 C++ 代码：\",\"#include <iostream> int main() { std::cout << \\\"Hello, World!\\\" << std::endl; return 0; }\"]},\"465\":{\"h\":\"示例\",\"t\":[\"创建一个最简单的 CMakeLists.txt 文件，如下所示：\",\"cmake_minimum_required(VERSION 3.10) project(HelloWorld) add_executable(hello main.cpp)\"]},\"466\":{\"h\":\"\"},\"467\":{\"h\":\"5.1 创建构建目录\",\"t\":[\"推荐使用 \\\"out-of-source\\\" 构建，将所有构建文件放到单独的目录中：\",\"mkdir build cd build\"]},\"468\":{\"h\":\"5.2 运行 CMake 命令\",\"t\":[\"在构建目录中运行 CMake：\",\"cmake ..\",\"这会生成一个适合当前平台的构建系统文件（如 Makefile 或 Visual Studio 项目）。\"]},\"469\":{\"h\":\"5.3 构建项目\",\"t\":[\"生成构建文件后，可以使用生成的构建系统工具进行编译：\",\"Makefile 构建：\",\"make\",\"Ninja 构建（如果使用 Ninja 生成器）：\",\"ninja\",\"生成的可执行文件将位于构建目录中，你可以运行它：\",\"./hello\"]},\"470\":{\"h\":\"\",\"t\":[\"设置变量：\",\"set(MY_VARIABLE \\\"value\\\")\",\"使用 ${MY_VARIABLE} 访问变量。\",\"添加库： 你可以使用 add_library() 添加静态或动态库：\",\"add_library(my_library STATIC src/mylib.cpp)\",\"包含目录： 使用 include_directories() 将目录添加到编译器的包含路径中：\",\"include_directories(include/)\",\"链接库： 使用 target_link_libraries() 为目标（如可执行文件或库）添加依赖库：\",\"target_link_libraries(hello my_library)\"]},\"471\":{\"h\":\"\",\"t\":[\"CMake 提供了 find_package() 函数，用于查找系统中已安装的库。例如，查找并使用 Boost 库：\",\"find_package(Boost REQUIRED) include_directories(${Boost_INCLUDE_DIRS}) target_link_libraries(hello ${Boost_LIBRARIES})\"]},\"472\":{\"h\":\"\",\"t\":[\"通过 target_compile_options() 为编译器指定自定义编译选项：\",\"target_compile_options(hello PRIVATE -Wall -Wextra)\"]},\"473\":{\"h\":\"\",\"t\":[\"CMake 还支持安装可执行文件和库。你可以使用 install() 函数：\",\"install(TARGETS hello DESTINATION bin)\"]},\"474\":{\"h\":\"\",\"t\":[\"Unix Makefiles：适用于大多数 Linux/Unix 系统，默认生成 Makefile。\",\"Ninja：适用于快速构建，可以通过 -G Ninja 选项指定生成器。\",\"Visual Studio：适用于 Windows，生成 Visual Studio 项目文件。\",\"总结\",\"CMake 是一个非常灵活和强大的构建工具，适合处理复杂的跨平台项目。通过以上基本操作和命令，你可以快速上手并使用 CMake 管理你的 C/C++ 项目。在此基础上，CMake 还支持很多高级功能，如测试、打包等，推荐深入学习并灵活运用。\"]},\"475\":{\"h\":\"参考\",\"t\":[\"cmake 文档\"]},\"476\":{\"c\":[\"工具\"]},\"477\":{\"c\":[\"cmake\"]},\"478\":{\"h\":\"gdb 基本使用\",\"t\":[\"GNU 调试器（GDB）是一个功能强大的调试工具，广泛用于调试 C、C++、Fortran 等编程语言。GDB 支持的主要功能包括设置断点、检查程序状态、修改变量值、单步执行代码等。以下将详细介绍 GDB 的基本用法、常用命令以及高级功能。\"]},\"479\":{\"h\":\"GDB 基本用法\"},\"480\":{\"h\":\"启动 GDB\",\"t\":[\"GDB 可以通过以下方式启动：\",\"gdb <program> # 加载指定的可执行文件 gdb <program> <core> # 加载可执行文件和崩溃时生成的 core dump 文件 gdb --args <program> <args> # 启动带参数的程序\",\"启动 GDB 后，会进入一个交互式命令行界面，等待用户输入调试命令。\"]},\"481\":{\"h\":\"启动程序\",\"t\":[\"在 GDB 内部启动程序，可以使用 run 命令：\",\"(gdb) run # 直接运行程序 (gdb) run <args> # 运行程序并传递参数\"]},\"482\":{\"h\":\"设置断点\",\"t\":[\"断点是调试时用于暂停程序执行的标志。通过 break 命令设置断点，常用格式包括：\",\"(gdb) break main # 在主函数处设置断点 (gdb) break foo # 在函数 foo() 入口处设置断点 (gdb) break 42 # 在源文件的第 42 行处设置断点 (gdb) break file.cpp:42 # 在 file.cpp 文件的第 42 行处设置断点 (gdb) break file.cpp:foo # 在 file.cpp 文件的 foo() 函数入口处设置断点 (gdb) break class::method # 在类的某个方法上设置断点 (gdb) tbreak main # 设置一次性断点，程序执行到断点处后自动删除\",\"查看已设置的断点：\",\"(gdb) info breakpoints # 列出所有断点\",\"删除断点：\",\"(gdb) delete <breakpoint_number> # 删除指定的断点 (gdb) clear <location> # 删除指定位置的所有断点\"]},\"483\":{\"h\":\"单步执行\",\"t\":[\"GDB 提供多种单步执行命令，用于逐行或逐指令执行程序：\",\"(gdb) next # 执行下一行源代码，不进入函数内部 (gdb) step # 执行下一行源代码，进入函数内部 (gdb) continue # 继续执行程序，直到下一个断点或程序结束 (gdb) finish # 执行当前函数并返回到调用处 (gdb) until <location> # 执行代码，直到指定位置（行号或函数）\"]},\"484\":{\"h\":\"检查程序状态\",\"t\":[\"调试时经常需要查看程序当前的状态，包括堆栈、变量、内存等信息：\",\"查看堆栈：backtrace 命令用于查看当前的调用堆栈。\",\"(gdb) backtrace # 查看整个调用堆栈 (gdb) frame <n> # 切换到第 n 层堆栈帧 (gdb) info frame # 查看当前帧的详细信息\",\"查看变量：使用 print 命令查看变量的值。\",\"(gdb) print var # 查看变量 var 的值 (gdb) print *pointer # 查看指针指向的数据 (gdb) display var # 在每次程序暂停时显示变量的值 (gdb) undisplay <n> # 取消显示变量 (gdb) info locals # 查看当前函数的所有局部变量\",\"修改变量值：使用 set 命令修改变量的值。\",\"(gdb) set var = 10 # 将变量 var 设置为 10 (gdb) set $pc = 0x400550 # 修改程序计数器 (PC) 的值\",\"查看内存：x 命令用于查看内存中的内容。\",\"(gdb) x <address> # 以十六进制形式查看指定地址的内容 (gdb) x/10x <address> # 查看从 <address> 开始的 10 个十六进制值 (gdb) x/10i <address> # 查看从 <address> 开始的 10 条指令\"]},\"485\":{\"h\":\"运行时动态分析\",\"t\":[\"GDB 支持动态调试，可以在程序运行时执行命令以分析程序行为。例如：\",\"监视变量变化：通过 watch 命令，GDB 可以在变量值改变时自动暂停程序执行。\",\"(gdb) watch var # 监视变量 var 的变化 (gdb) rwatch var # 监视变量 var 被读取时暂停 (gdb) awatch var # 监视变量 var 被读取或写入时暂停\",\"条件断点：在断点上添加条件，使其仅在条件满足时触发。\",\"(gdb) break foo if x == 5 # 当变量 x 等于 5 时，在 foo 函数处触发断点\"]},\"486\":{\"h\":\"高级功能\"},\"487\":{\"h\":\"栈帧调试\",\"t\":[\"GDB 支持调试堆栈帧，可以在不同帧之间切换、查看局部变量、调用函数等。\",\"(gdb) frame <n> # 切换到第 n 帧 (gdb) info args # 查看当前帧的函数参数 (gdb) info locals # 查看当前帧的局部变量\"]},\"488\":{\"h\":\"动态库调试\",\"t\":[\"调试动态库时，可能需要在库加载后设置断点。这可以通过以下步骤实现：\",\"启动 GDB 并运行程序。\",\"程序暂停时使用 sharedlibrary 命令加载动态库的符号。\",\"设置动态库中的断点。\",\"(gdb) sharedlibrary # 加载动态库符号 (gdb) break mylib.c:42 # 在动态库的源文件中设置断点\"]},\"489\":{\"h\":\"多线程调试\",\"t\":[\"GDB 支持调试多线程程序，可以查看线程状态、切换线程、在线程间设置断点等。\",\"查看线程：使用 info threads 查看所有线程的信息。\",\"(gdb) info threads # 列出所有线程 (gdb) thread <n> # 切换到第 n 个线程 (gdb) thread apply all bt # 对所有线程执行 backtrace\",\"线程断点：设置仅在线程上触发的断点。\",\"(gdb) break foo thread 2 # 仅当线程 2 运行到 foo 函数时触发断点\"]},\"490\":{\"h\":\"调试核心转储文件（Core Dump）\",\"t\":[\"核心转储文件（Core Dump）是在程序崩溃时生成的内存映像文件。通过 GDB 可以调试 Core Dump 文件，分析程序崩溃的原因。\",\"gdb <program> <core> # 加载 Core Dump 文件\",\"加载 Core Dump 文件后，可以使用常规调试命令（如 backtrace、print 等）分析崩溃时的堆栈和变量状态。\",\"总结\",\"GDB 是一个功能强大的调试工具，可以帮助开发者深入分析和调试程序。通过熟练掌握 GDB 的基本用法和高级功能，开发者可以大大提升调试效率，快速定位和解决程序中的问题。\"]},\"491\":{\"h\":\"参考\",\"t\":[\"参考文档\",\"GDB配置\"]},\"492\":{\"c\":[\"工具\"]},\"493\":{\"c\":[\"gdb\",\"Linux\",\"调试\"]},\"494\":{\"h\":\"gdb 的配置文件\",\"t\":[\".gdbinit 是 GNU 调试器（GDB）的初始化文件，用于在 GDB 启动时自动执行一系列命令或配置。通过 .gdbinit 文件，开发者可以自定义 GDB 的行为，预先设置断点、定义别名、配置调试环境等，从而提高调试效率。\"]},\"495\":{\"h\":\"文件的作用\",\"t\":[\".gdbinit 文件的主要作用是自动执行一组 GDB 命令，避免在每次调试会话中手动输入相同的命令。它可以配置调试环境、定制调试工具和简化常用操作。常见的功能包括：\",\"自动化设置：在调试会话开始时自动设置断点、初始化变量或加载调试符号。\",\"别名定义：通过定义命令别名，简化一些常用但复杂的 GDB 命令。\",\"定制化输出：通过设置 GDB 的显示风格，如开启或关闭不同的输出模式。\",\"自动加载调试插件：可以用来加载调试辅助工具或插件，比如 Pretty Printers（用于打印 C++ STL 容器等复杂数据结构的插件）。\",\"调试会话控制：可以在启动时自动运行脚本，控制调试的流程，如自动运行程序、自动进入特定函数等。\"]},\"496\":{\"h\":\"文件的常见位置\",\"t\":[\"用户主目录下的 .gdbinit：位于用户主目录/home/username/.gdbinit 的文件是全局的 GDB 初始化文件，适用于所有 GDB 会话。它在每次启动 GDB 时都会被自动加载。\",\"当前目录下的 .gdbinit：位于当前工作目录的 .gdbinit 文件仅在当前目录中启动 GDB 时生效。这个文件常用于为特定项目或代码库定制调试环境。\",\"加载顺序\",\"系统全局的 GDB 初始化文件（通常位于 /etc/gdb/gdbinit）。\",\"用户主目录中的 .gdbinit 文件。\",\"当前目录中的 .gdbinit 文件。\",\"可以通过启动 GDB 时使用 -nx 或 -n 选项来禁止加载这些文件：\",\"gdb -n：不加载系统全局的 .gdbinit 文件。\",\"gdb -nx：不加载任何 .gdbinit 文件。\"]},\"497\":{\"h\":\"文件的常用配置\"},\"498\":{\"h\":\"设置断点\",\"t\":[\"可以在 .gdbinit 文件中预先定义好一些断点，GDB 启动时会自动在指定位置设置断点。\",\"break main break MyClass::myFunction\"]},\"499\":{\"h\":\"定义别名\",\"t\":[\"通过定义别名，可以简化常用命令的输入。\",\"alias rbt = \\\"run break\\\" alias bt = \\\"backtrace\\\" alias ni = \\\"nexti\\\"\"]},\"500\":{\"h\":\"自动加载符号和文件\",\"t\":[\"在调试大型项目时，可能需要自动加载符号文件或其他调试信息。\",\"file /path/to/executable symbol-file /path/to/symbols\"]},\"501\":{\"h\":\"配置调试环境\",\"t\":[\"可以通过 .gdbinit 配置调试环境的各类选项，例如设置断点、设置 GDB 输出风格等。\",\"set pagination off set print pretty on\"]},\"502\":{\"h\":\"定义自定义函数\",\"t\":[\"GDB 允许在 .gdbinit 中定义自定义函数，帮助简化调试流程。\",\"define hook-stop printf \\\"Stopped at %s\\\\n\\\", $pc end\",\"这个示例定义了一个名为 hook-stop 的函数，该函数会在每次程序停止时自动执行，打印当前的程序计数器（PC）的值。\"]},\"503\":{\"h\":\"加载调试插件\",\"t\":[\"可以通过 .gdbinit 文件加载调试插件，如 Python 脚本、Pretty Printers 等。\",\"python import sys sys.path.insert(0, '/path/to/my/pretty_printers') from my_pretty_printers import register_printers register_printers (gdb.current_objfile ()) end # 加载stdcxx pretty priters python import sys sys.path.insert(0, '/usr/share/gcc/python') from libstdcxx.v6.printers import register_libstdcxx_printers register_libstdcxx_printers(gdb.current_objfile()) end\",\"这个例子展示了如何加载一个自定义的 Python 脚本，用于注册 GDB 的 Pretty Printer。\"]},\"504\":{\"h\":\"典型的 示例\",\"t\":[\"下面是一个典型的 .gdbinit 文件示例，它演示了如何设置断点、定义别名、配置调试选项和加载符号文件：\",\"# 设置常用断点 break main break my_function # 定义别名 alias rbt = \\\"run break\\\" alias bt = \\\"backtrace\\\" alias ni = \\\"nexti\\\" # 加载调试符号文件 file /home/user/my_project/bin/my_executable symbol-file /home/user/my_project/bin/my_executable.debug # 配置调试环境 set pagination off set print pretty on # 加载自定义 Python Pretty Printers python import sys sys.path.insert(0, '/home/user/my_project/gdb_pretty_printers') from my_pretty_printers import register_printers register_printers(gdb.current_objfile()) end # 自动化任务 define hook-stop printf \\\"Stopped at %s\\\\n\\\", $pc end\",\"这个 .gdbinit 文件在 GDB 启动时会自动执行上述命令，从而快速设置好调试环境。\"]},\"505\":{\"h\":\"注意事项\",\"t\":[\"安全性问题：GDB 加载 .gdbinit 文件时存在潜在的安全问题，因为它可能执行未经信任的命令。如果你不希望加载当前目录中的 .gdbinit 文件，可以使用 gdb -nh 或 gdb -nx 来禁用这些文件的加载。\",\"调试效率：通过 .gdbinit 文件自动化常见任务，能够显著提高调试效率，尤其是在处理大型项目或复杂调试环境时。\",\"总结\",\".gdbinit 文件是 GDB 的一个强大工具，用于自动配置调试环境和简化调试工作流。通过在 .gdbinit 文件中预定义命令、别名、自定义函数和调试插件，开发者可以大大提高调试效率，减少手动配置的重复性工作。在调试大型项目或频繁进行调试的场景下，合理使用 .gdbinit 可以极大地提升开发体验。\"]},\"506\":{\"h\":\"参考\",\"t\":[\"参考文档\"]},\"507\":{\"c\":[\"工具\"]},\"508\":{\"c\":[\"gdb\",\"Linux\",\"调试\"]},\"509\":{\"h\":\"工具箱\"},\"510\":{\"c\":[\"工具\"]},\"511\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"典型的\",{\"0\":{\"504\":1}}],[\"脚本\",{\"1\":{\"503\":2}}],[\"位于当前工作目录的\",{\"1\":{\"496\":1}}],[\"位于用户主目录\",{\"1\":{\"496\":1}}],[\"位于二叉树顶层的节点\",{\"1\":{\"78\":1}}],[\"别名\",{\"1\":{\"505\":1}}],[\"别名定义\",{\"1\":{\"495\":1}}],[\"别的还真的没用过\",{\"1\":{\"258\":1}}],[\"别的都是类似的使用方式\",{\"1\":{\"256\":1}}],[\"预先设置断点\",{\"1\":{\"494\":1}}],[\"预取机制以及空间局部性和时间局部性等数据加载机制\",{\"1\":{\"33\":1}}],[\"快速定位和解决程序中的问题\",{\"1\":{\"490\":1}}],[\"快速排序\",{\"1\":{\"15\":1}}],[\"核心转储文件\",{\"1\":{\"490\":1}}],[\"帧\",{\"1\":{\"487\":1}}],[\"监视变量\",{\"1\":{\"485\":3}}],[\"监视变量变化\",{\"1\":{\"485\":1}}],[\"监听在\",{\"1\":{\"319\":1}}],[\"库\",{\"1\":{\"471\":1}}],[\"└──\",{\"1\":{\"463\":1}}],[\"├──\",{\"1\":{\"463\":1}}],[\"声明最低\",{\"1\":{\"461\":1}}],[\"声明一个变量\",{\"1\":{\"32\":1}}],[\"项目\",{\"1\":{\"468\":1,\"474\":1}}],[\"项目结构\",{\"0\":{\"463\":1}}],[\"项目采用\",{\"1\":{\"460\":1}}],[\"项目文件\",{\"1\":{\"460\":1,\"474\":1}}],[\"项目都至少需要一个\",{\"1\":{\"460\":1}}],[\"项目的构建管理\",{\"1\":{\"458\":1}}],[\"官方网站\",{\"1\":{\"459\":1}}],[\"官方文档入门教程\",{\"1\":{\"399\":1}}],[\"官方文档\",{\"1\":{\"322\":1,\"455\":1}}],[\"帮助简化调试流程\",{\"1\":{\"502\":1}}],[\"帮助你快速上手\",{\"1\":{\"458\":1}}],[\"帮助调试网络问题\",{\"1\":{\"347\":1}}],[\"掌握这些操作将帮助你有效地管理项目依赖关系和模块化代码结构\",{\"1\":{\"454\":1}}],[\"掌握正则表达式的语法和使用场景\",{\"1\":{\"412\":1}}],[\"称为嵌套子模块\",{\"1\":{\"453\":1}}],[\"手动删除子模块目录并从版本控制中移除\",{\"1\":{\"451\":1}}],[\"克隆仓库时自动初始化和更新子模块\",{\"1\":{\"448\":1}}],[\"你需要先初始化它们\",{\"1\":{\"448\":1}}],[\"你可能希望子模块保持在特定的\",{\"1\":{\"452\":1}}],[\"你可能会发现一个问题\",{\"1\":{\"42\":1}}],[\"你可以快速上手并使用\",{\"1\":{\"474\":1}}],[\"你可以运行它\",{\"1\":{\"469\":1}}],[\"你可以轻松地添加\",{\"1\":{\"454\":1}}],[\"你可以将子模块更新到最新版本\",{\"1\":{\"450\":1}}],[\"你可以使用\",{\"1\":{\"432\":1,\"470\":1,\"473\":1}}],[\"你可以通过在量词后添加\",{\"1\":{\"411\":1}}],[\"你可以继承这个类来自定义数据的显示和编辑行为\",{\"1\":{\"181\":1}}],[\"切换线程\",{\"1\":{\"489\":1}}],[\"切换到第\",{\"1\":{\"484\":1,\"487\":1,\"489\":1}}],[\"切换到指定分支\",{\"1\":{\"438\":1}}],[\"切换分支\",{\"1\":{\"438\":1}}],[\"丢弃更改\",{\"1\":{\"436\":1}}],[\"丢弃工作区文件和提交历史\",{\"1\":{\"436\":1}}],[\"丢失的末尾元素都是\",{\"1\":{\"10\":1}}],[\"丢失元素\",{\"1\":{\"10\":1}}],[\"丢失\",{\"1\":{\"9\":1}}],[\"恢复工作\",{\"1\":{\"435\":1}}],[\"恢复工作目录中文件的状态\",{\"1\":{\"434\":1}}],[\"恢复文件\",{\"1\":{\"434\":1}}],[\"暂存区和最新提交之间的差异\",{\"1\":{\"433\":1}}],[\"暂存原哈希表\",{\"1\":{\"61\":1,\"63\":1}}],[\"哪些文件未被跟踪\",{\"1\":{\"431\":1}}],[\"哪些文件被暂存\",{\"1\":{\"431\":1}}],[\"仓库克隆到当前项目的\",{\"1\":{\"447\":1}}],[\"仓库中包含另一个独立的\",{\"1\":{\"446\":1}}],[\"仓库\",{\"1\":{\"425\":1,\"446\":1,\"447\":1}}],[\"作用\",{\"1\":{\"425\":1,\"426\":1,\"427\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"435\":1,\"436\":1,\"438\":1,\"439\":1,\"440\":1,\"441\":1,\"443\":1,\"444\":1,\"445\":1,\"447\":1,\"449\":1,\"450\":1,\"451\":1,\"452\":1}}],[\"作为某些搜索算法的底层数据结构\",{\"1\":{\"94\":1}}],[\"作为\",{\"1\":{\"71\":1,\"100\":1,\"101\":1,\"167\":1}}],[\"作为模数\",{\"1\":{\"69\":1}}],[\"作为初始容量\",{\"1\":{\"32\":1}}],[\"广泛用于调试\",{\"1\":{\"478\":1}}],[\"广泛用于\",{\"1\":{\"458\":1}}],[\"广泛用于开发和项目管理中\",{\"1\":{\"423\":1}}],[\"广度优先遍历到最底层之前\",{\"1\":{\"111\":1}}],[\"副业\",{\"2\":{\"419\":1}}],[\"副业搞钱\",{\"0\":{\"418\":1}}],[\"日期格式等\",{\"1\":{\"412\":1}}],[\"日志记录\",{\"1\":{\"222\":1}}],[\"日志处理\",{\"1\":{\"160\":1}}],[\"验证至少包含\",{\"1\":{\"412\":1}}],[\"验证输入是否符合特定格式\",{\"1\":{\"412\":1}}],[\"验证资源是否更新\",{\"1\":{\"343\":1}}],[\"贪婪匹配\",{\"1\":{\"411\":1}}],[\"贪婪\",{\"1\":{\"411\":1}}],[\"至多\",{\"1\":{\"410\":1}}],[\"至少\",{\"1\":{\"410\":2}}],[\"至于根节点的选择\",{\"1\":{\"111\":1}}],[\"恰好\",{\"1\":{\"410\":1}}],[\"恰好满足这种等差数列的数据分布\",{\"1\":{\"69\":1}}],[\"次\",{\"1\":{\"409\":1,\"410\":4,\"411\":2}}],[\"次或更多\",{\"1\":{\"411\":2}}],[\"次或\",{\"1\":{\"409\":1,\"411\":1}}],[\"次或多次\",{\"1\":{\"409\":2}}],[\"问号\",{\"1\":{\"409\":1}}],[\"问题出来了\",{\"1\":{\"208\":1}}],[\"问题\",{\"1\":{\"202\":1}}],[\"星号\",{\"1\":{\"409\":1}}],[\"换行符等\",{\"1\":{\"405\":1}}],[\"换句话说\",{\"1\":{\"46\":1,\"58\":1,\"73\":1,\"95\":1,\"99\":1}}],[\"制表符\",{\"1\":{\"405\":1}}],[\"捕获匹配的内容\",{\"1\":{\"404\":1}}],[\"捕捉用户输入\",{\"1\":{\"166\":1}}],[\"美元符号\",{\"1\":{\"404\":1}}],[\"匹配电子邮件地址\",{\"1\":{\"412\":1}}],[\"匹配美国电话号码格式\",{\"1\":{\"412\":1}}],[\"匹配尽可能少的字符\",{\"1\":{\"411\":1}}],[\"匹配至少两位数字\",{\"1\":{\"410\":1}}],[\"匹配前面的字符\",{\"1\":{\"409\":3,\"410\":3}}],[\"匹配非单词边界\",{\"1\":{\"407\":1}}],[\"匹配\",{\"1\":{\"407\":1,\"411\":4,\"412\":1}}],[\"匹配一个单词的边界\",{\"1\":{\"407\":1}}],[\"匹配除了\",{\"1\":{\"406\":1}}],[\"匹配从\",{\"1\":{\"406\":1}}],[\"匹配字符\",{\"1\":{\"406\":1}}],[\"匹配字符串的结束位置\",{\"1\":{\"404\":1}}],[\"匹配字符串的开始位置\",{\"1\":{\"404\":1}}],[\"匹配任意大小写字母\",{\"1\":{\"406\":1}}],[\"匹配任意元音字母\",{\"1\":{\"406\":1}}],[\"匹配任意一个空白字符\",{\"1\":{\"405\":1}}],[\"匹配任意一个非空白字符\",{\"1\":{\"405\":1}}],[\"匹配任意一个非字母\",{\"1\":{\"405\":1}}],[\"匹配任意一个非数字字符\",{\"1\":{\"405\":1,\"406\":1}}],[\"匹配任意一个字母\",{\"1\":{\"405\":1}}],[\"匹配任意一个数字字符\",{\"1\":{\"405\":1,\"406\":1}}],[\"匹配任意单个字符\",{\"1\":{\"404\":1}}],[\"匹配左边或右边的表达式\",{\"1\":{\"404\":1}}],[\"匹配方括号内的任意一个字符\",{\"1\":{\"404\":1}}],[\"匹配模式\",{\"1\":{\"388\":1}}],[\"点号\",{\"1\":{\"404\":1}}],[\"量词是\",{\"1\":{\"411\":1}}],[\"量词允许你指定匹配的数量范围\",{\"1\":{\"408\":1}}],[\"量词用于控制前一个字符或子表达式出现的次数\",{\"1\":{\"408\":1}}],[\"量词\",{\"1\":{\"402\":1,\"412\":1}}],[\"替换操作\",{\"1\":{\"412\":1}}],[\"替换等文本处理操作中具有强大的功能\",{\"1\":{\"402\":1}}],[\"替换为\",{\"1\":{\"101\":2}}],[\"替换为质数\",{\"1\":{\"69\":1}}],[\"简化一些常用但复杂的\",{\"1\":{\"495\":1}}],[\"简化加密字符串的使用\",{\"1\":{\"286\":1}}],[\"简称正则或\",{\"1\":{\"402\":1}}],[\"正确\",{\"1\":{\"454\":1}}],[\"正则表达式的强大在于其灵活性\",{\"1\":{\"412\":1}}],[\"正则表达式的基本使用\",{\"0\":{\"402\":1}}],[\"正则表达式广泛应用于文本解析\",{\"1\":{\"402\":1}}],[\"正则表达式\",{\"1\":{\"402\":1},\"2\":{\"415\":1}}],[\"正在等待某个事件\",{\"1\":{\"213\":1}}],[\"员工平均工资大于\",{\"1\":{\"397\":1}}],[\"复杂查询往往用于解决特定业务需求\",{\"1\":{\"397\":1}}],[\"复杂查询场景可能涉及多种查询操作的组合\",{\"1\":{\"397\":1}}],[\"条指令\",{\"1\":{\"484\":1}}],[\"条记录\",{\"1\":{\"396\":1}}],[\"条件断点\",{\"1\":{\"485\":1}}],[\"条件查询用于根据特定条件筛选数据\",{\"1\":{\"388\":1}}],[\"条件查询\",{\"1\":{\"386\":1,\"397\":1}}],[\"条件变量需要和锁配合使用\",{\"1\":{\"260\":1}}],[\"条件变量是c++11引入的一种同步机制\",{\"1\":{\"260\":1}}],[\"条件变量常用于线程之间的协调\",{\"1\":{\"238\":1}}],[\"条件变量与一个互斥量和一个条件状态相关联\",{\"1\":{\"238\":1}}],[\"条件变量用于线程之间的等待和通知机制\",{\"1\":{\"238\":1}}],[\"全联接\",{\"1\":{\"392\":1}}],[\"全部构造函数被调用后才会有最后的vtable\",{\"1\":{\"208\":1}}],[\"求最大值\",{\"1\":{\"391\":1}}],[\"求最小值\",{\"1\":{\"391\":1}}],[\"求平均值\",{\"1\":{\"391\":1}}],[\"求和\",{\"1\":{\"391\":1}}],[\"统计每个部门的员工数量\",{\"1\":{\"390\":1}}],[\"按特定列分组\",{\"1\":{\"397\":1}}],[\"按\",{\"1\":{\"389\":1}}],[\"默认生成\",{\"1\":{\"474\":1}}],[\"默认从当前跟踪的远程分支拉取更新\",{\"1\":{\"443\":1}}],[\"默认情况下\",{\"1\":{\"411\":1}}],[\"默认会去除重复行\",{\"1\":{\"395\":1}}],[\"默认按升序排序\",{\"1\":{\"389\":1}}],[\"默认的委托类是\",{\"1\":{\"181\":1}}],[\"范围内的任意一个字符\",{\"1\":{\"406\":1}}],[\"范围\",{\"1\":{\"388\":1,\"412\":1}}],[\"联合查询\",{\"1\":{\"397\":1}}],[\"联合查询将多个\",{\"1\":{\"395\":1}}],[\"联合查询等\",{\"1\":{\"386\":1}}],[\"联接\",{\"1\":{\"392\":1}}],[\"联接查询\",{\"1\":{\"386\":1,\"397\":1}}],[\"聚合查询\",{\"1\":{\"397\":1}}],[\"聚合查询用于对一组数据进行计算\",{\"1\":{\"391\":1}}],[\"聚合\",{\"1\":{\"386\":1}}],[\"聚集现象\",{\"1\":{\"63\":1}}],[\"排序查询\",{\"1\":{\"397\":1}}],[\"排序\",{\"1\":{\"386\":1}}],[\"排序和搜索\",{\"1\":{\"15\":1}}],[\"涉及从简单的记录提取到复杂的多表关联\",{\"1\":{\"386\":1}}],[\"要真正熟悉\",{\"1\":{\"366\":1}}],[\"要等待的子进程的进程\",{\"1\":{\"298\":1}}],[\"微服务通信\",{\"0\":{\"364\":1}}],[\"微信公众号\",{\"1\":{\"3\":1}}],[\"逐步增加重试的时间间隔\",{\"1\":{\"362\":1}}],[\"逐个向后遍历\",{\"1\":{\"21\":1}}],[\"网络故障恢复\",{\"0\":{\"362\":1}}],[\"幂等操作\",{\"1\":{\"361\":1}}],[\"幂等性\",{\"1\":{\"331\":1}}],[\"尽量避免与标准规范冲突\",{\"1\":{\"358\":1}}],[\"尽管在删除操作完成后节点\",{\"1\":{\"20\":1}}],[\"懒惰\",{\"1\":{\"411\":1}}],[\"懒加载\",{\"1\":{\"351\":1}}],[\"懒删除可能会加速哈希表的性能退化\",{\"1\":{\"63\":1}}],[\"合理使用\",{\"1\":{\"505\":1}}],[\"合理使用状态码来表示不同的操作结果\",{\"1\":{\"346\":1}}],[\"合并分支\",{\"1\":{\"440\":1}}],[\"合并最近几次的commit\",{\"1\":{\"430\":1}}],[\"合并多个\",{\"1\":{\"397\":1}}],[\"合并图片\",{\"1\":{\"351\":1}}],[\"压缩\",{\"0\":{\"350\":1}}],[\"压缩请求和响应头\",{\"1\":{\"334\":1}}],[\"流量\",{\"1\":{\"347\":1}}],[\"决定是否重新获取资源\",{\"1\":{\"343\":1}}],[\"决定了输出值\",{\"1\":{\"67\":1}}],[\"协商缓存\",{\"1\":{\"343\":1}}],[\"协议在现代网络应用开发中无处不在\",{\"1\":{\"366\":1}}],[\"协议在架构中的角色\",{\"0\":{\"363\":1}}],[\"协议的基础上进行升级\",{\"1\":{\"348\":1}}],[\"协议版本\",{\"0\":{\"332\":1}}],[\"协议\",{\"1\":{\"330\":1,\"335\":1,\"348\":1,\"352\":1}}],[\"强缓存\",{\"1\":{\"343\":1}}],[\"强缓存和协商缓存\",{\"0\":{\"343\":1}}],[\"强制使用std\",{\"1\":{\"262\":1}}],[\"秒\",{\"1\":{\"342\":1}}],[\"防御\",{\"1\":{\"340\":2}}],[\"防止内核起始地址随机化\",{\"1\":{\"319\":1}}],[\"防止僵尸进程\",{\"1\":{\"303\":1,\"304\":1}}],[\"防止旧数据包干扰\",{\"1\":{\"290\":1}}],[\"防止线程由于编码失误导致一直持有锁\",{\"1\":{\"257\":1}}],[\"防止频繁扩容\",{\"1\":{\"59\":1}}],[\"身份验证\",{\"0\":{\"339\":1}}],[\"跨域资源共享\",{\"0\":{\"338\":1}}],[\"证书链\",{\"1\":{\"337\":1}}],[\"证书\",{\"1\":{\"337\":1}}],[\"工程文件\",{\"1\":{\"458\":1}}],[\"工具箱\",{\"0\":{\"509\":1}}],[\"工具\",{\"2\":{\"422\":1,\"456\":1,\"476\":1,\"492\":1,\"507\":1,\"510\":1}}],[\"工作原理\",{\"1\":{\"337\":1}}],[\"工厂方法模式\",{\"0\":{\"309\":1}}],[\"工厂接口\",{\"1\":{\"149\":1}}],[\"工厂模式提供了一种创建对象的方式\",{\"1\":{\"148\":1}}],[\"工厂模式和抽象工厂模式都是创建型设计模式\",{\"1\":{\"147\":1}}],[\"工厂模式\",{\"0\":{\"146\":1,\"148\":1},\"1\":{\"117\":1,\"153\":1},\"2\":{\"155\":1}}],[\"抖动较大的网络环境下的性能\",{\"1\":{\"335\":1}}],[\"抗网络抖动\",{\"1\":{\"335\":1}}],[\"抗碰撞性\",{\"1\":{\"68\":2}}],[\"域名\",{\"1\":{\"330\":1}}],[\"控制调试的流程\",{\"1\":{\"495\":1}}],[\"控制匹配的数量\",{\"1\":{\"412\":1}}],[\"控制缓存行为\",{\"1\":{\"329\":1}}],[\"控制器\",{\"1\":{\"169\":1}}],[\"令牌\",{\"1\":{\"329\":1}}],[\"令它指向子类的虚表\",{\"1\":{\"205\":1}}],[\"令它指向父类的虚表\",{\"1\":{\"205\":1}}],[\"临时重定向\",{\"1\":{\"328\":1}}],[\"临时量的析构函数等待\",{\"1\":{\"262\":1}}],[\"永久重定向\",{\"1\":{\"328\":1}}],[\"文档\",{\"1\":{\"327\":1,\"475\":1}}],[\"文件是\",{\"1\":{\"505\":1}}],[\"文件自动化常见任务\",{\"1\":{\"505\":1}}],[\"文件时存在潜在的安全问题\",{\"1\":{\"505\":1}}],[\"文件在\",{\"1\":{\"504\":1}}],[\"文件在当前目录\",{\"1\":{\"316\":1}}],[\"文件示例\",{\"1\":{\"504\":1}}],[\"文件加载调试插件\",{\"1\":{\"503\":1}}],[\"文件中预定义命令\",{\"1\":{\"505\":1}}],[\"文件中预先定义好一些断点\",{\"1\":{\"498\":1}}],[\"文件中移除子模块的配置条目\",{\"1\":{\"451\":1}}],[\"文件中移除子模块条目\",{\"1\":{\"451\":1}}],[\"文件仅在当前目录中启动\",{\"1\":{\"496\":1}}],[\"文件后\",{\"1\":{\"490\":1}}],[\"文件的常用配置\",{\"0\":{\"497\":1}}],[\"文件的常见位置\",{\"0\":{\"496\":1}}],[\"文件的主要作用是自动执行一组\",{\"1\":{\"495\":1}}],[\"文件的作用\",{\"0\":{\"495\":1}}],[\"文件的\",{\"1\":{\"482\":1}}],[\"文件的第\",{\"1\":{\"482\":1}}],[\"文件通常包含以下内容\",{\"1\":{\"461\":1}}],[\"文件或\",{\"1\":{\"458\":1,\"460\":1}}],[\"文件config\",{\"1\":{\"321\":1}}],[\"文件\",{\"1\":{\"320\":1,\"351\":1,\"460\":1,\"465\":1,\"480\":1,\"490\":2,\"494\":1,\"496\":4,\"505\":1}}],[\"文件内容\",{\"1\":{\"317\":1}}],[\"文件描述符等\",{\"1\":{\"216\":1}}],[\"文件日志\",{\"1\":{\"160\":1}}],[\"文件流\",{\"1\":{\"137\":1}}],[\"携带数据内容\",{\"1\":{\"327\":1}}],[\"版本要求\",{\"1\":{\"461\":1}}],[\"版本\",{\"1\":{\"327\":2,\"461\":1}}],[\"部分更新资源\",{\"1\":{\"327\":1}}],[\"跳过函数调用\",{\"1\":{\"321\":1}}],[\"跳出循环\",{\"1\":{\"89\":1,\"91\":1}}],[\"跳出循环并返回该节点\",{\"1\":{\"89\":1}}],[\"未授权\",{\"1\":{\"328\":1}}],[\"未压缩的内核映像\",{\"1\":{\"320\":1}}],[\"未被移动或绑定到引用\",{\"1\":{\"262\":1}}],[\"端口\",{\"1\":{\"319\":1,\"330\":1}}],[\"断点是调试时用于暂停程序执行的标志\",{\"1\":{\"482\":1}}],[\"断点不能命中\",{\"1\":{\"319\":1}}],[\"断开更加安全\",{\"1\":{\"34\":1}}],[\"附加参数\",{\"1\":{\"319\":1}}],[\"参数用于设置\",{\"1\":{\"321\":1}}],[\"参数必须添加进来\",{\"1\":{\"319\":1}}],[\"参数说明\",{\"1\":{\"319\":1}}],[\"参考文档\",{\"1\":{\"491\":1,\"506\":1}}],[\"参考资料\",{\"0\":{\"455\":1}}],[\"参考\",{\"0\":{\"322\":1,\"399\":1,\"413\":1,\"475\":1,\"491\":1,\"506\":1},\"1\":{\"244\":2}}],[\"$pc\",{\"1\":{\"484\":1,\"502\":1,\"504\":1}}],[\"$\",{\"1\":{\"317\":1,\"404\":1,\"412\":1,\"470\":1,\"471\":2}}],[\"必须设置成可执行文件\",{\"1\":{\"317\":1}}],[\"必要使用链表的情况主要是二叉树和图\",{\"1\":{\"34\":1}}],[\"安全性问题\",{\"1\":{\"505\":1}}],[\"安全性要求\",{\"1\":{\"366\":1}}],[\"安全性\",{\"0\":{\"336\":1},\"1\":{\"331\":1}}],[\"安全等级\",{\"1\":{\"70\":1}}],[\"安装\",{\"0\":{\"318\":1}}],[\"安装完成后生成的相关文件会在\",{\"1\":{\"317\":1}}],[\"路径以及子模块是否是最新的\",{\"1\":{\"449\":1}}],[\"路径\",{\"1\":{\"316\":1,\"330\":1}}],[\"拷贝编译好的镜像备用\",{\"1\":{\"316\":1}}],[\"拷贝构造函数调用了两次\",{\"1\":{\"268\":1}}],[\"拷贝构造函数拷贝指针并增加与之相应的引用计数\",{\"1\":{\"265\":1}}],[\"配置调试选项和加载符号文件\",{\"1\":{\"504\":1}}],[\"配置调试环境的各类选项\",{\"1\":{\"501\":1}}],[\"配置调试环境\",{\"0\":{\"501\":1},\"1\":{\"504\":1}}],[\"配置调试环境等\",{\"1\":{\"494\":1}}],[\"配置内核\",{\"1\":{\"316\":1}}],[\"配置更改的更新\",{\"0\":{\"310\":1}}],[\"环境准备\",{\"0\":{\"315\":1}}],[\"环形引用\",{\"1\":{\"267\":1}}],[\"环形数组\",{\"1\":{\"42\":1,\"63\":1}}],[\"环形链表常用于需要周期性操作的场景\",{\"1\":{\"25\":1}}],[\"环形链表\",{\"1\":{\"24\":1,\"33\":1}}],[\"做具体的浏览操作\",{\"1\":{\"311\":1}}],[\"做题\",{\"1\":{\"34\":1}}],[\"装载不同\",{\"1\":{\"311\":1}}],[\"装饰器类\",{\"1\":{\"136\":1}}],[\"装饰器模式在需要动态添加功能的场景中非常有用\",{\"1\":{\"137\":1}}],[\"装饰器模式通常涉及以下几个角色\",{\"1\":{\"136\":1}}],[\"装饰器模式主要解决的问题是\",{\"1\":{\"135\":1}}],[\"装饰器模式\",{\"0\":{\"134\":1},\"1\":{\"135\":1,\"137\":1},\"2\":{\"139\":1}}],[\"绘制参数\",{\"1\":{\"308\":1}}],[\"梳理下在工作中使用到的设计模式\",{\"0\":{\"307\":1}}],[\"失败时\",{\"1\":{\"299\":1}}],[\"失衡节点的平衡因子\",{\"1\":{\"104\":1}}],[\"失衡节点\",{\"1\":{\"99\":1}}],[\"成功状态码\",{\"1\":{\"328\":1}}],[\"成功时\",{\"1\":{\"299\":1}}],[\"成为进程之间协调和数据共享的关键手段\",{\"1\":{\"223\":1}}],[\"优化和安全性方面的应用\",{\"1\":{\"366\":1}}],[\"优化应用程序性能\",{\"1\":{\"294\":1}}],[\"优点\",{\"0\":{\"171\":1}}],[\"建立连接时的握手状态\",{\"1\":{\"293\":1}}],[\"建立链表分为两步\",{\"1\":{\"18\":1}}],[\"准备接受连接\",{\"1\":{\"292\":1}}],[\"双方都接收到对方的确认包后\",{\"1\":{\"292\":1}}],[\"双方同时发送fin包时会进入这个状态\",{\"1\":{\"290\":1}}],[\"双向绑定\",{\"1\":{\"168\":1}}],[\"双向队列就像是栈和队列的组合或两个栈拼在了一起\",{\"1\":{\"52\":1}}],[\"双向队列像是两个栈拼接在了一起\",{\"1\":{\"52\":1}}],[\"双向队列\",{\"1\":{\"52\":1}}],[\"双向队列是一种具有更高自由度的队列\",{\"1\":{\"51\":1}}],[\"双向队列适合使用链表实现\",{\"1\":{\"34\":1}}],[\"双向链表的特性使得这种操作变得简单\",{\"1\":{\"25\":1}}],[\"双向链表的节点定义同时包含指向后继节点\",{\"1\":{\"24\":1}}],[\"双向链表常用于需要快速查找前一个和后一个元素的场景\",{\"1\":{\"25\":1}}],[\"双向链表节点结构体\",{\"1\":{\"24\":1}}],[\"双向链表更具灵活性\",{\"1\":{\"24\":1}}],[\"双向链表记录了两个方向的引用\",{\"1\":{\"24\":1}}],[\"双向链表\",{\"1\":{\"24\":1,\"33\":1}}],[\"结尾的字符串\",{\"1\":{\"404\":1}}],[\"结果集\",{\"1\":{\"397\":1}}],[\"结合队列\",{\"1\":{\"365\":1}}],[\"结束\",{\"1\":{\"290\":1}}],[\"结构化查询语言\",{\"1\":{\"369\":1}}],[\"结构\",{\"0\":{\"124\":1,\"130\":1,\"136\":1,\"142\":1,\"149\":1,\"152\":1,\"158\":1}}],[\"结构型模式\",{\"1\":{\"117\":1}}],[\"状态码的使用\",{\"1\":{\"346\":1}}],[\"状态码\",{\"0\":{\"328\":1}}],[\"状态码和状态描述\",{\"1\":{\"327\":1}}],[\"状态行\",{\"1\":{\"327\":1}}],[\"状态的作用\",{\"0\":{\"293\":1}}],[\"状态转换的简要说明\",{\"0\":{\"292\":1}}],[\"状态转换图\",{\"0\":{\"291\":1}}],[\"状态转换示意图\",{\"0\":{\"215\":1}}],[\"状态时进入\",{\"1\":{\"290\":1}}],[\"服务器上现有的所有数据库\",{\"1\":{\"372\":1}}],[\"服务器分批发送数据块\",{\"1\":{\"359\":1}}],[\"服务器可以持续向客户端推送更新的数据\",{\"1\":{\"356\":1}}],[\"服务器可以主动向客户端推送资源\",{\"1\":{\"334\":1}}],[\"服务器自动向预设的\",{\"1\":{\"355\":1}}],[\"服务器推送\",{\"1\":{\"334\":1,\"352\":1}}],[\"服务器暂时无法处理请求\",{\"1\":{\"328\":1}}],[\"服务器内部错误\",{\"1\":{\"328\":1}}],[\"服务器错误状态码\",{\"1\":{\"328\":1}}],[\"服务器返回所请求的数据\",{\"1\":{\"328\":1}}],[\"服务器\",{\"1\":{\"320\":1}}],[\"服务器等待连接请求的状态\",{\"1\":{\"293\":1}}],[\"服务器接收到syn包后\",{\"1\":{\"292\":1}}],[\"服务器调用listen\",{\"1\":{\"292\":1}}],[\"服务器在接收到客户端的syn包后\",{\"1\":{\"290\":1}}],[\"服务器套接字正在监听连接请求\",{\"1\":{\"290\":1}}],[\"服务器中\",{\"1\":{\"160\":1}}],[\"传输编码\",{\"0\":{\"359\":1}}],[\"传输数据\",{\"1\":{\"289\":1}}],[\"传入的是子树的根节点\",{\"1\":{\"111\":1}}],[\"逆向\",{\"2\":{\"288\":1}}],[\"逆向工程常通过执行文件的中静态字符串信息找到关键点函数进行逆向\",{\"1\":{\"282\":1}}],[\"演示如何使用\",{\"1\":{\"286\":1}}],[\"特殊值如下\",{\"1\":{\"298\":1}}],[\"特性\",{\"0\":{\"353\":1},\"1\":{\"286\":1}}],[\"特别适合需要在用户界面中展示大量或复杂数据的应用程序\",{\"1\":{\"177\":1}}],[\"特别是在现代前端框架\",{\"1\":{\"169\":1}}],[\"特别是在需要扩展产品种类或改变产品族的实现时\",{\"1\":{\"153\":1}}],[\"密钥是字符的位置索引\",{\"1\":{\"286\":1}}],[\"密码存储\",{\"1\":{\"68\":1}}],[\"敏感信息在编译时就被加密\",{\"1\":{\"284\":1}}],[\"命令加载动态库的符号\",{\"1\":{\"488\":1}}],[\"命令用于查看内存中的内容\",{\"1\":{\"484\":1}}],[\"命令用于查看当前的调用堆栈\",{\"1\":{\"484\":1}}],[\"命令修改变量的值\",{\"1\":{\"484\":1}}],[\"命令修改表中的现有记录\",{\"1\":{\"384\":1}}],[\"命令查看变量的值\",{\"1\":{\"484\":1}}],[\"命令查看表的列结构\",{\"1\":{\"377\":1}}],[\"命令设置断点\",{\"1\":{\"482\":1}}],[\"命令及其详细说明\",{\"1\":{\"423\":1}}],[\"命令删除表中的记录\",{\"1\":{\"385\":1}}],[\"命令将一行或多行数据插入表中\",{\"1\":{\"383\":1}}],[\"命令可以修改现有表的结构\",{\"1\":{\"379\":1}}],[\"命令来创建一个新表\",{\"1\":{\"376\":1}}],[\"命令选择该数据库\",{\"1\":{\"373\":1}}],[\"命令创建一个新的数据库\",{\"1\":{\"371\":1}}],[\"命令行工具\",{\"1\":{\"347\":1}}],[\"命令继续运行内核\",{\"1\":{\"320\":1}}],[\"命令连接到\",{\"1\":{\"320\":1}}],[\"命令\",{\"0\":{\"321\":1,\"468\":1},\"1\":{\"320\":1,\"447\":1,\"449\":1,\"450\":1,\"452\":1,\"481\":1,\"485\":1,\"495\":2},\"2\":{\"281\":1}}],[\"命名为例\",{\"1\":{\"45\":1}}],[\"语句的结果合并到一个结果集中\",{\"1\":{\"395\":1}}],[\"语句\",{\"1\":{\"387\":1}}],[\"语句可以查询表中的数据\",{\"1\":{\"378\":1}}],[\"语法糖\",{\"0\":{\"270\":1}}],[\"语言一样的方式\",{\"1\":{\"202\":1}}],[\"you\",{\"1\":{\"420\":4}}],[\"your\",{\"1\":{\"173\":1,\"420\":2}}],[\"york\",{\"1\":{\"397\":1}}],[\"y\",{\"1\":{\"272\":2}}],[\"year\",{\"1\":{\"269\":4}}],[\"比之前少了一次拷贝构造和一次析构\",{\"1\":{\"268\":1}}],[\"比如链表节点\",{\"1\":{\"71\":1}}],[\"比如\",{\"1\":{\"34\":2,\"60\":1,\"495\":1}}],[\"比如在音频\",{\"1\":{\"25\":1}}],[\"比如在红黑树\",{\"1\":{\"25\":1}}],[\"比如操作系统的资源调度\",{\"1\":{\"25\":1}}],[\"比如以上代码中的链表可记作链表\",{\"1\":{\"18\":1}}],[\"比如数组\",{\"1\":{\"18\":1}}],[\"移动构造函数\",{\"1\":{\"268\":1}}],[\"移除和通知观察者的方法\",{\"1\":{\"124\":1}}],[\"弱引用\",{\"1\":{\"267\":1}}],[\"造成在结束时对同一内存指针多次释放而导致程序崩溃\",{\"1\":{\"266\":1}}],[\"局部变量的返回值除外\",{\"1\":{\"266\":1}}],[\"源指针被置空\",{\"1\":{\"266\":1}}],[\"转义字符\",{\"1\":{\"404\":1}}],[\"转移一个unique\",{\"1\":{\"266\":1}}],[\"转化为\",{\"1\":{\"47\":1}}],[\"赋值操作符减少左操作数所指对象的引用计数\",{\"1\":{\"265\":1}}],[\"赋给\",{\"1\":{\"9\":1}}],[\"智能指针将一个计数器与类指向的对象相关联\",{\"1\":{\"265\":1}}],[\"智能指针线程安全\",{\"1\":{\"264\":1}}],[\"智能指针是为没有垃圾回收机制的语言解决可能的内存泄露问题的利器\",{\"1\":{\"264\":1}}],[\"本地初始化一个新的\",{\"1\":{\"425\":1}}],[\"本文展示了该技术的一个具体实现示例\",{\"1\":{\"286\":1}}],[\"本文将介绍这一技术\",{\"1\":{\"282\":1}}],[\"本身并不操作或者管理资源\",{\"1\":{\"264\":1}}],[\"本书介绍的多是c++11的新特性\",{\"1\":{\"195\":1}}],[\"本书都有涉及\",{\"1\":{\"194\":1}}],[\"好在这些问题都可以解决\",{\"1\":{\"264\":1}}],[\"性能优化以及实际开发中的应用场景\",{\"1\":{\"366\":1}}],[\"性能优化和网络编程都非常有帮助\",{\"1\":{\"289\":1}}],[\"性能优化\",{\"0\":{\"263\":1,\"349\":1}}],[\"性能问题\",{\"1\":{\"172\":1}}],[\"异步\",{\"0\":{\"365\":1}}],[\"异步调用优先使用async取代创建线程\",{\"1\":{\"262\":1}}],[\"异或哈希\",{\"1\":{\"69\":1}}],[\"获得的\",{\"1\":{\"262\":1}}],[\"获取从第\",{\"1\":{\"396\":1}}],[\"获取资源\",{\"1\":{\"346\":1}}],[\"获取\",{\"1\":{\"316\":1}}],[\"获取thread\",{\"1\":{\"255\":1}}],[\"获取子进程的退出状态后\",{\"1\":{\"216\":1}}],[\"获取数据并显示在界面上\",{\"1\":{\"182\":1}}],[\"获取数据\",{\"1\":{\"182\":1}}],[\"获取或更新数据\",{\"1\":{\"165\":1}}],[\"获取节点\",{\"1\":{\"104\":1}}],[\"获取平衡因子\",{\"1\":{\"98\":1}}],[\"获取中序遍历中\",{\"1\":{\"91\":1}}],[\"获取中序遍历后继节点需要\",{\"1\":{\"91\":1}}],[\"获取所有值\",{\"1\":{\"58\":1}}],[\"获取所有键\",{\"1\":{\"58\":1}}],[\"获取所有键值对\",{\"1\":{\"58\":1}}],[\"获取栈的长度\",{\"1\":{\"45\":1,\"47\":1,\"48\":1}}],[\"获取队列的容量\",{\"1\":{\"42\":1}}],[\"获取队列的长度\",{\"1\":{\"39\":1,\"41\":1,\"42\":1}}],[\"获取并返回随机元素\",{\"1\":{\"8\":1}}],[\"惰性执行在当前线程\",{\"1\":{\"262\":1}}],[\"普通的计数器\",{\"1\":{\"258\":1}}],[\"看一段使用代码\",{\"1\":{\"262\":1}}],[\"看一个计数器的代码\",{\"1\":{\"258\":1}}],[\"看到了\",{\"1\":{\"205\":1}}],[\"少了一些成员函数\",{\"1\":{\"257\":1}}],[\"拿一个std\",{\"1\":{\"256\":1}}],[\"拿二叉搜索树来举例\",{\"1\":{\"111\":1}}],[\"带条件的聚合查询\",{\"1\":{\"391\":1}}],[\"带超时的互斥量\",{\"1\":{\"256\":2}}],[\"带来的性能开销和死锁风险\",{\"1\":{\"245\":1}}],[\"独占的互斥量\",{\"1\":{\"256\":1}}],[\"独立于\",{\"1\":{\"171\":1}}],[\"检查程序状态\",{\"0\":{\"484\":1},\"1\":{\"478\":1}}],[\"检查出所需的\",{\"1\":{\"452\":1}}],[\"检查子进程是否被信号终止\",{\"1\":{\"302\":1}}],[\"检查子进程是否正常退出\",{\"1\":{\"302\":1}}],[\"检查weak\",{\"1\":{\"267\":1}}],[\"检查线程可否被join\",{\"1\":{\"255\":1}}],[\"检查取出操作是否成功\",{\"1\":{\"249\":1}}],[\"检查插入操作是否成功\",{\"1\":{\"249\":1}}],[\"检查队列是否为空\",{\"1\":{\"249\":1}}],[\"检查队列是否已满\",{\"1\":{\"249\":1}}],[\"检查条件状态\",{\"1\":{\"238\":1}}],[\"启动时会自动执行上述命令\",{\"1\":{\"504\":1}}],[\"启动时会自动在指定位置设置断点\",{\"1\":{\"498\":1}}],[\"启动时自动执行一系列命令或配置\",{\"1\":{\"494\":1}}],[\"启动程序\",{\"0\":{\"481\":1}}],[\"启动带参数的程序\",{\"1\":{\"480\":1}}],[\"启动\",{\"0\":{\"480\":1},\"1\":{\"480\":1,\"488\":1}}],[\"启动服务\",{\"1\":{\"420\":1}}],[\"启动内核\",{\"0\":{\"319\":1},\"1\":{\"319\":1}}],[\"启动文件系统制作\",{\"0\":{\"317\":1}}],[\"启动消费者线程\",{\"1\":{\"248\":1,\"249\":1}}],[\"启动生产者线程\",{\"1\":{\"248\":1,\"249\":1}}],[\"引入的一个关键字\",{\"1\":{\"283\":1}}],[\"引入了连接保持\",{\"1\":{\"333\":1}}],[\"引入了\",{\"1\":{\"247\":1}}],[\"引用计数有一个问题就是互相引用形成环\",{\"1\":{\"267\":1}}],[\"引用计数器跟踪共有多少个类对象共享同一指针\",{\"1\":{\"265\":1}}],[\"引用计数会减1\",{\"1\":{\"265\":1}}],[\"引用记录了下一个节点的内存地址\",{\"1\":{\"16\":1}}],[\"引用\",{\"1\":{\"16\":3}}],[\"互相持有其他进程\",{\"1\":{\"244\":1}}],[\"互斥\",{\"1\":{\"244\":1}}],[\"互斥量可以独占\",{\"1\":{\"262\":1}}],[\"互斥量有一个内部状态\",{\"1\":{\"236\":1}}],[\"互斥量的核心原理是通过锁定和解锁机制来控制对共享资源的访问\",{\"1\":{\"236\":1}}],[\"禁止抢占\",{\"1\":{\"244\":1}}],[\"死锁问题的排查\",{\"1\":{\"244\":1}}],[\"死锁的四个条件\",{\"1\":{\"244\":1}}],[\"死锁\",{\"0\":{\"244\":1}}],[\"继续执行程序\",{\"1\":{\"321\":1,\"483\":1}}],[\"继续执行\",{\"1\":{\"243\":1}}],[\"继承与多态\",{\"0\":{\"204\":1}}],[\"继承自抽象类\",{\"1\":{\"142\":1}}],[\"继承装饰器类\",{\"1\":{\"136\":1}}],[\"倒数计数器\",{\"1\":{\"243\":1}}],[\"锁存器适用于需要等待一组线程或任务完成后才能继续执行的场景\",{\"1\":{\"243\":1}}],[\"锁存器计数减少\",{\"1\":{\"243\":1}}],[\"锁存器内部维护一个倒数计数器\",{\"1\":{\"243\":1}}],[\"锁存器类似于屏障\",{\"1\":{\"243\":1}}],[\"锁定\",{\"1\":{\"236\":1}}],[\"锁定或未锁定\",{\"1\":{\"236\":1}}],[\"屏障适用于并行计算中需要同步多个线程的场景\",{\"1\":{\"242\":1}}],[\"屏障解除\",{\"1\":{\"242\":1}}],[\"屏障内部维护一个计数器\",{\"1\":{\"242\":1}}],[\"屏障用于同步一组线程\",{\"1\":{\"242\":1}}],[\"屏蔽\",{\"1\":{\"46\":1}}],[\"忙等待\",{\"1\":{\"241\":1}}],[\"计数器加\",{\"1\":{\"240\":1}}],[\"计数器减\",{\"1\":{\"240\":1,\"242\":1,\"243\":1}}],[\"计数器初始值通常为资源的总量\",{\"1\":{\"240\":1}}],[\"计数器\",{\"1\":{\"240\":1,\"242\":1}}],[\"计算行数\",{\"1\":{\"391\":1}}],[\"计算插入元素后的尾部指针值\",{\"1\":{\"249\":1}}],[\"计算效率更高\",{\"1\":{\"70\":1}}],[\"计算开销越小\",{\"1\":{\"68\":1}}],[\"计算哈希值的过程应该足够快\",{\"1\":{\"68\":1}}],[\"计算桶索引\",{\"1\":{\"63\":1}}],[\"计算得到哈希值\",{\"1\":{\"58\":1}}],[\"计算队尾指针\",{\"1\":{\"42\":1}}],[\"计算机不仅会加载它\",{\"1\":{\"14\":1}}],[\"硬件支持\",{\"1\":{\"239\":1}}],[\"生成\",{\"1\":{\"474\":1}}],[\"生成的可执行文件将位于构建目录中\",{\"1\":{\"469\":1}}],[\"生成构建文件后\",{\"1\":{\"469\":1}}],[\"生成器\",{\"1\":{\"460\":1,\"469\":1}}],[\"生成新的提交\",{\"1\":{\"430\":1}}],[\"生成调试符号并编译内核\",{\"1\":{\"316\":1}}],[\"生成唯一键\",{\"1\":{\"225\":1,\"226\":1}}],[\"生产者插入数据\",{\"1\":{\"249\":1}}],[\"生产者线程\",{\"1\":{\"249\":1}}],[\"生产者线程通知消费者线程有新数据可用\",{\"1\":{\"238\":1}}],[\"消费者取出数据\",{\"1\":{\"249\":1}}],[\"消费者线程\",{\"1\":{\"249\":1}}],[\"消费者线程等待该通知\",{\"1\":{\"238\":1}}],[\"消费者模型等\",{\"1\":{\"240\":1}}],[\"消费者模型中\",{\"1\":{\"238\":1}}],[\"消息队列和任务系统\",{\"1\":{\"365\":1}}],[\"消息队列\",{\"1\":{\"230\":1}}],[\"消息队列可以实现多个进程之间的消息传递和同步\",{\"1\":{\"225\":1}}],[\"消息队列允许进程以消息为单位进行通信\",{\"1\":{\"225\":1}}],[\"消息传递系统等\",{\"1\":{\"125\":1}}],[\"消息通知\",{\"1\":{\"125\":1}}],[\"唤醒一个线程\",{\"1\":{\"240\":1}}],[\"唤醒一个或所有等待队列中的线程\",{\"1\":{\"238\":1}}],[\"唤醒所有等待的线程\",{\"1\":{\"238\":1}}],[\"变为\",{\"1\":{\"238\":1}}],[\"变量是一个整数\",{\"1\":{\"300\":1}}],[\"变量解释\",{\"0\":{\"300\":1}}],[\"变量的指针\",{\"1\":{\"298\":1}}],[\"变量\",{\"1\":{\"97\":1,\"484\":1}}],[\"读锁定\",{\"1\":{\"237\":1}}],[\"读写锁包含两个计数器\",{\"1\":{\"237\":1}}],[\"读写锁允许多个线程同时读取\",{\"1\":{\"237\":1}}],[\"维护一个等待队列\",{\"1\":{\"236\":1,\"237\":1,\"238\":1}}],[\"维护一个具体的状态\",{\"1\":{\"124\":1}}],[\"新增线程编程相关模块\",{\"0\":{\"254\":1}}],[\"新特性\",{\"0\":{\"253\":1}}],[\"新的线程与主线程没有任何关联\",{\"1\":{\"234\":1}}],[\"新建\",{\"1\":{\"213\":1,\"214\":1}}],[\"线程断点\",{\"1\":{\"489\":1}}],[\"线程池\",{\"1\":{\"262\":1}}],[\"线程同步\",{\"2\":{\"252\":1,\"277\":1}}],[\"线程同步机制\",{\"0\":{\"235\":1}}],[\"线程会持续等待直到成功取出元素\",{\"1\":{\"249\":1}}],[\"线程会持续等待直到成功插入\",{\"1\":{\"249\":1}}],[\"线程\",{\"1\":{\"244\":6}}],[\"线程等待直到锁存器倒数到零\",{\"1\":{\"243\":1}}],[\"线程将反复检查锁的状态\",{\"1\":{\"241\":1}}],[\"线程将自己添加到等待队列\",{\"1\":{\"238\":1}}],[\"线程在尝试获取锁时会反复检查锁的状态\",{\"1\":{\"241\":1}}],[\"线程在等待条件变量时\",{\"1\":{\"238\":1}}],[\"线程进入等待队列\",{\"1\":{\"240\":1}}],[\"线程再次进入等待状态\",{\"1\":{\"238\":1}}],[\"线程继续执行\",{\"1\":{\"237\":1,\"238\":1,\"240\":1}}],[\"线程资源在任务结束后会由操作系统自动回收\",{\"1\":{\"234\":1}}],[\"线程函数的返回值将会被忽略\",{\"1\":{\"234\":1,\"255\":1}}],[\"线程编程\",{\"0\":{\"233\":1}}],[\"线性探测法会根据预先设定的步长依次向下查找\",{\"1\":{\"73\":1}}],[\"线性探测使用固定步长\",{\"1\":{\"72\":1}}],[\"线性探测到\",{\"1\":{\"63\":1}}],[\"线性探测到该空桶就会返回\",{\"1\":{\"63\":1}}],[\"线性探测容易产生\",{\"1\":{\"63\":1}}],[\"线性探测采用固定步长的线性搜索来进行探测\",{\"1\":{\"63\":1}}],[\"线性探测\",{\"0\":{\"63\":1},\"1\":{\"63\":4,\"65\":1}}],[\"线性结构\",{\"2\":{\"36\":1}}],[\"线性查找\",{\"1\":{\"12\":1}}],[\"号和套接字\",{\"1\":{\"230\":1}}],[\"信息性状态码\",{\"1\":{\"328\":1}}],[\"信\",{\"1\":{\"230\":1}}],[\"信号后继续运行\",{\"1\":{\"298\":1}}],[\"信号停止\",{\"1\":{\"298\":1}}],[\"信号量适用于控制对资源的并发访问数量\",{\"1\":{\"240\":1}}],[\"信号量内部维护一个计数器\",{\"1\":{\"240\":1}}],[\"信号量是一种控制对共享资源访问的计数器\",{\"1\":{\"240\":1}}],[\"信号量是一种用于进程间同步的机制\",{\"1\":{\"227\":1}}],[\"信号量\",{\"1\":{\"230\":1}}],[\"信号可以用于进程间的简单通信或异常处理\",{\"1\":{\"228\":1}}],[\"信号是一种异步通知机制\",{\"1\":{\"228\":1}}],[\"信号处理\",{\"1\":{\"222\":1}}],[\"信号处理程序\",{\"1\":{\"218\":1}}],[\"信号处理子进程的结束\",{\"1\":{\"218\":1}}],[\"信号\",{\"1\":{\"218\":2}}],[\"套接字\",{\"1\":{\"229\":1}}],[\"套接字是一种网络通信的进程间通信方式\",{\"1\":{\"229\":1}}],[\"销毁共享内存\",{\"1\":{\"226\":1}}],[\"共享\",{\"1\":{\"244\":1}}],[\"共享内存\",{\"1\":{\"230\":1}}],[\"共享内存速度快\",{\"1\":{\"226\":1}}],[\"共享内存是一种高效的进程间通信方式\",{\"1\":{\"226\":1}}],[\"共同学习编程技术\",{\"1\":{\"3\":1}}],[\"|pid|\",{\"1\":{\"298\":1}}],[\"|\",{\"1\":{\"225\":1,\"226\":1,\"227\":1,\"262\":1,\"317\":1,\"404\":1,\"420\":1}}],[\"||\",{\"1\":{\"91\":1,\"107\":1,\"194\":1}}],[\"写锁定\",{\"1\":{\"237\":1}}],[\"写入管道\",{\"1\":{\"224\":1}}],[\"写日志等\",{\"1\":{\"222\":1}}],[\"管道符号\",{\"1\":{\"404\":1}}],[\"管道是一种半双工的通信方式\",{\"1\":{\"224\":1}}],[\"管道是最基本的\",{\"1\":{\"224\":1}}],[\"管理你的\",{\"1\":{\"474\":1}}],[\"管理和删除子模块\",{\"1\":{\"454\":1}}],[\"管理\",{\"0\":{\"446\":1}}],[\"管理分支\",{\"1\":{\"439\":1}}],[\"管理远程仓库地址\",{\"1\":{\"427\":1}}],[\"管理多个子进程\",{\"1\":{\"303\":1}}],[\"管理的资源是否被释放\",{\"1\":{\"264\":1}}],[\"管理数据\",{\"1\":{\"179\":1}}],[\"管理应用程序的核心数据\",{\"1\":{\"165\":1}}],[\"权限\",{\"1\":{\"222\":1}}],[\"某些特定场景下\",{\"1\":{\"358\":1}}],[\"某些守护进程需要特定的权限\",{\"1\":{\"222\":1}}],[\"某些语言可能没有专门提供栈类\",{\"1\":{\"45\":1}}],[\"注意\",{\"1\":{\"262\":1}}],[\"注意事项\",{\"0\":{\"222\":1,\"505\":1},\"1\":{\"321\":1}}],[\"注册信号处理程序\",{\"1\":{\"228\":1}}],[\"注册\",{\"1\":{\"218\":1}}],[\"清除文件权限掩码\",{\"1\":{\"221\":1}}],[\"清空列表\",{\"1\":{\"30\":1}}],[\"脱离终端\",{\"1\":{\"220\":1}}],[\"守护进程不能直接输出到终端\",{\"1\":{\"222\":1}}],[\"守护进程不再依赖于终端\",{\"1\":{\"221\":1}}],[\"守护进程通常需要处理系统信号\",{\"1\":{\"222\":1}}],[\"守护进程的其他工作逻辑可以写在这里\",{\"1\":{\"220\":1}}],[\"守护进程的主循环\",{\"1\":{\"220\":1}}],[\"守护进程\",{\"0\":{\"219\":1},\"1\":{\"219\":1}}],[\"选项来禁止加载这些文件\",{\"1\":{\"496\":1}}],[\"选项来添加提交信息\",{\"1\":{\"430\":1}}],[\"选项指定生成器\",{\"1\":{\"474\":1}}],[\"选项在克隆时自动初始化并更新所有子模块\",{\"1\":{\"448\":1}}],[\"选项简化输出\",{\"1\":{\"432\":1}}],[\"选项一起使用\",{\"1\":{\"303\":1}}],[\"选择\",{\"1\":{\"398\":1}}],[\"选择适当的方法管理子进程的生命周期\",{\"1\":{\"218\":1}}],[\"选取一个合理的数组初始容量\",{\"1\":{\"32\":1}}],[\"孙子进程\",{\"1\":{\"218\":1}}],[\"孙子进程则由\",{\"1\":{\"218\":1}}],[\"及时调用\",{\"1\":{\"218\":1}}],[\"及其以下节点形成的树\",{\"1\":{\"77\":2}}],[\"z|a\",{\"1\":{\"412\":1}}],[\"z\",{\"1\":{\"406\":3,\"412\":1}}],[\"z0\",{\"1\":{\"405\":2,\"412\":3}}],[\"za\",{\"1\":{\"405\":2,\"406\":1,\"412\":3}}],[\"zombie\",{\"1\":{\"216\":1}}],[\"zfooei\",{\"1\":{\"202\":1}}],[\"僵尸进程是因父进程未及时处理子进程的退出状态而产生的\",{\"1\":{\"218\":1}}],[\"僵尸进程的影响\",{\"0\":{\"217\":1}}],[\"僵尸进程的进程描述符才会被完全清除\",{\"1\":{\"216\":1}}],[\"僵尸进程\",{\"0\":{\"216\":1},\"1\":{\"216\":1}}],[\"终止\",{\"1\":{\"213\":1,\"214\":1}}],[\"阻塞直到函数返回\",{\"1\":{\"262\":1}}],[\"阻塞的进程会被移回就绪队列\",{\"1\":{\"214\":1}}],[\"阻塞\",{\"1\":{\"213\":1,\"214\":2}}],[\"资源已创建\",{\"1\":{\"328\":1}}],[\"资源只能同时分配给一个进程\",{\"1\":{\"244\":1}}],[\"资源占用\",{\"1\":{\"217\":1}}],[\"资源可用\",{\"1\":{\"213\":1}}],[\"资源\",{\"1\":{\"213\":1}}],[\"面试题\",{\"2\":{\"209\":1,\"231\":1,\"251\":1,\"276\":1,\"279\":1}}],[\"另外\",{\"1\":{\"208\":1}}],[\"另一次是在main函数中构造a对象产生的\",{\"1\":{\"268\":1}}],[\"另一个用于记录是否有写线程在等待\",{\"1\":{\"237\":1}}],[\"另一个是调用detach\",{\"1\":{\"255\":1}}],[\"另一个是调用\",{\"1\":{\"234\":1}}],[\"另一部分研究人员和黑客则致力于寻找哈希算法的安全性问题\",{\"1\":{\"70\":1}}],[\"另一方面\",{\"1\":{\"34\":2}}],[\"怎么找vtable呢\",{\"1\":{\"208\":1}}],[\"派生类中申请的空间就得不到释放从而产生内存泄漏\",{\"1\":{\"208\":1}}],[\"派生类对象的数据成员已经销毁\",{\"1\":{\"207\":1}}],[\"派生类的虚表指针指向的是自身的虚表\",{\"1\":{\"205\":1}}],[\"派生类的虚表指针指向的是基类的虚表\",{\"1\":{\"205\":1}}],[\"故而c++不会进行动态联编\",{\"1\":{\"207\":1}}],[\"测试结果显示\",{\"1\":{\"206\":1}}],[\"静态成员变量也是全局共享\",{\"1\":{\"206\":1}}],[\"父进程使用\",{\"1\":{\"303\":1}}],[\"父进程调用\",{\"1\":{\"302\":1}}],[\"父进程等待子进程结束\",{\"1\":{\"302\":1}}],[\"父进程等待第一个子进程退出\",{\"1\":{\"218\":1}}],[\"父进程\",{\"1\":{\"224\":1,\"225\":1,\"226\":1,\"227\":1}}],[\"父进程只需等待子进程的退出状态\",{\"1\":{\"218\":1}}],[\"父进程通过\",{\"1\":{\"218\":1}}],[\"父进程退出\",{\"1\":{\"218\":1,\"220\":1,\"221\":1}}],[\"父进程继续执行其任务\",{\"1\":{\"218\":1}}],[\"父进程可以在信号处理程序中调用\",{\"1\":{\"218\":1}}],[\"父进程会收到\",{\"1\":{\"218\":1}}],[\"父进程代码\",{\"1\":{\"218\":2,\"301\":1}}],[\"父进程在适当的时机调用\",{\"1\":{\"218\":1}}],[\"父类\",{\"1\":{\"205\":1}}],[\"父节点\",{\"1\":{\"77\":1}}],[\"能使重载的函数得到相应的调用\",{\"1\":{\"208\":1}}],[\"能找到正确的函数\",{\"1\":{\"205\":1}}],[\"能够显著提高调试效率\",{\"1\":{\"505\":1}}],[\"能够灵活应用于项目开发\",{\"1\":{\"2\":1}}],[\"能够设计高效的解决方案\",{\"1\":{\"2\":1}}],[\"能够快速开发跨平台应用\",{\"1\":{\"2\":1}}],[\"虚函数的作用在于通过父类的指针或者引用来调用它的时候可以变成调用子类的那个成员函数\",{\"1\":{\"208\":1}}],[\"虚函数主要用于在信息不全的情况下\",{\"1\":{\"208\":1}}],[\"虚函数相应一个指向vtable虚函数表的指针\",{\"1\":{\"208\":1}}],[\"虚函数表vtable在linux\",{\"1\":{\"206\":1}}],[\"虚函数表类似于类中静态成员变量\",{\"1\":{\"206\":1}}],[\"虚函数表类似一个数组\",{\"1\":{\"206\":1}}],[\"虚函数表存储虚函数的地址\",{\"1\":{\"206\":1}}],[\"虚函数表是全局共享的元素\",{\"1\":{\"206\":1}}],[\"虚函数表的缩写\",{\"1\":{\"205\":1}}],[\"虚表里保存了虚函数的入口地址\",{\"1\":{\"205\":1}}],[\"虚表指针vptr的初始化时间\",{\"0\":{\"206\":1}}],[\"虚表指针\",{\"1\":{\"205\":1}}],[\"虚表\",{\"1\":{\"205\":1}}],[\"例子中\",{\"1\":{\"205\":1}}],[\"例如设置断点\",{\"1\":{\"501\":1}}],[\"例如子模块当前指向的\",{\"1\":{\"449\":1}}],[\"例如一个大型项目包含多个子模块\",{\"1\":{\"446\":1}}],[\"例如被\",{\"1\":{\"298\":1}}],[\"例如限制同时访问文件的线程数\",{\"1\":{\"240\":1}}],[\"例如排序\",{\"1\":{\"183\":1}}],[\"例如事件系统\",{\"1\":{\"125\":1}}],[\"例如高度\",{\"1\":{\"111\":1}}],[\"例如在子查询中使用联接\",{\"1\":{\"397\":1}}],[\"例如在每个计算步骤完成后同步所有线程\",{\"1\":{\"242\":1}}],[\"例如在中断上下文或需要避免线程调度开销的情况下使用\",{\"1\":{\"241\":1}}],[\"例如在生产者\",{\"1\":{\"238\":1}}],[\"例如在二叉搜索树中\",{\"1\":{\"111\":1}}],[\"例如在链式地址中\",{\"1\":{\"73\":1}}],[\"例如在\",{\"1\":{\"59\":1,\"160\":1}}],[\"例如打印机的任务队列\",{\"1\":{\"43\":1}}],[\"例如初始化任务完成后启动主任务\",{\"1\":{\"243\":1}}],[\"例如初始化二维列表\",{\"1\":{\"34\":1}}],[\"例如初始容量\",{\"1\":{\"32\":1}}],[\"例如\",{\"1\":{\"15\":1,\"26\":1,\"32\":1,\"34\":3,\"49\":2,\"59\":1,\"68\":1,\"70\":2,\"72\":1,\"111\":1,\"168\":1,\"218\":1,\"320\":1,\"331\":1,\"471\":1,\"485\":1}}],[\"运行到\",{\"1\":{\"489\":1}}],[\"运行程序并传递参数\",{\"1\":{\"481\":1}}],[\"运行结束生成\",{\"1\":{\"316\":1}}],[\"运行结果\",{\"1\":{\"205\":1}}],[\"运行时动态分析\",{\"0\":{\"485\":1}}],[\"运行时解密的方法\",{\"1\":{\"282\":1}}],[\"运行时将会根据所指对象的实际类型来调用相应的函数\",{\"1\":{\"205\":1}}],[\"运行权限\",{\"1\":{\"222\":1}}],[\"运行\",{\"0\":{\"468\":1},\"1\":{\"213\":1,\"214\":4,\"431\":1}}],[\"运行上述代码后\",{\"1\":{\"159\":1}}],[\"被读取或写入时暂停\",{\"1\":{\"485\":1}}],[\"被读取时暂停\",{\"1\":{\"485\":1}}],[\"被暂停\",{\"1\":{\"319\":1}}],[\"被动关闭方在发送ack包后进入last\",{\"1\":{\"292\":1}}],[\"被动关闭方在发送ack并等待对方确认后进入这个状态\",{\"1\":{\"290\":1}}],[\"被动关闭方接收到fin包后进入close\",{\"1\":{\"292\":1}}],[\"被动关闭方接收到fin包后\",{\"1\":{\"290\":1}}],[\"被唤醒的线程重新获得互斥量\",{\"1\":{\"238\":1}}],[\"被释放给其他就绪进程\",{\"1\":{\"214\":1}}],[\"被mutable\",{\"1\":{\"203\":1}}],[\"被分配到同一个桶中的概率就越低\",{\"1\":{\"59\":1}}],[\"技术\",{\"1\":{\"202\":1,\"218\":2}}],[\"宏来加密和解密字符串\",{\"1\":{\"286\":1}}],[\"宏\",{\"1\":{\"286\":1}}],[\"宏定义用于简化加密字符串的使用\",{\"1\":{\"285\":1}}],[\"宏没有类型安全检查\",{\"1\":{\"201\":1}}],[\"宏用于定义常量和简单的代码片段\",{\"1\":{\"201\":1}}],[\"宏与constexpr\",{\"0\":{\"201\":1}}],[\"区别\",{\"0\":{\"201\":1}}],[\"地址值+sizeof\",{\"1\":{\"200\":2}}],[\"三位或四位数字\",{\"1\":{\"410\":1}}],[\"三者之间的关系\",{\"1\":{\"261\":1}}],[\"三者做运算时有差异\",{\"1\":{\"200\":1}}],[\"三种情况\",{\"1\":{\"91\":1}}],[\"析构函数为什么要虚函数\",{\"0\":{\"208\":1}}],[\"析构函数是用来销毁一个对象的\",{\"1\":{\"207\":1}}],[\"析构函数\",{\"1\":{\"199\":2}}],[\"析构方法\",{\"1\":{\"61\":1,\"63\":1}}],[\"释放操作\",{\"1\":{\"240\":1}}],[\"释放对象的操作符\",{\"1\":{\"199\":1}}],[\"释放内存的基础上还会额外调用构造\",{\"1\":{\"199\":1}}],[\"释放内存并置为\",{\"1\":{\"58\":1}}],[\"释放内存\",{\"1\":{\"13\":1,\"20\":1,\"41\":2,\"47\":2,\"58\":1,\"61\":3,\"91\":1}}],[\"延长变量的生命周期为整个程序的生命周期\",{\"1\":{\"198\":1}}],[\"限制作用范围\",{\"1\":{\"198\":1}}],[\"修饰除外\",{\"1\":{\"203\":1}}],[\"修饰成员函数表示函数体不会修改类成员\",{\"1\":{\"203\":1}}],[\"修饰局部变量\",{\"1\":{\"198\":1}}],[\"修饰全局变量或函数\",{\"1\":{\"198\":1}}],[\"修改程序计数器\",{\"1\":{\"484\":1}}],[\"修改变量值\",{\"1\":{\"478\":1,\"484\":1}}],[\"修改最后一次提交的信息或内容\",{\"1\":{\"430\":1}}],[\"修改commit信息\",{\"1\":{\"430\":1}}],[\"修改管理\",{\"0\":{\"428\":1}}],[\"修改列\",{\"1\":{\"379\":1}}],[\"修改\",{\"1\":{\"26\":1,\"398\":1}}],[\"基本用法\",{\"0\":{\"479\":1}}],[\"基本使用\",{\"0\":{\"423\":1,\"458\":1,\"478\":1}}],[\"基本认证和摘要认证\",{\"1\":{\"339\":1}}],[\"基本概念\",{\"0\":{\"246\":1}}],[\"基本结构\",{\"1\":{\"236\":1,\"237\":1,\"238\":1}}],[\"基类的虚函数表存放在内存的什么区\",{\"0\":{\"206\":1}}],[\"基础查询\",{\"1\":{\"397\":1}}],[\"基础查询是从数据库表中提取数据的最基本方式\",{\"1\":{\"387\":1}}],[\"基础知识\",{\"0\":{\"326\":1}}],[\"基础\",{\"0\":{\"197\":1}}],[\"基于令牌的身份验证\",{\"1\":{\"339\":1}}],[\"基于用户名和密码的简单验证方法\",{\"1\":{\"339\":1}}],[\"基于\",{\"1\":{\"335\":1,\"364\":1}}],[\"基于对称性\",{\"1\":{\"101\":1}}],[\"基于链式地址实现的哈希表的操作方法发生了以下变化\",{\"1\":{\"61\":1}}],[\"基于链表实现的栈可以提供更加稳定的效率表现\",{\"1\":{\"49\":1}}],[\"基于链表实现的栈\",{\"1\":{\"47\":1}}],[\"基于链表实现的队列\",{\"1\":{\"41\":1}}],[\"基于链表实现栈的入栈出栈操作\",{\"1\":{\"47\":1}}],[\"基于链表实现队列的入队出队操作\",{\"1\":{\"41\":1}}],[\"基于链表的实现\",{\"0\":{\"41\":1,\"47\":1}}],[\"基于数组实现的哈希表\",{\"1\":{\"58\":1}}],[\"基于数组实现的栈可能造成一定的空间浪费\",{\"1\":{\"49\":1}}],[\"基于数组实现的栈在触发扩容时效率会降低\",{\"1\":{\"49\":1}}],[\"基于数组实现的栈\",{\"1\":{\"48\":1}}],[\"基于数组实现栈的入栈出栈操作\",{\"1\":{\"48\":1}}],[\"基于数组的实现\",{\"0\":{\"42\":1,\"48\":1}}],[\"基于环形数组实现的队列\",{\"1\":{\"42\":1}}],[\"基于此设计\",{\"1\":{\"42\":1}}],[\"深入理解计算机系统\",{\"1\":{\"195\":1}}],[\"深度\",{\"1\":{\"78\":1}}],[\"国内有大佬把它翻译成了中文书籍\",{\"1\":{\"195\":1}}],[\"英文不错的朋友可以直接看原文\",{\"1\":{\"195\":1}}],[\"想提升c++达到进阶水平的朋友学习\",{\"1\":{\"195\":1}}],[\"唯一的缺点\",{\"1\":{\"194\":1}}],[\"唯一的区别在于\",{\"1\":{\"106\":1}}],[\"推荐深入学习并灵活运用\",{\"1\":{\"474\":1}}],[\"推荐使用\",{\"1\":{\"467\":1}}],[\"推荐阅读\",{\"1\":{\"195\":1}}],[\"推荐学习这本书\",{\"1\":{\"195\":1}}],[\"推荐几本c++书籍\",{\"1\":{\"193\":1}}],[\"推出时间\",{\"1\":{\"70\":1}}],[\"书籍\",{\"2\":{\"192\":1}}],[\"书籍推荐\",{\"0\":{\"191\":1,\"193\":1}}],[\"过滤数据\",{\"1\":{\"397\":1}}],[\"过滤等操作更加方便\",{\"1\":{\"186\":1}}],[\"过滤或其他转换操作\",{\"1\":{\"186\":1}}],[\"允许在\",{\"1\":{\"502\":1}}],[\"允许在同一连接上发送多个请求\",{\"1\":{\"333\":1}}],[\"允许你在一个\",{\"1\":{\"446\":1}}],[\"允许服务器和客户端实时通信\",{\"1\":{\"348\":1}}],[\"允许父进程灵活地等待和处理子进程的状态变化\",{\"1\":{\"304\":1}}],[\"允许我们在编译时计算表达式的值\",{\"1\":{\"283\":1}}],[\"允许多个智能指针指向同一个对象\",{\"1\":{\"265\":1}}],[\"允许多个进程直接访问同一块内存区域\",{\"1\":{\"226\":1}}],[\"允许不同的进程之间交换数据和信号\",{\"1\":{\"223\":1}}],[\"允许开发者定制数据的显示和编辑\",{\"1\":{\"186\":1}}],[\"允许添加新功能而无需修改现有代码\",{\"1\":{\"118\":1}}],[\"列出所有线程\",{\"1\":{\"489\":1}}],[\"列出所有断点\",{\"1\":{\"482\":1}}],[\"列出所有分支\",{\"1\":{\"439\":1}}],[\"列出分支\",{\"1\":{\"439\":1}}],[\"列出\",{\"1\":{\"439\":1}}],[\"列出当前分支的所有提交\",{\"1\":{\"432\":1}}],[\"列进行降序排序\",{\"1\":{\"389\":1}}],[\"列进行升序排序\",{\"1\":{\"186\":1}}],[\"列的值\",{\"1\":{\"387\":1}}],[\"列\",{\"1\":{\"185\":1}}],[\"列表中存储的不是数字本身\",{\"1\":{\"34\":1}}],[\"列表都会设定一个初始长度\",{\"1\":{\"34\":1}}],[\"列表的出现极大地提高了数组的实用性\",{\"1\":{\"34\":1}}],[\"列表的出现大幅提高了数组的实用性\",{\"1\":{\"33\":1}}],[\"列表是一种支持增删查改的元素有序集合\",{\"1\":{\"33\":1}}],[\"列表实现\",{\"0\":{\"32\":1}}],[\"列表可以根据索引遍历\",{\"1\":{\"31\":1}}],[\"列表可以自由地添加与删除元素\",{\"1\":{\"30\":1}}],[\"列表可以基于链表或数组实现\",{\"1\":{\"26\":1}}],[\"列表本质上是数组\",{\"1\":{\"29\":1}}],[\"列表常用操作\",{\"0\":{\"27\":1}}],[\"列表\",{\"0\":{\"26\":1},\"1\":{\"9\":1,\"26\":2,\"388\":1}}],[\"行号或函数\",{\"1\":{\"483\":1}}],[\"行处设置断点\",{\"1\":{\"482\":2}}],[\"行开始的\",{\"1\":{\"396\":1}}],[\"行\",{\"1\":{\"185\":1}}],[\"行为型模式\",{\"1\":{\"117\":1}}],[\"经常需要创建自定义模型\",{\"1\":{\"185\":1}}],[\"经过两次删除节点操作\",{\"1\":{\"95\":1}}],[\"经过的节点的数量\",{\"1\":{\"78\":1}}],[\"经过的边的数量\",{\"1\":{\"78\":1,\"111\":1}}],[\"经过哈希函数得到桶索引\",{\"1\":{\"61\":1}}],[\"筛选等操作\",{\"1\":{\"183\":1}}],[\"渲染数据\",{\"1\":{\"181\":2}}],[\"渲染变得更加高效\",{\"1\":{\"174\":1}}],[\"编译后的镜像\",{\"1\":{\"316\":1}}],[\"编译后的执行文件包含有\",{\"1\":{\"285\":1}}],[\"编译后的执行文件中不存在\",{\"1\":{\"285\":1}}],[\"编译\",{\"0\":{\"316\":1}}],[\"编译时加密与运行时解密的工作原理\",{\"0\":{\"284\":1}}],[\"编译时加密可以一定程度上避免这个问题\",{\"1\":{\"282\":1}}],[\"编译器只\",{\"1\":{\"205\":1}}],[\"编译器会在每个对象的前四个字节中保存一个虚表指针\",{\"1\":{\"205\":1}}],[\"编译器会自动生成虚表\",{\"1\":{\"205\":1}}],[\"编译器在发现基类中有虚函数时\",{\"1\":{\"205\":1}}],[\"编辑\",{\"1\":{\"182\":1}}],[\"编辑数据\",{\"1\":{\"181\":1}}],[\"编辑等\",{\"1\":{\"180\":1}}],[\"编程语言\",{\"0\":{\"278\":1}}],[\"编程语言通常会为数据类型提供内置哈希算法\",{\"1\":{\"72\":1}}],[\"编程语言通常会为这些数据类型提供内置的哈希算法\",{\"1\":{\"71\":1}}],[\"编程语言通常会预留足够大的哈希表容量\",{\"1\":{\"59\":1}}],[\"编程语言的选择\",{\"0\":{\"66\":1}}],[\"显示当前仓库中所有子模块的状态\",{\"1\":{\"449\":1}}],[\"显示已暂存但未提交的更改\",{\"1\":{\"433\":1}}],[\"显示未暂存的更改\",{\"1\":{\"433\":1}}],[\"显示仓库的提交历史记录\",{\"1\":{\"432\":1}}],[\"显示工作目录和暂存区的状态\",{\"1\":{\"431\":1}}],[\"显示\",{\"1\":{\"180\":1}}],[\"显示数据\",{\"1\":{\"180\":1}}],[\"显著提升程序的执行效率\",{\"1\":{\"33\":1}}],[\"适合处理复杂的跨平台项目\",{\"1\":{\"474\":1}}],[\"适合管理并发运行的子进程\",{\"1\":{\"303\":1}}],[\"适合做数据的装饰或修改\",{\"1\":{\"186\":1}}],[\"适合树状结构数据\",{\"1\":{\"179\":1}}],[\"适用场景\",{\"1\":{\"169\":1}}],[\"适用于所有\",{\"1\":{\"496\":1}}],[\"适用于快速构建\",{\"1\":{\"474\":1}}],[\"适用于大多数\",{\"1\":{\"474\":1}}],[\"适用于跨平台和跨语言的微服务架构\",{\"1\":{\"364\":1}}],[\"适用于更新指针操作\",{\"1\":{\"250\":1}}],[\"适用于检查队列是否满或空\",{\"1\":{\"250\":1}}],[\"适用于\",{\"1\":{\"250\":1,\"474\":1}}],[\"适用于分布式系统中的进程间通信\",{\"1\":{\"229\":1}}],[\"适用于需要创建多个产品族的场景\",{\"1\":{\"153\":1}}],[\"适用于高频查找\",{\"1\":{\"109\":1}}],[\"打包等\",{\"1\":{\"474\":1}}],[\"打包启动的文件系统\",{\"1\":{\"317\":1}}],[\"打印当前的程序计数器\",{\"1\":{\"502\":1}}],[\"打印变量的值\",{\"1\":{\"321\":1}}],[\"打印哈希表\",{\"1\":{\"58\":1,\"61\":1,\"63\":1}}],[\"打交道\",{\"1\":{\"179\":1}}],[\"委托还负责处理数据的编辑\",{\"1\":{\"181\":1}}],[\"委托负责将\",{\"1\":{\"181\":1}}],[\"委托\",{\"0\":{\"181\":1},\"1\":{\"177\":1}}],[\"虽然僵尸进程不会占用内存或\",{\"1\":{\"217\":1}}],[\"虽然我们可能通过实验室的基类的指针或引用去訪问它但析构却不一定\",{\"1\":{\"208\":1}}],[\"虽然\",{\"1\":{\"174\":1,\"185\":1}}],[\"虽然自定义对象\",{\"1\":{\"71\":1}}],[\"标志时\",{\"1\":{\"300\":1}}],[\"标志位等\",{\"1\":{\"239\":1}}],[\"标准输出和标准错误输出文件描述符\",{\"1\":{\"221\":1}}],[\"标签移除\",{\"1\":{\"412\":1}}],[\"标签\",{\"1\":{\"173\":1,\"412\":1}}],[\"标记为已删除的空间可以再次使用\",{\"1\":{\"73\":1}}],[\"标记为已删除的空间还能再次使用吗\",{\"1\":{\"73\":1}}],[\"展示了tcp协议在建立连接\",{\"1\":{\"289\":1}}],[\"展示了哈希函数的工作原理\",{\"1\":{\"58\":1}}],[\"展示\",{\"1\":{\"173\":1}}],[\"框架通过将数据和显示逻辑解耦\",{\"1\":{\"186\":1}}],[\"框架能够更加灵活地支持各种数据展示场景\",{\"1\":{\"184\":1}}],[\"框架类似于传统的\",{\"1\":{\"184\":1}}],[\"框架的核心概念\",{\"0\":{\"178\":1}}],[\"框架包含三个主要组件\",{\"1\":{\"177\":1}}],[\"框架提供了更高的灵活性和可维护性\",{\"1\":{\"177\":1}}],[\"框架是一种用于处理和显示数据的灵活机制\",{\"1\":{\"177\":1}}],[\"框架\",{\"0\":{\"177\":1},\"1\":{\"173\":1}}],[\"尤其是在处理大型项目或复杂调试环境时\",{\"1\":{\"505\":1}}],[\"尤其是在\",{\"1\":{\"366\":1}}],[\"尤其是在数据变更频繁的情况下\",{\"1\":{\"172\":1}}],[\"尤其在现代前端开发框架中广泛应用\",{\"1\":{\"174\":1}}],[\"尤其在数据绑定方面更为自动化和灵活\",{\"1\":{\"169\":1}}],[\"学习成本高\",{\"1\":{\"172\":1}}],[\"学号和\",{\"1\":{\"58\":1}}],[\"学号\",{\"1\":{\"56\":1}}],[\"缺点也很明显\",{\"1\":{\"194\":1}}],[\"缺点\",{\"0\":{\"172\":1}}],[\"缺点是不能删除元素\",{\"1\":{\"72\":1}}],[\"业务逻辑和数据处理部分可以通过单元测试进行验证\",{\"1\":{\"171\":1}}],[\"专注于业务逻辑\",{\"1\":{\"169\":1}}],[\"逻辑相关的部分\",{\"1\":{\"169\":1}}],[\"逻辑和交互逻辑\",{\"1\":{\"169\":1}}],[\"逻辑更加清晰\",{\"1\":{\"34\":1}}],[\"到实战\",{\"1\":{\"193\":1}}],[\"到进阶\",{\"1\":{\"193\":1}}],[\"到\",{\"1\":{\"168\":2,\"292\":1,\"406\":1,\"411\":1}}],[\"响应体的内容类型\",{\"1\":{\"329\":1}}],[\"响应体\",{\"1\":{\"327\":1}}],[\"响应头\",{\"1\":{\"327\":1,\"329\":1}}],[\"响应的构成\",{\"1\":{\"327\":1}}],[\"响应模型\",{\"0\":{\"327\":1}}],[\"响应\",{\"1\":{\"167\":1}}],[\"表操作\",{\"1\":{\"398\":1}}],[\"表操作和数据行操作\",{\"1\":{\"369\":1}}],[\"表由列定义\",{\"1\":{\"376\":1}}],[\"表是数据库中的核心对象\",{\"1\":{\"375\":1}}],[\"表达式和\",{\"1\":{\"286\":1}}],[\"表示\",{\"1\":{\"404\":1}}],[\"表示逻辑\",{\"1\":{\"404\":1}}],[\"表示删除成功但无返回内容\",{\"1\":{\"346\":1}}],[\"表示资源创建成功\",{\"1\":{\"346\":1}}],[\"表示客户端可以继续发送请求\",{\"1\":{\"328\":1}}],[\"表示启动后就挂起\",{\"1\":{\"319\":1}}],[\"表示子进程\",{\"1\":{\"302\":1}}],[\"表示连接已经建立\",{\"1\":{\"290\":1}}],[\"表示主动打开\",{\"1\":{\"290\":1}}],[\"表示套接字没有被使用或已经关闭\",{\"1\":{\"290\":1}}],[\"表示需要完成的任务数量\",{\"1\":{\"243\":1}}],[\"表示所有线程都已到达屏障点\",{\"1\":{\"242\":1}}],[\"表示已到达屏障的线程数量\",{\"1\":{\"242\":1}}],[\"表示当前可用资源的数量\",{\"1\":{\"240\":1}}],[\"表示将线程和线程对象分离\",{\"1\":{\"234\":1,\"255\":1}}],[\"表示该节点是叶节点\",{\"1\":{\"91\":1}}],[\"表格和树形数据\",{\"1\":{\"180\":1}}],[\"表单提交等\",{\"1\":{\"166\":1}}],[\"交互\",{\"1\":{\"165\":1,\"169\":1}}],[\"交换位置\",{\"1\":{\"63\":1}}],[\"职责\",{\"1\":{\"165\":1,\"166\":1,\"167\":1}}],[\"模版方法\",{\"0\":{\"308\":1},\"1\":{\"308\":1}}],[\"模板类用于编译时加密和运行时解密\",{\"1\":{\"285\":1}}],[\"模板类\",{\"1\":{\"247\":1,\"286\":1}}],[\"模板中展示数据的部分\",{\"1\":{\"173\":1}}],[\"模拟一些工作\",{\"1\":{\"301\":1}}],[\"模拟进程在运行\",{\"1\":{\"228\":1}}],[\"模拟周期性任务执行\",{\"1\":{\"221\":1}}],[\"模型会在数据发生变化时发出信号\",{\"1\":{\"179\":1}}],[\"模型通过标准化的接口提供数据给\",{\"1\":{\"179\":1}}],[\"模型负责存储和管理数据\",{\"1\":{\"179\":1}}],[\"模型\",{\"0\":{\"165\":1,\"179\":1},\"1\":{\"164\":1,\"177\":1}}],[\"模式匹配等场景\",{\"1\":{\"402\":1}}],[\"模式中\",{\"1\":{\"183\":1}}],[\"模式的关键在于数据与\",{\"1\":{\"182\":1}}],[\"模式通过数据绑定机制\",{\"1\":{\"174\":1}}],[\"模式由三部分组成\",{\"1\":{\"164\":1}}],[\"模式是由微软架构师\",{\"1\":{\"163\":1}}],[\"模式\",{\"0\":{\"163\":1},\"1\":{\"184\":1,\"411\":1}}],[\"现已广泛应用于各种前端框架和工具\",{\"1\":{\"163\":1}}],[\"现在对象还没有产生\",{\"1\":{\"208\":1}}],[\"现在\",{\"1\":{\"69\":1}}],[\"于\",{\"1\":{\"163\":1}}],[\"远程调试的端口和暂停启动\",{\"1\":{\"321\":1}}],[\"远程调试功能\",{\"1\":{\"319\":1}}],[\"远程日志等\",{\"1\":{\"160\":1}}],[\"远远没有达到哈希算法的设计目标\",{\"1\":{\"70\":1}}],[\"事件处理链可以使用责任链模式\",{\"1\":{\"160\":1}}],[\"事件处理系统\",{\"1\":{\"160\":1}}],[\"事件模式\",{\"2\":{\"127\":1}}],[\"由子类实现具体的设置逻辑\",{\"1\":{\"308\":1}}],[\"由\",{\"1\":{\"159\":3}}],[\"由于类不知道谁继承它\",{\"1\":{\"208\":1}}],[\"由于子类会调父类的构造函数\",{\"1\":{\"208\":1}}],[\"由于创建一个对象时我们总是要明白指定对象的类型\",{\"1\":{\"208\":1}}],[\"由于虚表指针vptr跟虚函数密不可分\",{\"1\":{\"206\":1}}],[\"由于节点大小满足\",{\"1\":{\"111\":1}}],[\"由于要保持二叉搜索树\",{\"1\":{\"91\":1}}],[\"由于加法和异或满足交换律\",{\"1\":{\"70\":1}}],[\"由于\",{\"1\":{\"69\":1,\"97\":1,\"169\":1,\"171\":1}}],[\"由于平方的增长\",{\"1\":{\"64\":1}}],[\"由于链表节点需要额外存储指针\",{\"1\":{\"49\":1}}],[\"由于入栈的元素可能会源源不断地增加\",{\"1\":{\"48\":1}}],[\"由于数据绑定是自动化的\",{\"1\":{\"172\":1}}],[\"由于数据不是连续存放的\",{\"1\":{\"34\":1}}],[\"由于数组\",{\"1\":{\"56\":1}}],[\"由于数组具有更高的缓存命中率\",{\"1\":{\"33\":1}}],[\"由于数组的长度不可变\",{\"1\":{\"10\":1}}],[\"由于数组的长度是固定的\",{\"1\":{\"9\":1}}],[\"由于每个元素需要两个额外的指针\",{\"1\":{\"34\":1}}],[\"由于它们采用两种相反的存储策略\",{\"1\":{\"23\":1}}],[\"创建构建目录\",{\"0\":{\"467\":1}}],[\"创建新分支\",{\"1\":{\"439\":2}}],[\"创建新的会话\",{\"1\":{\"220\":1,\"221\":1}}],[\"创建或删除分支\",{\"1\":{\"439\":1}}],[\"创建并切换分支\",{\"1\":{\"438\":1}}],[\"创建\",{\"1\":{\"398\":2}}],[\"创建资源\",{\"1\":{\"346\":1}}],[\"创建了一个\",{\"1\":{\"249\":1}}],[\"创建共享内存\",{\"1\":{\"226\":1}}],[\"创建消息队列\",{\"1\":{\"225\":1}}],[\"创建无名管道\",{\"1\":{\"224\":1}}],[\"创建守护进程\",{\"1\":{\"220\":1}}],[\"创建守护进程的示例代码\",{\"1\":{\"219\":1}}],[\"创建守护进程的步骤包括分离进程\",{\"1\":{\"219\":1}}],[\"创建一个最简单的\",{\"1\":{\"465\":1}}],[\"创建一个简单的项目结构\",{\"1\":{\"463\":1}}],[\"创建一个新的会话\",{\"1\":{\"221\":1}}],[\"创建一个孙子进程\",{\"1\":{\"218\":1}}],[\"创建一个子进程\",{\"1\":{\"218\":1,\"221\":1,\"302\":1}}],[\"创建处理者对象\",{\"1\":{\"159\":1}}],[\"创建型模式\",{\"1\":{\"117\":1}}],[\"请求数量\",{\"1\":{\"351\":1}}],[\"请求优化\",{\"0\":{\"351\":1}}],[\"请求和响应\",{\"1\":{\"347\":1}}],[\"请求并查看响应\",{\"1\":{\"347\":1}}],[\"请求完成后关闭连接\",{\"1\":{\"333\":1}}],[\"请求的等待时间\",{\"1\":{\"365\":1}}],[\"请求的资源不存在\",{\"1\":{\"328\":1}}],[\"请求的构成\",{\"1\":{\"327\":1}}],[\"请求格式错误\",{\"1\":{\"328\":1}}],[\"请求成功\",{\"1\":{\"328\":1}}],[\"请求体\",{\"1\":{\"327\":1}}],[\"请求头\",{\"1\":{\"327\":1,\"329\":1}}],[\"请求行\",{\"1\":{\"327\":1}}],[\"请求参数附加在\",{\"1\":{\"327\":1}}],[\"请求方法\",{\"1\":{\"327\":1}}],[\"请求处理链\",{\"1\":{\"160\":1}}],[\"请求\",{\"0\":{\"327\":1},\"1\":{\"158\":1,\"328\":1,\"333\":1,\"355\":1}}],[\"请注意\",{\"1\":{\"10\":1,\"20\":1,\"65\":1,\"68\":1,\"71\":1,\"78\":1,\"83\":1,\"84\":1}}],[\"客户端将其组装成完整的响应体\",{\"1\":{\"359\":1}}],[\"客户端愿意接受的响应类型\",{\"1\":{\"329\":1}}],[\"客户端错误状态码\",{\"1\":{\"328\":1}}],[\"客户端调用connect\",{\"1\":{\"292\":1}}],[\"客户端在发送syn\",{\"1\":{\"290\":1}}],[\"客户端可以使用这些接口创建具体的产品对象\",{\"1\":{\"153\":1}}],[\"客户端通过调用工厂的方法来获取对象\",{\"1\":{\"148\":1}}],[\"world\",{\"1\":{\"464\":1}}],[\"words\",{\"1\":{\"407\":1}}],[\"word\",{\"1\":{\"407\":2}}],[\"working\",{\"1\":{\"240\":1,\"241\":1}}],[\"worker\",{\"1\":{\"240\":2,\"241\":2,\"242\":2,\"243\":2}}],[\"w+\",{\"1\":{\"405\":1}}],[\"w\",{\"1\":{\"405\":3}}],[\"where\",{\"1\":{\"384\":2,\"385\":2,\"388\":2,\"391\":1,\"393\":3,\"394\":2,\"397\":3}}],[\"while\",{\"1\":{\"22\":1,\"63\":1,\"89\":1,\"90\":1,\"91\":2,\"107\":1,\"218\":1,\"220\":1,\"228\":1,\"241\":1,\"248\":2,\"249\":4,\"260\":1}}],[\"www\",{\"1\":{\"330\":1}}],[\"wget\",{\"1\":{\"316\":1,\"317\":1}}],[\"watch\",{\"1\":{\"485\":2}}],[\"wall\",{\"1\":{\"472\":1}}],[\"wantedby=default\",{\"1\":{\"420\":1}}],[\"waves\",{\"1\":{\"308\":2}}],[\"wavestyle\",{\"1\":{\"308\":5}}],[\"wave\",{\"1\":{\"308\":7}}],[\"wait状态\",{\"1\":{\"292\":2}}],[\"waiting\",{\"1\":{\"228\":1,\"242\":1,\"244\":1}}],[\"waitpid\",{\"0\":{\"297\":1},\"1\":{\"216\":2,\"218\":4,\"297\":1,\"298\":1,\"301\":3,\"302\":2,\"303\":3,\"304\":2}}],[\"wait\",{\"1\":{\"216\":2,\"218\":8,\"226\":1,\"227\":1,\"238\":2,\"240\":1,\"242\":1,\"243\":1,\"244\":1,\"260\":2,\"262\":1,\"290\":4,\"292\":4,\"293\":4,\"298\":1,\"301\":1}}],[\"wstopsig\",{\"1\":{\"300\":1,\"301\":1}}],[\"wtermsig\",{\"1\":{\"300\":1,\"301\":1,\"302\":1}}],[\"will\",{\"1\":{\"420\":2}}],[\"wireshark\",{\"1\":{\"347\":1}}],[\"width\",{\"1\":{\"308\":1}}],[\"with\",{\"1\":{\"301\":1,\"420\":2}}],[\"wifcontinued\",{\"1\":{\"300\":1,\"301\":1}}],[\"wifstopped\",{\"1\":{\"300\":1,\"301\":1}}],[\"wifsignaled\",{\"1\":{\"300\":1,\"301\":1,\"302\":1}}],[\"wifexited\",{\"1\":{\"300\":1,\"301\":1,\"302\":1}}],[\"wintextbox\",{\"1\":{\"153\":2}}],[\"winbutton\",{\"1\":{\"153\":2}}],[\"windowsfactory\",{\"1\":{\"153\":1}}],[\"windowstextbox\",{\"1\":{\"153\":1}}],[\"windows\",{\"1\":{\"153\":2,\"163\":1,\"459\":1,\"474\":1}}],[\"windowsbutton\",{\"1\":{\"153\":1}}],[\"wcontinued\",{\"1\":{\"298\":1,\"300\":1}}],[\"wuntraced\",{\"1\":{\"298\":1}}],[\"wextra\",{\"1\":{\"472\":1}}],[\"wexitstatus\",{\"1\":{\"300\":1,\"301\":1,\"302\":1}}],[\"weak\",{\"1\":{\"264\":1,\"267\":2}}],[\"webui\",{\"1\":{\"420\":6}}],[\"webhooks\",{\"0\":{\"355\":1},\"1\":{\"355\":1}}],[\"websocket\",{\"0\":{\"348\":1},\"1\":{\"348\":3}}],[\"webtask\",{\"1\":{\"311\":1}}],[\"web\",{\"1\":{\"160\":1,\"339\":1}}],[\"writer\",{\"1\":{\"237\":3}}],[\"write\",{\"1\":{\"224\":1,\"237\":1}}],[\"wnohang\",{\"1\":{\"218\":1,\"298\":1,\"299\":1,\"303\":1}}],[\"wpf\",{\"1\":{\"163\":1}}],[\"产品接口\",{\"1\":{\"149\":1}}],[\"旨在为客户端提供对象的创建方式\",{\"1\":{\"147\":1}}],[\"种组合\",{\"1\":{\"143\":1}}],[\"形状m\",{\"1\":{\"143\":1}}],[\"形成恶性循环\",{\"1\":{\"63\":1}}],[\"颜色n\",{\"1\":{\"143\":1}}],[\"抽象方法\",{\"1\":{\"308\":1}}],[\"抽象处理者类\",{\"1\":{\"159\":1}}],[\"抽象工厂\",{\"1\":{\"152\":1}}],[\"抽象工厂模式通常用于创建不同产品族的对象\",{\"1\":{\"151\":1}}],[\"抽象工厂模式提供了一种创建一系列相关或相互依赖对象的接口\",{\"1\":{\"151\":1}}],[\"抽象工厂模式\",{\"0\":{\"151\":1},\"1\":{\"153\":1},\"2\":{\"155\":1}}],[\"抽象产品\",{\"1\":{\"152\":1}}],[\"抽象类\",{\"1\":{\"142\":1}}],[\"抽象不应依赖于细节\",{\"1\":{\"118\":1}}],[\"缓冲文件流\",{\"1\":{\"137\":1}}],[\"缓存机制\",{\"1\":{\"366\":1}}],[\"缓存层\",{\"1\":{\"344\":1}}],[\"缓存时长为\",{\"1\":{\"342\":1}}],[\"缓存控制头\",{\"0\":{\"342\":1}}],[\"缓存\",{\"0\":{\"341\":1}}],[\"缓存不友好\",{\"1\":{\"34\":1}}],[\"缓存通过缓存行\",{\"1\":{\"33\":1}}],[\"缓存局部性\",{\"1\":{\"14\":1}}],[\"解决了\",{\"1\":{\"334\":1}}],[\"解决的问题\",{\"1\":{\"137\":1}}],[\"解压\",{\"1\":{\"316\":1}}],[\"解密函数在运行时对字符串进行解密\",{\"1\":{\"285\":1}}],[\"解锁\",{\"1\":{\"236\":1,\"237\":1,\"241\":1}}],[\"解耦性好\",{\"1\":{\"171\":1}}],[\"解耦程度\",{\"1\":{\"169\":1}}],[\"解耦抽象与实现\",{\"1\":{\"143\":1}}],[\"解释器在每次启动时\",{\"1\":{\"71\":1}}],[\"动态库调试\",{\"0\":{\"488\":1}}],[\"动态扩展对象的功能\",{\"1\":{\"137\":1}}],[\"动态地添加新的功能\",{\"1\":{\"135\":1}}],[\"动态数组\",{\"1\":{\"26\":2,\"61\":1,\"71\":1}}],[\"避免在每次调试会话中手动输入相同的命令\",{\"1\":{\"495\":1}}],[\"避免单一服务器过载\",{\"1\":{\"354\":1}}],[\"避免客户端需要再次请求\",{\"1\":{\"334\":1}}],[\"避免给逆向提供敏感信息点\",{\"1\":{\"286\":1}}],[\"避免一直阻塞等锁\",{\"1\":{\"262\":1}}],[\"避免没有调用join或者detach可导致程序出错的情况出现\",{\"1\":{\"255\":1}}],[\"避免使用锁机制带来的开销\",{\"1\":{\"239\":1}}],[\"避免僵尸进程的产生\",{\"1\":{\"218\":1}}],[\"避免产生僵尸进程的关键在于确保父进程能够及时处理子进程的退出状态\",{\"1\":{\"218\":1}}],[\"避免了使用继承\",{\"1\":{\"137\":1}}],[\"避免将多个算法逻辑硬编码到一个类中\",{\"1\":{\"131\":1}}],[\"避免运行时错误\",{\"1\":{\"118\":1}}],[\"持有一个策略对象\",{\"1\":{\"130\":1}}],[\"持有观察者对象的引用\",{\"1\":{\"124\":1}}],[\"策略接口\",{\"1\":{\"130\":1,\"131\":1}}],[\"策略模式适用于需要动态选择或更换算法的场景\",{\"1\":{\"131\":1}}],[\"策略模式可以使得算法独立于使用它的客户端而变化\",{\"1\":{\"131\":1}}],[\"策略模式使得算法的变化不会影响到使用算法的客户类\",{\"1\":{\"129\":1}}],[\"策略模式\",{\"0\":{\"128\":1},\"1\":{\"117\":1,\"129\":1,\"308\":2},\"2\":{\"133\":1}}],[\"类是一个泛型队列\",{\"1\":{\"249\":1}}],[\"类定义与构造函数\",{\"1\":{\"249\":1}}],[\"类的\",{\"1\":{\"208\":1}}],[\"类对象中存储vptr指针\",{\"1\":{\"206\":1}}],[\"类中含有virtual关键字修饰的方法时\",{\"1\":{\"205\":1}}],[\"类成员或函数可以直接通过类名访问无需创建对象\",{\"1\":{\"198\":1}}],[\"类或者数据结构\",{\"1\":{\"165\":1}}],[\"类\",{\"1\":{\"125\":1,\"179\":1,\"180\":1,\"286\":1}}],[\"类似\",{\"1\":{\"327\":1}}],[\"类似地\",{\"1\":{\"107\":1}}],[\"类似于\",{\"1\":{\"111\":1}}],[\"类似于数组扩容\",{\"1\":{\"59\":1}}],[\"类似于双向链表\",{\"1\":{\"25\":1}}],[\"示例代码\",{\"0\":{\"301\":1},\"1\":{\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1}}],[\"示例代码如下\",{\"1\":{\"57\":2,\"89\":1,\"91\":1}}],[\"示例\",{\"0\":{\"150\":1,\"153\":1,\"464\":1,\"465\":1,\"504\":1},\"1\":{\"173\":1,\"179\":1,\"180\":1,\"181\":1,\"185\":1,\"186\":1,\"220\":1,\"371\":1,\"373\":1,\"374\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":3,\"380\":1,\"381\":1,\"383\":1,\"384\":1,\"385\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"391\":1,\"393\":1,\"395\":1,\"396\":1,\"397\":1,\"404\":7,\"405\":6,\"406\":3,\"407\":2,\"409\":3,\"410\":3,\"411\":1,\"447\":1}}],[\"示例中\",{\"1\":{\"125\":1}}],[\"负载均衡器\",{\"1\":{\"354\":1}}],[\"负载因子定义为哈希表中元素数量除以桶数量\",{\"1\":{\"72\":1}}],[\"负载因子\",{\"1\":{\"59\":1,\"61\":1,\"63\":1}}],[\"负责展示数据\",{\"1\":{\"180\":1,\"184\":1}}],[\"负责存储和管理数据\",{\"1\":{\"179\":1}}],[\"负责与\",{\"1\":{\"173\":1}}],[\"负责响应用户交互并更新模型\",{\"1\":{\"169\":1}}],[\"负责处理数据的呈现和编辑\",{\"1\":{\"184\":1}}],[\"负责处理逻辑\",{\"1\":{\"169\":1}}],[\"负责处理界面显示逻辑\",{\"1\":{\"167\":1}}],[\"负责处理具体的请求\",{\"1\":{\"158\":1}}],[\"负责界面的展示\",{\"1\":{\"166\":1}}],[\"负责呈现数据和处理用户的输入\",{\"1\":{\"166\":1}}],[\"负责将\",{\"1\":{\"166\":1}}],[\"负责具体产品的实例化\",{\"1\":{\"149\":1}}],[\"负责在接收到主题的通知后进行相应的更新操作\",{\"1\":{\"124\":1}}],[\"主动关闭方在发送最后的ack包后进入time\",{\"1\":{\"292\":1}}],[\"主动关闭方在发送最后的ack后\",{\"1\":{\"290\":1}}],[\"主动关闭方发送fin包后进入fin\",{\"1\":{\"292\":1}}],[\"主动关闭方接收到ack后\",{\"1\":{\"290\":1}}],[\"主函数中的生产者和消费者\",{\"1\":{\"249\":1}}],[\"主循环\",{\"1\":{\"221\":1}}],[\"主题\",{\"1\":{\"124\":1}}],[\"主要由元字符\",{\"1\":{\"402\":1}}],[\"主要操作分为三个层次\",{\"1\":{\"369\":1}}],[\"主要有std\",{\"1\":{\"261\":1}}],[\"主要有两个原因\",{\"1\":{\"34\":1}}],[\"主要看方法的使用范围\",{\"1\":{\"111\":1}}],[\"订阅者发布者模型等\",{\"1\":{\"123\":1}}],[\"订单将加入队列中\",{\"1\":{\"43\":1}}],[\"让临时右值的生命周期延长了\",{\"1\":{\"268\":1}}],[\"让c++\",{\"1\":{\"202\":1}}],[\"让多个观察者对象同时监听某一个主题对象\",{\"1\":{\"123\":1}}],[\"让输出值落在数组索引范围内\",{\"1\":{\"73\":1}}],[\"概述\",{\"0\":{\"123\":1,\"129\":1,\"135\":1,\"141\":1,\"147\":1,\"157\":1}}],[\"架构设计\",{\"0\":{\"189\":1},\"2\":{\"120\":1,\"126\":1,\"132\":1,\"138\":1,\"144\":1,\"154\":1,\"161\":1,\"175\":1,\"187\":1,\"190\":1}}],[\"找出系统中可预计的变化\",{\"1\":{\"119\":1}}],[\"找到待删除节点\",{\"1\":{\"91\":1}}],[\"找到待删除节点在\",{\"1\":{\"91\":1}}],[\"找到重复节点\",{\"1\":{\"90\":1}}],[\"找到目标节点\",{\"1\":{\"89\":1}}],[\"稳定\",{\"1\":{\"119\":1}}],[\"隔离变化\",{\"1\":{\"119\":1}}],[\"调试效率\",{\"1\":{\"505\":1}}],[\"调试会话控制\",{\"1\":{\"495\":1}}],[\"调试核心转储文件\",{\"0\":{\"490\":1}}],[\"调试动态库时\",{\"1\":{\"488\":1}}],[\"调试时经常需要查看程序当前的状态\",{\"1\":{\"484\":1}}],[\"调试时会用到它\",{\"1\":{\"316\":1}}],[\"调试器\",{\"1\":{\"478\":1,\"494\":1}}],[\"调试工具\",{\"0\":{\"347\":1}}],[\"调试内核\",{\"0\":{\"320\":1}}],[\"调试信息输出到终端与参数\",{\"1\":{\"319\":1}}],[\"调试\",{\"1\":{\"314\":1,\"366\":1},\"2\":{\"493\":1,\"508\":1}}],[\"调试难度增加\",{\"1\":{\"172\":1}}],[\"调度器选择一个就绪的进程并将其分配给\",{\"1\":{\"214\":1}}],[\"调度算法\",{\"1\":{\"25\":1}}],[\"调用函数等\",{\"1\":{\"487\":1}}],[\"调用析构函数时\",{\"1\":{\"265\":1}}],[\"调用get或者wait时才会执行\",{\"1\":{\"262\":1}}],[\"调用join函数将会阻塞主线程\",{\"1\":{\"255\":1}}],[\"调用\",{\"0\":{\"365\":1},\"1\":{\"221\":2,\"234\":1}}],[\"调用实现部分的功能\",{\"1\":{\"142\":1}}],[\"调用模块只依赖抽象接口\",{\"1\":{\"119\":1}}],[\"降低耦合性\",{\"1\":{\"119\":1}}],[\"关键字检查子查询是否返回结果\",{\"1\":{\"394\":1}}],[\"关键字符串信息\",{\"1\":{\"285\":2}}],[\"关键字的作用\",{\"0\":{\"198\":1,\"203\":1}}],[\"关闭连接过程中可能的状态及其转换\",{\"1\":{\"289\":1}}],[\"关闭写端\",{\"1\":{\"224\":2}}],[\"关闭读端\",{\"1\":{\"224\":2}}],[\"关闭标准输入\",{\"1\":{\"221\":1}}],[\"关闭标准文件描述符\",{\"1\":{\"219\":1,\"220\":1,\"221\":1}}],[\"关于async启动策略这里网上和各种书籍介绍的五花八门\",{\"1\":{\"262\":1}}],[\"关于线程操作应该优先使用async\",{\"1\":{\"262\":1}}],[\"关于条件变量其实还涉及到通知丢失和虚假唤醒问题\",{\"1\":{\"260\":1}}],[\"关于c++\",{\"1\":{\"195\":1}}],[\"关于架构设计的一点思考\",{\"0\":{\"119\":1}}],[\"关注对象间通信\",{\"1\":{\"117\":1}}],[\"关注对象组合\",{\"1\":{\"117\":1}}],[\"关注对象创建\",{\"1\":{\"117\":1}}],[\"关注微信公众号程序员的白粥馆\",{\"1\":{\"3\":1}}],[\"细节应该依赖于抽象\",{\"1\":{\"118\":1}}],[\"细心的你可能发现在不同控制台中运行程序时\",{\"1\":{\"71\":1}}],[\"依次处理日志信息\",{\"1\":{\"160\":1}}],[\"依次访问所有节点\",{\"1\":{\"18\":1}}],[\"依赖倒置原则\",{\"1\":{\"118\":1}}],[\"保留工作区文件\",{\"1\":{\"436\":1}}],[\"保持这个状态2倍的最大报文段寿命时间\",{\"1\":{\"290\":1}}],[\"保持与c\",{\"1\":{\"202\":1}}],[\"保证在并发环境下操作的不可分割性\",{\"1\":{\"239\":1}}],[\"保证线程函数的生命周期和线程对象的生命周期相同\",{\"1\":{\"234\":1,\"255\":1}}],[\"保证继承层次的正确性\",{\"1\":{\"118\":1}}],[\"保存当前工作目录的更改\",{\"1\":{\"435\":1}}],[\"保存和更新等\",{\"1\":{\"165\":1}}],[\"保存上一轮循环的节点\",{\"1\":{\"90\":1}}],[\"里氏替换原则\",{\"1\":{\"118\":1}}],[\"里面的\",{\"1\":{\"34\":1}}],[\"软件实体应对扩展开放\",{\"1\":{\"118\":1}}],[\"软件中的撤销与反撤销\",{\"1\":{\"50\":1}}],[\"目录\",{\"1\":{\"425\":1,\"447\":1}}],[\"目录下\",{\"1\":{\"317\":1}}],[\"目标\",{\"1\":{\"327\":1}}],[\"目标节点在\",{\"1\":{\"89\":2}}],[\"目的是避免传统锁机制\",{\"1\":{\"245\":1}}],[\"目的是防止守护进程重新获取控制终端\",{\"1\":{\"221\":1}}],[\"目的\",{\"1\":{\"118\":5}}],[\"责任链模式非常有用\",{\"1\":{\"160\":1}}],[\"责任链模式通过将请求沿着一条链传递\",{\"1\":{\"160\":1}}],[\"责任链模式的核心思想是将请求沿着一条链传递\",{\"1\":{\"158\":1}}],[\"责任链模式\",{\"0\":{\"156\":1},\"1\":{\"117\":1,\"157\":1},\"2\":{\"162\":1}}],[\"组合使用\",{\"1\":{\"319\":1}}],[\"组合爆炸\",{\"1\":{\"137\":1}}],[\"组合模式\",{\"1\":{\"117\":1}}],[\"组件接口\",{\"1\":{\"136\":1}}],[\"组织和存储大型数据\",{\"1\":{\"109\":1}}],[\"桥接模式非常适合在一个类有多个维度的变化\",{\"1\":{\"143\":1}}],[\"桥接模式涉及以下几个角色\",{\"1\":{\"142\":1}}],[\"桥接模式通过将类的功能层次与实现层次分离\",{\"1\":{\"141\":1}}],[\"桥接模式\",{\"0\":{\"140\":1},\"1\":{\"117\":1,\"141\":1,\"311\":1},\"2\":{\"145\":1}}],[\"函数时触发断点\",{\"1\":{\"489\":1}}],[\"函数时会失败\",{\"1\":{\"202\":1}}],[\"函数处触发断点\",{\"1\":{\"485\":1}}],[\"函数入口处设置断点\",{\"1\":{\"482\":1}}],[\"函数进入listen状态\",{\"1\":{\"292\":1}}],[\"函数在运行时对字符串进行解密\",{\"1\":{\"286\":1}}],[\"函数对输入字符串进行加密\",{\"1\":{\"286\":1}}],[\"函数来实现字符的加密和解密\",{\"1\":{\"284\":1}}],[\"函数来计算各种数据类型的哈希值\",{\"1\":{\"71\":1}}],[\"函数内部创建的对象返回后构造一个临时对象产生的\",{\"1\":{\"268\":1}}],[\"函数func和func1运行在线程对象t和tt中\",{\"1\":{\"255\":1}}],[\"函数中\",{\"1\":{\"249\":1}}],[\"函数将会阻塞主线程\",{\"1\":{\"234\":1}}],[\"函数\",{\"1\":{\"218\":1,\"234\":3,\"286\":2,\"320\":1,\"471\":1,\"473\":1}}],[\"函数回收子进程的退出状态信息\",{\"1\":{\"216\":1}}],[\"函数名被修饰成\",{\"1\":{\"202\":1}}],[\"函数return\",{\"1\":{\"198\":1}}],[\"函数分别放在\",{\"1\":{\"111\":1}}],[\"函数和\",{\"1\":{\"111\":1}}],[\"函数被划分到\",{\"1\":{\"111\":1}}],[\"原理\",{\"1\":{\"338\":1}}],[\"原因在于右值引用绑定了右值\",{\"1\":{\"268\":1}}],[\"原子地加载当前的头部指针\",{\"1\":{\"249\":1}}],[\"原子地加载当前的尾部指针\",{\"1\":{\"249\":1}}],[\"原子比较并交换\",{\"1\":{\"247\":1}}],[\"原子交换\",{\"1\":{\"247\":1}}],[\"原子递增和递减\",{\"1\":{\"247\":1}}],[\"原子加载和存储\",{\"1\":{\"247\":1}}],[\"原子操作是不可分割的\",{\"1\":{\"246\":1}}],[\"原子操作适用于需要高效并发访问的场景\",{\"1\":{\"239\":1}}],[\"原子操作\",{\"1\":{\"239\":1,\"246\":1}}],[\"原子操作直接操作共享变量\",{\"1\":{\"239\":1}}],[\"原子操作依赖于硬件提供的原子指令\",{\"1\":{\"239\":1}}],[\"原子操作通过硬件支持的指令集实现\",{\"1\":{\"239\":1}}],[\"原来的连接不需要维护吗\",{\"1\":{\"111\":1}}],[\"原先落在同一个桶的多个\",{\"1\":{\"73\":1}}],[\"原先末尾的元素变得\",{\"1\":{\"10\":1}}],[\"就不需要使用std\",{\"1\":{\"258\":1}}],[\"就不能正确识别对象类型从而不能正确调用析构函数\",{\"1\":{\"208\":1}}],[\"就会进入就绪状态\",{\"1\":{\"214\":1}}],[\"就绪\",{\"1\":{\"213\":1,\"214\":4}}],[\"就须要通过\",{\"1\":{\"208\":1}}],[\"就可以根据派生类对虚函数重写情况动态的进行调用\",{\"1\":{\"205\":1}}],[\"就可以获得有序的节点序列\",{\"1\":{\"111\":1}}],[\"就调用基类的函数\",{\"1\":{\"205\":1}}],[\"就调用派生类的函数\",{\"1\":{\"205\":1}}],[\"就是有点厚\",{\"1\":{\"194\":1}}],[\"就是是书太厚了\",{\"1\":{\"194\":1}}],[\"就得到了栈这种数据结构\",{\"1\":{\"44\":1}}],[\"吗\",{\"1\":{\"111\":2}}],[\"前些年这本书可以说是c++入门必备\",{\"1\":{\"194\":1}}],[\"前序\",{\"1\":{\"110\":1,\"111\":1}}],[\"前两节介绍了哈希表的工作原理和哈希冲突的处理方法\",{\"1\":{\"67\":1}}],[\"层堆栈帧\",{\"1\":{\"484\":1}}],[\"层\",{\"1\":{\"110\":1}}],[\"层的节点数量\",{\"1\":{\"86\":1}}],[\"体现\",{\"1\":{\"110\":1}}],[\"体现了\",{\"1\":{\"77\":1}}],[\"重置当前分支的提交历史或工作目录状态\",{\"1\":{\"436\":1}}],[\"重试延迟\",{\"1\":{\"362\":1}}],[\"重试策略\",{\"0\":{\"361\":1}}],[\"重定向状态码\",{\"1\":{\"328\":1}}],[\"重定向标准文件描述符\",{\"1\":{\"221\":1}}],[\"重复节点不插入\",{\"1\":{\"106\":1}}],[\"重点回顾\",{\"0\":{\"33\":1,\"51\":1,\"72\":1,\"110\":1}}],[\"辅助方法\",{\"1\":{\"106\":1,\"107\":1}}],[\"递归互斥量\",{\"1\":{\"256\":1}}],[\"递归插入节点\",{\"1\":{\"106\":1}}],[\"递归删除节点\",{\"1\":{\"91\":1,\"107\":1}}],[\"≤0\",{\"1\":{\"104\":1}}],[\"≥0\",{\"1\":{\"104\":1}}],[\"镜像\",{\"1\":{\"101\":1}}],[\"旋转的选择\",{\"0\":{\"104\":1}}],[\"旋转操作分为四种\",{\"1\":{\"99\":1}}],[\"旋转操作既能保持\",{\"1\":{\"99\":1}}],[\"旋转\",{\"1\":{\"99\":1}}],[\"旋转哈希\",{\"1\":{\"69\":2}}],[\"方便异步调用\",{\"1\":{\"261\":1}}],[\"方便后续使用\",{\"1\":{\"98\":1}}],[\"方式\",{\"1\":{\"230\":1}}],[\"方法来表示不同的操作\",{\"1\":{\"346\":1}}],[\"方法是安全的\",{\"1\":{\"331\":1}}],[\"方法是将节点值和空位按层序遍历顺序排列\",{\"1\":{\"110\":1}}],[\"方法执行多次和执行一次的效果相同\",{\"1\":{\"331\":1}}],[\"方法的幂等性和安全性\",{\"0\":{\"331\":1}}],[\"方法用于从队列中取出一个元素\",{\"1\":{\"249\":1}}],[\"方法用于将一个元素插入队列\",{\"1\":{\"249\":1}}],[\"方法中给出\",{\"1\":{\"111\":1}}],[\"方法\",{\"1\":{\"45\":1,\"111\":1,\"249\":2,\"327\":1}}],[\"方法名\",{\"1\":{\"39\":1}}],[\"uri\",{\"0\":{\"330\":1}}],[\"url>\",{\"1\":{\"447\":1,\"448\":1}}],[\"url\",{\"0\":{\"330\":1},\"1\":{\"311\":2,\"327\":2,\"330\":1,\"355\":1,\"426\":1,\"454\":1}}],[\"utils\",{\"1\":{\"318\":2}}],[\"up\",{\"1\":{\"420\":1}}],[\"uptime\",{\"1\":{\"317\":1}}],[\"update\",{\"1\":{\"310\":1,\"384\":3,\"448\":1,\"450\":1,\"452\":1}}],[\"updateheight\",{\"1\":{\"97\":1,\"100\":2,\"101\":2,\"106\":1,\"107\":1,\"111\":2}}],[\"ubuntu\",{\"1\":{\"315\":3,\"459\":1}}],[\"usr\",{\"1\":{\"420\":7,\"503\":1}}],[\"use\",{\"1\":{\"373\":3,\"420\":1}}],[\"user=ollama\",{\"1\":{\"420\":1}}],[\"username\",{\"1\":{\"376\":1,\"383\":2,\"387\":2,\"392\":5,\"393\":1,\"394\":1,\"395\":2,\"496\":1}}],[\"users\",{\"1\":{\"376\":1,\"377\":1,\"378\":1,\"379\":3,\"380\":1,\"381\":1,\"383\":2,\"384\":1,\"385\":2,\"387\":3,\"388\":1,\"389\":1,\"392\":15,\"393\":1,\"394\":2,\"395\":2,\"396\":1}}],[\"user\",{\"1\":{\"317\":1,\"327\":1,\"392\":5,\"393\":1,\"394\":1,\"426\":1,\"427\":2,\"504\":3}}],[\"useie\",{\"1\":{\"311\":1}}],[\"using\",{\"1\":{\"205\":1,\"255\":1,\"256\":2,\"257\":1,\"261\":2,\"262\":1,\"268\":1,\"269\":1,\"420\":2}}],[\"u\",{\"1\":{\"272\":2}}],[\"udp\",{\"1\":{\"229\":1,\"335\":1,\"352\":1}}],[\"umask\",{\"1\":{\"220\":1,\"221\":1}}],[\"uint32\",{\"1\":{\"260\":4}}],[\"ui\",{\"1\":{\"166\":1,\"169\":3,\"171\":1,\"174\":2,\"179\":1,\"182\":1,\"186\":1}}],[\"undisplay\",{\"1\":{\"484\":1}}],[\"undo\",{\"1\":{\"52\":1}}],[\"unavailable\",{\"1\":{\"328\":1}}],[\"unauthorized\",{\"1\":{\"328\":1}}],[\"unqi\",{\"1\":{\"264\":1}}],[\"unlock\",{\"1\":{\"236\":1,\"237\":1,\"241\":2,\"256\":2}}],[\"until\",{\"1\":{\"234\":2,\"483\":1}}],[\"unit\",{\"1\":{\"420\":1}}],[\"uniq\",{\"1\":{\"264\":1}}],[\"unique\",{\"1\":{\"237\":1,\"238\":1,\"257\":5,\"260\":4,\"262\":1,\"266\":1}}],[\"union\",{\"1\":{\"227\":4,\"392\":2,\"395\":3,\"397\":1}}],[\"unix\",{\"1\":{\"216\":2,\"297\":1,\"474\":2}}],[\"unix中存放在可执行文件的只读数据段中\",{\"1\":{\"206\":1}}],[\"unsigned\",{\"1\":{\"69\":1,\"227\":1,\"285\":3}}],[\"unordered\",{\"1\":{\"57\":1}}],[\"级别\",{\"1\":{\"95\":1}}],[\"确保子模块的\",{\"1\":{\"454\":1}}],[\"确保更新完子模块后\",{\"1\":{\"454\":1}}],[\"确保更新操作一定在取值之后\",{\"1\":{\"248\":1}}],[\"确保多个服务器间的请求均衡\",{\"1\":{\"354\":1}}],[\"确保数据的保密性和完整性\",{\"1\":{\"337\":1}}],[\"确保以下文件准备好\",{\"1\":{\"319\":1}}],[\"确保已经安装qemu\",{\"1\":{\"319\":1}}],[\"确保所有数据正确传输\",{\"1\":{\"293\":1}}],[\"确保所有线程都到达某个同步点后才能继续执行\",{\"1\":{\"242\":1}}],[\"确保双方都准备好通信\",{\"1\":{\"293\":1}}],[\"确保对方接收并释放资源\",{\"1\":{\"292\":1}}],[\"确保对方收到了ack\",{\"1\":{\"290\":1}}],[\"确保主线程在两个子线程结束后才退出\",{\"1\":{\"249\":1}}],[\"确保在不同平台上实现一致的原子操作行为\",{\"1\":{\"239\":1}}],[\"确保在持续添加和删除节点后\",{\"1\":{\"95\":1}}],[\"确保守护进程不能重新打开控制终端\",{\"1\":{\"220\":1}}],[\"确保与\",{\"1\":{\"180\":1}}],[\"确定性\",{\"1\":{\"68\":1}}],[\"论文中详细描述了一系列操作\",{\"1\":{\"95\":1}}],[\"年提出的\",{\"1\":{\"163\":1}}],[\"年\",{\"1\":{\"95\":1}}],[\"劣化为\",{\"1\":{\"95\":1}}],[\"利用qemu+gdb调试linux内核\",{\"0\":{\"314\":1}}],[\"利用\",{\"1\":{\"286\":2}}],[\"利用中序遍历升序的性质\",{\"1\":{\"92\":1}}],[\"利用乘法的不相关性\",{\"1\":{\"69\":1}}],[\"右联接\",{\"1\":{\"392\":1}}],[\"右偏树\",{\"1\":{\"104\":3}}],[\"右旋和左旋操作在逻辑上是镜像对称的\",{\"1\":{\"101\":1}}],[\"右旋操作后岂不是断掉了\",{\"1\":{\"111\":1}}],[\"右旋操作是处理失衡节点\",{\"1\":{\"111\":1}}],[\"右旋操作\",{\"1\":{\"100\":1,\"111\":1}}],[\"右旋操作步骤\",{\"1\":{\"100\":1}}],[\"右旋\",{\"0\":{\"100\":1},\"1\":{\"99\":1,\"100\":1,\"102\":1,\"103\":1,\"104\":2}}],[\"右\",{\"1\":{\"92\":1,\"110\":2,\"111\":1}}],[\"右子节点值\",{\"1\":{\"111\":1}}],[\"右子节点\",{\"1\":{\"92\":1,\"97\":1}}],[\"右子节点指针\",{\"1\":{\"77\":1}}],[\"右子树高度\",{\"1\":{\"98\":1}}],[\"右子树\",{\"1\":{\"90\":1,\"91\":2}}],[\"右子树也是二叉搜索树\",{\"1\":{\"87\":1}}],[\"右子树中所有节点的值\",{\"1\":{\"87\":1}}],[\"右子树是\",{\"1\":{\"77\":1}}],[\"→\",{\"1\":{\"92\":2,\"111\":2,\"214\":6}}],[\"左联接\",{\"1\":{\"392\":1}}],[\"左偏树\",{\"1\":{\"104\":3}}],[\"左旋的操作\",{\"1\":{\"104\":1}}],[\"左旋操作\",{\"1\":{\"101\":2}}],[\"左旋\",{\"0\":{\"101\":1},\"1\":{\"99\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":2,\"110\":1}}],[\"左\",{\"1\":{\"92\":1,\"111\":1}}],[\"左子树高度\",{\"1\":{\"98\":1}}],[\"左子树\",{\"1\":{\"90\":1,\"91\":2}}],[\"左子树中所有节点的值\",{\"1\":{\"87\":1}}],[\"左子树是\",{\"1\":{\"77\":1}}],[\"左子节点值\",{\"1\":{\"111\":1}}],[\"左子节点\",{\"1\":{\"92\":1,\"97\":1}}],[\"左子节点指针\",{\"1\":{\"77\":1}}],[\"左子节点引用和右子节点引用\",{\"1\":{\"77\":1}}],[\"覆盖\",{\"1\":{\"91\":1}}],[\"待删除节点在\",{\"1\":{\"91\":2}}],[\"用法\",{\"1\":{\"425\":1,\"426\":1,\"427\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"435\":1,\"436\":1,\"438\":1,\"439\":1,\"440\":1,\"441\":1,\"443\":1,\"444\":1,\"445\":1}}],[\"用dark\",{\"1\":{\"308\":1}}],[\"用户主目录中的\",{\"1\":{\"496\":1}}],[\"用户主目录下的\",{\"1\":{\"496\":1}}],[\"用户在\",{\"1\":{\"182\":1}}],[\"用户在表单中输入数据时\",{\"1\":{\"168\":1}}],[\"用户交互\",{\"1\":{\"180\":1,\"182\":1}}],[\"用户单独调用\",{\"1\":{\"111\":1}}],[\"用来取消元字符的特殊含义\",{\"1\":{\"404\":1}}],[\"用来定义常量和函数\",{\"1\":{\"201\":1}}],[\"用来对比两个对象的值是否相等\",{\"1\":{\"111\":1}}],[\"用来比较两个变量是否指向同一个对象\",{\"1\":{\"111\":1}}],[\"用作系统中的多级索引\",{\"1\":{\"94\":1}}],[\"用\",{\"1\":{\"91\":2}}],[\"用于自动配置调试环境和简化调试工作流\",{\"1\":{\"505\":1}}],[\"用于注册\",{\"1\":{\"503\":1}}],[\"用于打印\",{\"1\":{\"495\":1}}],[\"用于逐行或逐指令执行程序\",{\"1\":{\"483\":1}}],[\"用于查找系统中已安装的库\",{\"1\":{\"471\":1}}],[\"用于查看页面的\",{\"1\":{\"347\":1}}],[\"用于指定字符或表达式出现的次数\",{\"1\":{\"412\":1}}],[\"用于分组\",{\"1\":{\"404\":1}}],[\"用于分块传输大数据\",{\"1\":{\"359\":1}}],[\"用于构建匹配模式\",{\"1\":{\"403\":1,\"412\":1}}],[\"用于构建数据库中的索引系统\",{\"1\":{\"109\":1}}],[\"用于捕获和分析\",{\"1\":{\"347\":1}}],[\"用于调试和测试\",{\"1\":{\"347\":1}}],[\"用于发送\",{\"1\":{\"347\":1}}],[\"用于缓存验证\",{\"1\":{\"342\":1}}],[\"用于传递身份验证信息\",{\"1\":{\"329\":1}}],[\"用于轮询多个子进程的状态\",{\"1\":{\"303\":1}}],[\"用于在\",{\"1\":{\"494\":1}}],[\"用于在编译时加密字符串\",{\"1\":{\"286\":1}}],[\"用于在父子进程之间传递数据\",{\"1\":{\"224\":1}}],[\"用于字符加密和解密的constexpr函数\",{\"1\":{\"285\":1}}],[\"用于解决\",{\"1\":{\"264\":1}}],[\"用于保存子进程的终止状态\",{\"1\":{\"298\":1}}],[\"用于保存多线程同时操作的共享数据\",{\"1\":{\"256\":1}}],[\"用于保存等待条件的线程\",{\"1\":{\"238\":1}}],[\"用于保存等待的线程\",{\"1\":{\"237\":1}}],[\"用于保存等待锁的线程\",{\"1\":{\"236\":1}}],[\"用于加载操作\",{\"1\":{\"250\":1}}],[\"用于没有数据依赖的地方\",{\"1\":{\"250\":1}}],[\"用于通知进程某个事件发生\",{\"1\":{\"228\":1}}],[\"用于优雅地终止进程\",{\"1\":{\"222\":1}}],[\"用于函数穿参数\",{\"1\":{\"203\":1}}],[\"用于修改指定索引处的数据\",{\"1\":{\"185\":1}}],[\"用于定制数据的显示和编辑\",{\"1\":{\"181\":1}}],[\"用于显示树形结构数据\",{\"1\":{\"180\":1}}],[\"用于显示表格数据\",{\"1\":{\"180\":1}}],[\"用于显示列表数据\",{\"1\":{\"180\":1}}],[\"用于二维表格数据的基类\",{\"1\":{\"179\":1}}],[\"用于一维列表数据的基类\",{\"1\":{\"179\":1}}],[\"用于创建频繁的对象\",{\"0\":{\"309\":1}}],[\"用于创建一系列相关或相互依赖的对象\",{\"1\":{\"153\":1}}],[\"用于创建单一类型的对象\",{\"1\":{\"153\":1}}],[\"用于对分组后的数据进行筛选\",{\"1\":{\"390\":1}}],[\"用于对数据进行排序和过滤\",{\"1\":{\"186\":1}}],[\"用于对象之间的\",{\"1\":{\"125\":1}}],[\"用于对比两个变量的值是否相等\",{\"1\":{\"111\":1}}],[\"用于接收主题的通知\",{\"1\":{\"124\":1}}],[\"用于存储仓库的元数据\",{\"1\":{\"425\":1}}],[\"用于存储结构化数据\",{\"1\":{\"375\":1}}],[\"用于存储操作\",{\"1\":{\"250\":1}}],[\"用于存储数据流\",{\"1\":{\"94\":1}}],[\"用于存储队列元素的数组\",{\"1\":{\"42\":1}}],[\"用于计算哈希表中的桶索引\",{\"1\":{\"71\":1,\"72\":1}}],[\"用于衡量哈希冲突的严重程度\",{\"1\":{\"59\":1}}],[\"用于反撤销\",{\"1\":{\"52\":1}}],[\"用于撤销\",{\"1\":{\"52\":1}}],[\"用于记录函数的上下文信息\",{\"1\":{\"50\":1}}],[\"用于记录队列长度\",{\"1\":{\"42\":1}}],[\"用于记录列表当前元素数量\",{\"1\":{\"32\":1}}],[\"记录日志\",{\"1\":{\"222\":1}}],[\"记录遇到的首个删除标记\",{\"1\":{\"63\":1}}],[\"记为\",{\"1\":{\"91\":1,\"100\":1,\"101\":1}}],[\"度\",{\"1\":{\"110\":1}}],[\"度为\",{\"1\":{\"91\":3}}],[\"度的取值范围是\",{\"1\":{\"78\":1}}],[\"执行代码\",{\"1\":{\"483\":1}}],[\"执行当前函数并返回到调用处\",{\"1\":{\"483\":1}}],[\"执行下一行源代码\",{\"1\":{\"483\":2}}],[\"执行守护进程的任务\",{\"1\":{\"220\":1}}],[\"执行旋转操作\",{\"1\":{\"104\":1,\"106\":1,\"107\":1}}],[\"执行\",{\"1\":{\"100\":1,\"102\":2,\"103\":2,\"454\":1}}],[\"执行对应的删除节点操作\",{\"1\":{\"91\":1}}],[\"执行扩容\",{\"1\":{\"61\":1,\"63\":1}}],[\"否则将违反其定义\",{\"1\":{\"90\":1}}],[\"循环引用和返回\",{\"1\":{\"264\":1}}],[\"循环等待\",{\"1\":{\"244\":1}}],[\"循环等待不可抢占的互斥资源\",{\"1\":{\"244\":1}}],[\"循环查找\",{\"1\":{\"89\":1,\"90\":1,\"91\":1}}],[\"循环次数最多为二叉树的高度\",{\"1\":{\"89\":1}}],[\"循环比较节点值\",{\"1\":{\"89\":1}}],[\"满足以下条件\",{\"1\":{\"87\":1}}],[\"满足均匀分布不一定满足抗碰撞性\",{\"1\":{\"68\":1}}],[\"−1≤f≤1\",{\"1\":{\"98\":1}}],[\"−1\",{\"1\":{\"86\":1,\"97\":1}}],[\"达到\",{\"1\":{\"86\":1}}],[\"达到最佳查询效率\",{\"1\":{\"67\":1}}],[\"平衡树\",{\"1\":{\"104\":1}}],[\"平衡\",{\"1\":{\"93\":1}}],[\"平衡二叉树\",{\"0\":{\"85\":1},\"1\":{\"85\":2,\"99\":1}}],[\"平方探测和多次哈希\",{\"1\":{\"65\":1}}],[\"平方探测和多次哈希等\",{\"1\":{\"62\":1}}],[\"平方探测也可能无法访问到它\",{\"1\":{\"64\":1}}],[\"平方探测可能不会探测整个哈希表\",{\"1\":{\"64\":1}}],[\"平方探测并不是完美的\",{\"1\":{\"64\":1}}],[\"平方探测会跳过更大的距离来寻找空位置\",{\"1\":{\"64\":1}}],[\"平方探测通过跳过探测次数平方的距离\",{\"1\":{\"64\":1}}],[\"平方探测主要具有以下优势\",{\"1\":{\"64\":1}}],[\"平方探测不是简单地跳过一个固定的步数\",{\"1\":{\"64\":1}}],[\"平方探测与线性探测类似\",{\"1\":{\"64\":1}}],[\"平方探测\",{\"0\":{\"64\":1}}],[\"完成前不开始\",{\"1\":{\"262\":1}}],[\"完成或资源可用\",{\"1\":{\"214\":1}}],[\"完成\",{\"1\":{\"213\":1}}],[\"完成右旋后\",{\"1\":{\"100\":1}}],[\"完满二叉树和平衡二叉树\",{\"1\":{\"110\":1}}],[\"完全二叉树\",{\"0\":{\"84\":1},\"1\":{\"84\":2,\"110\":1}}],[\"完美二叉树是最理想的状态\",{\"1\":{\"110\":1}}],[\"完美二叉树是理想情况\",{\"1\":{\"86\":1}}],[\"完美二叉树也是一棵完全二叉树\",{\"1\":{\"84\":1}}],[\"完美二叉树常被称为满二叉树\",{\"1\":{\"83\":1}}],[\"完美二叉树\",{\"0\":{\"83\":1},\"1\":{\"83\":2,\"86\":2}}],[\"呈现标准的指数级关系\",{\"1\":{\"83\":1}}],[\"边界匹配等\",{\"1\":{\"412\":1}}],[\"边\",{\"1\":{\"78\":1,\"97\":1,\"110\":1}}],[\"没有子节点的节点\",{\"1\":{\"78\":1}}],[\"没有父节点\",{\"1\":{\"78\":1}}],[\"叶节点的高度为\",{\"1\":{\"97\":1}}],[\"叶节点的度为\",{\"1\":{\"83\":1}}],[\"叶节点\",{\"1\":{\"78\":1,\"110\":1}}],[\"根\",{\"1\":{\"92\":1,\"111\":1}}],[\"根节点的选择是不是很重要\",{\"1\":{\"111\":1}}],[\"根节点的值\",{\"1\":{\"87\":1}}],[\"根节点值\",{\"1\":{\"111\":1}}],[\"根节点所在层为\",{\"1\":{\"78\":1}}],[\"根节点\",{\"1\":{\"78\":1,\"90\":1,\"91\":2,\"92\":1}}],[\"根据某些列之间的关系将表连接在一起\",{\"1\":{\"392\":1}}],[\"根据配置\",{\"1\":{\"311\":1}}],[\"根据装载的mstyle\",{\"1\":{\"308\":1}}],[\"根据应用场景的不同\",{\"1\":{\"230\":1}}],[\"根据以上特征\",{\"1\":{\"206\":1}}],[\"根据对象的类型去初始化虚指针vptr\",{\"1\":{\"205\":1}}],[\"根据操作更新数据\",{\"1\":{\"182\":1}}],[\"根据节点失衡情况的不同\",{\"1\":{\"99\":1}}],[\"根据当前节点值和\",{\"1\":{\"90\":1}}],[\"根据此哈希函数\",{\"1\":{\"63\":1}}],[\"根据此变量\",{\"1\":{\"32\":1}}],[\"根据哈希函数的结果访问链表头部\",{\"1\":{\"61\":1}}],[\"根据索引实现随机抽样\",{\"1\":{\"15\":1}}],[\"子模块无法初始化或更新\",{\"1\":{\"454\":1}}],[\"子模块指针未更新\",{\"1\":{\"454\":1}}],[\"子模块本身也可以包含子模块\",{\"1\":{\"453\":1}}],[\"子模块不会自动被克隆\",{\"1\":{\"448\":1}}],[\"子句结合使用\",{\"1\":{\"396\":1}}],[\"子句中\",{\"1\":{\"393\":1}}],[\"子句\",{\"1\":{\"390\":1}}],[\"子句进行分组\",{\"1\":{\"390\":1}}],[\"子句对查询结果进行排序\",{\"1\":{\"389\":1}}],[\"子句可以指定条件\",{\"1\":{\"388\":1}}],[\"子查询可以出现在\",{\"1\":{\"393\":1}}],[\"子查询是嵌套在另一个查询中的查询\",{\"1\":{\"393\":1}}],[\"子查询\",{\"1\":{\"386\":1,\"397\":1}}],[\"子进程的退出状态码\",{\"1\":{\"301\":1}}],[\"子进程\",{\"1\":{\"224\":1,\"225\":1,\"226\":1,\"227\":1}}],[\"子进程成为新的会话组长\",{\"1\":{\"221\":1}}],[\"子进程继续运行\",{\"1\":{\"221\":1}}],[\"子进程继续执行\",{\"1\":{\"218\":1}}],[\"子进程并退出父进程\",{\"1\":{\"221\":1}}],[\"子进程再\",{\"1\":{\"218\":1}}],[\"子进程被\",{\"1\":{\"218\":1}}],[\"子进程会被\",{\"1\":{\"218\":1}}],[\"子进程代码\",{\"1\":{\"218\":2,\"301\":1}}],[\"子进程终止后\",{\"1\":{\"216\":1}}],[\"子类2继承基类但没有重写基类的函数\",{\"1\":{\"205\":1}}],[\"子类1继承并重写了基类的函数\",{\"1\":{\"205\":1}}],[\"子类对象必须能够替换其父类对象且行为一致\",{\"1\":{\"118\":1}}],[\"子树的根节点和其父节点的连接是在该函数返回后完成的\",{\"1\":{\"111\":1}}],[\"子树恢复平衡\",{\"1\":{\"100\":1}}],[\"子树\",{\"1\":{\"77\":1,\"110\":1}}],[\"子节点及其以下形成的树被称为该节点的左\",{\"1\":{\"110\":1}}],[\"子节点的平衡因子\",{\"1\":{\"104\":1}}],[\"子节点数量\",{\"1\":{\"91\":2,\"107\":3}}],[\"子节点\",{\"1\":{\"77\":1}}],[\"祖先\",{\"1\":{\"77\":1}}],[\"发送\",{\"1\":{\"355\":1}}],[\"发送fin\",{\"1\":{\"290\":1}}],[\"发送syn\",{\"1\":{\"290\":1}}],[\"发送消息\",{\"1\":{\"225\":1}}],[\"发送不同天数的请假请求\",{\"1\":{\"159\":1}}],[\"发生\",{\"1\":{\"213\":1}}],[\"发生变化\",{\"1\":{\"73\":1}}],[\"发生冲突\",{\"1\":{\"59\":1}}],[\"发现\",{\"1\":{\"73\":1}}],[\"又能保证哈希表的空间使用率\",{\"1\":{\"73\":1}}],[\"又称散列表\",{\"1\":{\"56\":1}}],[\"二者通过\",{\"1\":{\"171\":1}}],[\"二者都应该依赖于抽象\",{\"1\":{\"118\":1}}],[\"二叉搜索树可能退化为链表\",{\"1\":{\"95\":1}}],[\"二叉搜索树常见应用\",{\"0\":{\"94\":1}}],[\"二叉搜索树退化\",{\"1\":{\"93\":1}}],[\"二叉搜索树是一种高效的元素查找数据结构\",{\"1\":{\"110\":1}}],[\"二叉搜索树是\",{\"1\":{\"93\":1}}],[\"二叉搜索树不允许存在重复节点\",{\"1\":{\"90\":1}}],[\"二叉搜索树的各项操作的时间复杂度都是对数阶\",{\"1\":{\"93\":1}}],[\"二叉搜索树的效率\",{\"0\":{\"93\":1}}],[\"二叉搜索树的中序遍历序列\",{\"1\":{\"92\":1}}],[\"二叉搜索树的中序遍历序列是升序的\",{\"1\":{\"92\":1}}],[\"二叉搜索树的\",{\"1\":{\"91\":1}}],[\"二叉搜索树的查找操作与二分查找算法的工作原理一致\",{\"1\":{\"89\":1}}],[\"二叉搜索树的操作\",{\"0\":{\"88\":1}}],[\"二叉搜索树查找节点示例\",{\"1\":{\"89\":1}}],[\"二叉搜索树\",{\"0\":{\"87\":1},\"1\":{\"87\":2,\"93\":1,\"95\":1,\"99\":1}}],[\"二叉树中的插入与删除一般由一套操作配合完成\",{\"1\":{\"111\":1}}],[\"二叉树中首个失衡节点是\",{\"1\":{\"100\":1}}],[\"二叉树可以用数组表示\",{\"1\":{\"110\":1}}],[\"二叉树是一种非线性数据结构\",{\"1\":{\"110\":1}}],[\"二叉树退化为\",{\"1\":{\"86\":1}}],[\"二叉树基本操作\",{\"0\":{\"79\":1}}],[\"二叉树的层序遍历是一种广度优先搜索方法\",{\"1\":{\"110\":1}}],[\"二叉树的初始化\",{\"1\":{\"110\":1}}],[\"二叉树的相关术语包括根节点\",{\"1\":{\"110\":1}}],[\"二叉树的中序遍历遵循\",{\"1\":{\"92\":1}}],[\"二叉树的叶节点数量\",{\"1\":{\"86\":1}}],[\"二叉树的最佳结构与最差结构\",{\"1\":{\"86\":1}}],[\"二叉树的退化\",{\"0\":{\"86\":1}}],[\"二叉树的常用术语\",{\"1\":{\"78\":1}}],[\"二叉树的常用术语如下图所示\",{\"1\":{\"78\":1}}],[\"二叉树的高度\",{\"1\":{\"78\":1}}],[\"二叉树的基本单元是节点\",{\"1\":{\"77\":1}}],[\"二叉树常见术语\",{\"0\":{\"78\":1}}],[\"二叉树节点结构体\",{\"1\":{\"77\":1}}],[\"二叉树\",{\"0\":{\"76\":1,\"77\":1},\"1\":{\"73\":1,\"77\":1},\"2\":{\"113\":1}}],[\"二分查找等都主要在数组上进行\",{\"1\":{\"15\":1}}],[\"冲突比较平均时\",{\"1\":{\"73\":1}}],[\"冲突就越少\",{\"1\":{\"59\":1}}],[\"常与聚合函数结合使用\",{\"1\":{\"397\":1}}],[\"常与共享内存结合使用\",{\"1\":{\"227\":1}}],[\"常用格式包括\",{\"1\":{\"482\":1}}],[\"常用\",{\"0\":{\"321\":1}}],[\"常用命令以及高级功能\",{\"1\":{\"478\":1}}],[\"常用命令\",{\"0\":{\"280\":1}}],[\"常用的聚合函数包括\",{\"1\":{\"391\":1}}],[\"常用的代理模型有\",{\"1\":{\"186\":1}}],[\"常用的更新信号包括\",{\"1\":{\"183\":1}}],[\"常用的视图类包括\",{\"1\":{\"180\":1}}],[\"常用于实时通知等场景\",{\"1\":{\"356\":1}}],[\"常用于安全应用与协议\",{\"1\":{\"72\":1}}],[\"常用于校验文件完整性\",{\"1\":{\"72\":1}}],[\"常用作触发哈希表扩容的条件\",{\"1\":{\"72\":1}}],[\"常见条件操作符\",{\"1\":{\"388\":1}}],[\"常见需要实现的方法\",{\"1\":{\"185\":1}}],[\"常见二叉树类型\",{\"0\":{\"82\":1}}],[\"常见的功能包括\",{\"1\":{\"495\":1}}],[\"常见的联接类型包括\",{\"1\":{\"392\":1}}],[\"常见的进程间通信方式包括\",{\"1\":{\"223\":1}}],[\"常见的二叉树类型有完美二叉树\",{\"1\":{\"110\":1}}],[\"常见的哈希算法包括\",{\"1\":{\"72\":1}}],[\"常见的哈希表操作包括查询\",{\"1\":{\"72\":1}}],[\"常见的链表类型包括单向链表\",{\"1\":{\"33\":1}}],[\"常见的链表类型包括三种\",{\"1\":{\"24\":1}}],[\"常见哈希算法\",{\"0\":{\"70\":1}}],[\"常见链表种类\",{\"1\":{\"24\":1}}],[\"常见链表类型\",{\"0\":{\"24\":1}}],[\"反斜杠\",{\"1\":{\"404\":1}}],[\"反向代理\",{\"1\":{\"354\":1}}],[\"反映了自然界中常见的细胞分裂现象\",{\"1\":{\"83\":1}}],[\"反映了哈希冲突的严重程度\",{\"1\":{\"72\":1}}],[\"反撤销\",{\"1\":{\"52\":1}}],[\"导致查询结果出错\",{\"1\":{\"72\":1}}],[\"导致该次入栈操作的时间复杂度变为\",{\"1\":{\"49\":1}}],[\"映射为数组索引\",{\"1\":{\"72\":1}}],[\"攻击\",{\"0\":{\"340\":1},\"1\":{\"71\":1}}],[\"布尔量\",{\"1\":{\"71\":1}}],[\"得到单一的哈希值\",{\"1\":{\"71\":1}}],[\"得到值\",{\"1\":{\"57\":1}}],[\"元字符\",{\"1\":{\"412\":1}}],[\"元字符是正则表达式中的特殊字符\",{\"1\":{\"403\":1}}],[\"元组的哈希值是对其中每一个元素进行哈希\",{\"1\":{\"71\":1}}],[\"元素会被移动至距离理想位置\",{\"1\":{\"63\":1}}],[\"元素出栈\",{\"1\":{\"45\":1}}],[\"元素出队\",{\"1\":{\"39\":1}}],[\"元素入栈\",{\"1\":{\"45\":2}}],[\"元素入队\",{\"1\":{\"39\":2}}],[\"元素索引\",{\"1\":{\"34\":1}}],[\"元素内存地址\",{\"1\":{\"34\":1}}],[\"元素长度\",{\"1\":{\"34\":2}}],[\"元素占用内存多\",{\"1\":{\"23\":1}}],[\"元素占用内存少\",{\"1\":{\"23\":1}}],[\"浮点数和字符串的哈希值计算较为复杂\",{\"1\":{\"71\":1}}],[\"整形有这种原子变量已经足够方便\",{\"1\":{\"258\":1}}],[\"整数\",{\"1\":{\"71\":1}}],[\"整数和布尔量的哈希值就是其本身\",{\"1\":{\"71\":1}}],[\"整除的\",{\"1\":{\"69\":1}}],[\"整除\",{\"1\":{\"69\":1}}],[\"低频增删的场景\",{\"1\":{\"109\":1}}],[\"低频查找删除数据的场景下\",{\"1\":{\"93\":1}}],[\"低\",{\"1\":{\"70\":2}}],[\"很少\",{\"1\":{\"70\":2}}],[\"很差\",{\"1\":{\"61\":1}}],[\"较多\",{\"1\":{\"70\":2}}],[\"仍用于数据完整性检查\",{\"1\":{\"70\":1}}],[\"仍未出现成功的攻击案例\",{\"1\":{\"70\":1}}],[\"仍然保留在系统中\",{\"1\":{\"216\":1}}],[\"仍然有退化至\",{\"1\":{\"73\":1}}],[\"仍然存在聚集现象\",{\"1\":{\"64\":1}}],[\"仍然指向\",{\"1\":{\"20\":1}}],[\"系列函数\",{\"1\":{\"218\":1}}],[\"系列\",{\"1\":{\"70\":1}}],[\"系列中的\",{\"1\":{\"70\":1}}],[\"系统全局的\",{\"1\":{\"496\":1}}],[\"系统环境\",{\"1\":{\"315\":1}}],[\"系统资源不能被强制从一个进程\",{\"1\":{\"244\":1}}],[\"系统中用于等待子进程状态变化的系统调用\",{\"1\":{\"297\":1}}],[\"系统中\",{\"1\":{\"219\":1}}],[\"系统管理的麻烦\",{\"1\":{\"217\":1}}],[\"系统\",{\"1\":{\"216\":1,\"474\":1}}],[\"系统将其从内存中清除\",{\"1\":{\"214\":1}}],[\"系统将其从内存中移除\",{\"1\":{\"213\":1}}],[\"系统需求变动导致的修改尽可能的不会扩散的稳定的模块\",{\"1\":{\"119\":1}}],[\"系统通常不会直接存储用户的明文密码\",{\"1\":{\"68\":1}}],[\"系统都会在栈顶添加一个栈帧\",{\"1\":{\"50\":1}}],[\"系统会对输入的密码计算哈希值\",{\"1\":{\"68\":1}}],[\"系统会将哈希表扩容至原先的\",{\"1\":{\"59\":1}}],[\"系统会为列表分配\",{\"1\":{\"49\":1}}],[\"系统会申请一块新的内存\",{\"1\":{\"34\":1}}],[\"系统随后会根据顺序处理队列中的订单\",{\"1\":{\"43\":1}}],[\"系统可以利用这些信息来优化数据结构的操作效率\",{\"1\":{\"14\":1}}],[\"已被弃用\",{\"1\":{\"70\":2}}],[\"已被成功攻击\",{\"1\":{\"70\":2}}],[\"已多次被成功攻击\",{\"1\":{\"70\":1}}],[\"已经连接到\",{\"1\":{\"320\":1}}],[\"已经启动并等待\",{\"1\":{\"319\":1}}],[\"已经获得的资源在未使用完之前不能被抢占\",{\"1\":{\"244\":1}}],[\"已经实现了双向链表\",{\"1\":{\"34\":1}}],[\"已经从链表中删除了\",{\"1\":{\"34\":1}}],[\"已经不再属于该链表了\",{\"1\":{\"20\":1}}],[\"近一个世纪以来\",{\"1\":{\"70\":1}}],[\"脆弱\",{\"1\":{\"70\":1}}],[\"提交更改\",{\"1\":{\"451\":1}}],[\"提交子模块的更新\",{\"1\":{\"450\":1}}],[\"提交暂存区的更改\",{\"1\":{\"430\":1}}],[\"提取数据\",{\"1\":{\"397\":1,\"412\":1}}],[\"提升了传输效率\",{\"1\":{\"335\":1}}],[\"提升哈希算法的安全性\",{\"1\":{\"71\":1}}],[\"提升哈希算法的稳健性\",{\"1\":{\"69\":1}}],[\"提倡不在构造函数和析构函数中调用虚函数\",{\"1\":{\"207\":1}}],[\"提供多种单步执行命令\",{\"1\":{\"483\":1}}],[\"提供全双工的通信能力\",{\"1\":{\"348\":1}}],[\"提供的\",{\"1\":{\"320\":1}}],[\"提供的数据\",{\"1\":{\"180\":1}}],[\"提供逆袭的信息点\",{\"1\":{\"285\":1}}],[\"提供自定义的编辑控件和逻辑\",{\"1\":{\"181\":1}}],[\"提供标准的项目模型\",{\"1\":{\"179\":1}}],[\"提供接口\",{\"1\":{\"179\":1}}],[\"提供了\",{\"1\":{\"471\":1}}],[\"提供了一组内存序列模型\",{\"1\":{\"246\":1}}],[\"提供了一些代理模型\",{\"1\":{\"186\":1}}],[\"提供了对不同内存模型的支持\",{\"1\":{\"239\":1}}],[\"提供了更高的灵活性和可维护性\",{\"1\":{\"186\":1}}],[\"提供了多种现成的模型类\",{\"1\":{\"185\":1}}],[\"提供了几个现成的模型类\",{\"1\":{\"179\":1}}],[\"提供了很好的解耦性和可维护性\",{\"1\":{\"174\":1}}],[\"提供访问这些数据的接口\",{\"1\":{\"179\":1}}],[\"提供\",{\"1\":{\"167\":1}}],[\"提供具体的实现逻辑\",{\"1\":{\"142\":1}}],[\"提供注册\",{\"1\":{\"124\":1}}],[\"提供快速数据访问\",{\"1\":{\"33\":1}}],[\"提高网站加载速度\",{\"1\":{\"344\":1}}],[\"提高了页面加载速度\",{\"1\":{\"352\":1}}],[\"提高了\",{\"1\":{\"169\":1}}],[\"提高了代码的可扩展性\",{\"1\":{\"131\":1}}],[\"提高系统扩展性\",{\"1\":{\"143\":1}}],[\"提高系统的灵活性\",{\"1\":{\"118\":1}}],[\"提高系统的灵活性和可扩展性\",{\"1\":{\"118\":1}}],[\"提高代码的可维护性和可读性\",{\"1\":{\"118\":1}}],[\"提示\",{\"1\":{\"81\":1,\"83\":1,\"282\":1,\"316\":1,\"319\":1}}],[\"总结\",{\"0\":{\"174\":1,\"230\":1,\"294\":1,\"304\":1,\"366\":1,\"398\":1},\"1\":{\"125\":1,\"131\":1,\"137\":1,\"143\":1,\"153\":1,\"160\":1,\"186\":1,\"262\":1,\"397\":1,\"412\":1,\"454\":1,\"474\":1,\"490\":1,\"505\":1}}],[\"总是会优先遍历下一个最小节点\",{\"1\":{\"92\":1}}],[\"总而言之\",{\"1\":{\"69\":1}}],[\"总的来看\",{\"1\":{\"10\":1}}],[\"7\",{\"0\":{\"435\":1,\"453\":1},\"1\":{\"69\":1,\"159\":2,\"220\":1}}],[\"75\",{\"1\":{\"59\":1}}],[\"​下面以一个文件分割器的实现模拟观察者模式\",{\"1\":{\"125\":1}}],[\"​\",{\"1\":{\"69\":2}}],[\"举个例子\",{\"1\":{\"69\":1,\"205\":1}}],[\"^>\",{\"1\":{\"412\":1}}],[\"^a\",{\"1\":{\"405\":1}}],[\"^abc\",{\"1\":{\"404\":1,\"406\":1}}],[\"^0\",{\"1\":{\"405\":1,\"406\":1}}],[\"^\",{\"1\":{\"69\":2,\"285\":1,\"404\":1,\"412\":1}}],[\"乘法哈希\",{\"1\":{\"69\":1}}],[\"加\",{\"1\":{\"443\":1}}],[\"加号\",{\"1\":{\"409\":1}}],[\"加载自定义\",{\"1\":{\"504\":1}}],[\"加载调试符号文件\",{\"1\":{\"504\":1}}],[\"加载调试插件\",{\"0\":{\"503\":1}}],[\"加载stdcxx\",{\"1\":{\"503\":1}}],[\"加载顺序\",{\"1\":{\"496\":1}}],[\"加载动态库符号\",{\"1\":{\"488\":1}}],[\"加载可执行文件和崩溃时生成的\",{\"1\":{\"480\":1}}],[\"加载指定的可执行文件\",{\"1\":{\"480\":1}}],[\"加载\",{\"1\":{\"320\":1,\"490\":2,\"505\":1}}],[\"加密+缓冲\",{\"1\":{\"137\":1}}],[\"加密文件流\",{\"1\":{\"137\":1}}],[\"加密货币交易验证\",{\"1\":{\"70\":1}}],[\"加法哈希\",{\"1\":{\"69\":1}}],[\"加入知识星球程序员的白粥馆\",{\"1\":{\"3\":1}}],[\"雪崩效应\",{\"1\":{\"68\":1}}],[\"接下来你可以逐步执行代码\",{\"1\":{\"320\":1}}],[\"接收消息\",{\"1\":{\"225\":1}}],[\"接收方可以重新计算接收到的数据的哈希值\",{\"1\":{\"68\":1}}],[\"接管\",{\"1\":{\"218\":2}}],[\"接口或抽象类\",{\"1\":{\"158\":1}}],[\"接口监听文件分割处理的进度\",{\"1\":{\"125\":1}}],[\"接口应尽量细化\",{\"1\":{\"118\":1,\"119\":1}}],[\"接口隔离原则\",{\"1\":{\"118\":1}}],[\"接着遍历链表以查找目标节点并将其删除\",{\"1\":{\"61\":1}}],[\"均匀分布\",{\"1\":{\"68\":2}}],[\"效率非常高\",{\"1\":{\"72\":1}}],[\"效率高\",{\"1\":{\"68\":1}}],[\"效率很高\",{\"1\":{\"29\":1}}],[\"既不是为基类\",{\"1\":{\"208\":1}}],[\"既快又稳\",{\"1\":{\"68\":1}}],[\"既频繁应用在各类算法之中\",{\"1\":{\"15\":1}}],[\"固定时\",{\"1\":{\"67\":1}}],[\"回到主项目\",{\"1\":{\"452\":1}}],[\"回到主项目后\",{\"1\":{\"450\":1}}],[\"回到头部继续遍历\",{\"1\":{\"63\":1}}],[\"回退一提交\",{\"1\":{\"436\":1}}],[\"回退到之前的某个提交点\",{\"1\":{\"436\":1}}],[\"回收子进程的退出状态\",{\"1\":{\"303\":1}}],[\"回收子进程的资源\",{\"1\":{\"218\":1}}],[\"回复syn\",{\"1\":{\"292\":1}}],[\"回忆哈希函数的计算步骤\",{\"1\":{\"67\":1}}],[\"理论上这个t可以是任意类型\",{\"1\":{\"258\":1}}],[\"理论上一定存在\",{\"1\":{\"59\":1}}],[\"理解根证书\",{\"1\":{\"337\":1}}],[\"理解这些状态对于调试网络问题\",{\"1\":{\"294\":1}}],[\"理解\",{\"1\":{\"172\":1}}],[\"理想情况下键值对均匀分布在各个桶中\",{\"1\":{\"67\":1}}],[\"超出容量则连接一个溢出桶\",{\"1\":{\"66\":1}}],[\"超出数组长度范围的元素会丢失\",{\"1\":{\"10\":1}}],[\"规定每个桶最多存储\",{\"1\":{\"66\":1}}],[\"规定队尾仅可添加节点\",{\"1\":{\"41\":1}}],[\"内部启动程序\",{\"1\":{\"481\":1}}],[\"内部有一个调度器\",{\"1\":{\"262\":1}}],[\"内联接\",{\"1\":{\"392\":1}}],[\"内核编译时需要启用调试符号\",{\"1\":{\"321\":1}}],[\"内核源码\",{\"0\":{\"316\":1},\"1\":{\"316\":1}}],[\"内核\",{\"1\":{\"314\":1}}],[\"内核是一种非常强大的方法\",{\"1\":{\"314\":1}}],[\"内容在下面\",{\"1\":{\"317\":1}}],[\"内容质量很高\",{\"1\":{\"195\":1}}],[\"内容丰富且有条理有深度\",{\"1\":{\"194\":1}}],[\"内置\",{\"1\":{\"71\":1}}],[\"内数组长度达到\",{\"1\":{\"66\":1}}],[\"内存等信息\",{\"1\":{\"484\":1}}],[\"内存池\",{\"0\":{\"309\":1}}],[\"内存也会被释放\",{\"1\":{\"267\":1}}],[\"内存序列模型\",{\"1\":{\"246\":1}}],[\"内存模型\",{\"1\":{\"239\":1}}],[\"内存地址偏移一个数组的位置\",{\"1\":{\"200\":1}}],[\"内存效率\",{\"1\":{\"23\":1}}],[\"内存可能无法提供如此大的连续空间\",{\"1\":{\"16\":1}}],[\"内存空间是所有程序的公共资源\",{\"1\":{\"16\":1}}],[\"内存浪费\",{\"1\":{\"10\":1}}],[\"自旋等待\",{\"1\":{\"241\":1}}],[\"自旋锁适用于锁定时间非常短的场景\",{\"1\":{\"241\":1}}],[\"自旋锁通常通过硬件的原子操作实现\",{\"1\":{\"241\":1}}],[\"自旋锁是一种忙等待锁\",{\"1\":{\"241\":1}}],[\"自旋锁\",{\"0\":{\"241\":1}}],[\"自动化任务\",{\"1\":{\"504\":1}}],[\"自动化设置\",{\"1\":{\"495\":1}}],[\"自动进入特定函数等\",{\"1\":{\"495\":1}}],[\"自动加载符号和文件\",{\"0\":{\"500\":1}}],[\"自动加载调试插件\",{\"1\":{\"495\":1}}],[\"自动加锁和解锁\",{\"1\":{\"236\":1}}],[\"自动刷新显示\",{\"1\":{\"182\":1}}],[\"自动更新\",{\"1\":{\"168\":1}}],[\"自定义函数和调试插件\",{\"1\":{\"505\":1}}],[\"自定义\",{\"1\":{\"358\":1}}],[\"自定义一个简单的表格模型\",{\"1\":{\"185\":1}}],[\"自定义模型需要继承\",{\"1\":{\"185\":1}}],[\"自定义模型\",{\"0\":{\"185\":1}}],[\"自定义绘制逻辑\",{\"1\":{\"181\":1}}],[\"自定义委托\",{\"1\":{\"181\":1}}],[\"自底向上执行旋转操作\",{\"1\":{\"106\":1}}],[\"自\",{\"1\":{\"66\":1}}],[\"采用引用计数器的方法\",{\"1\":{\"265\":1}}],[\"采用\",{\"1\":{\"218\":1}}],[\"采用链式地址\",{\"1\":{\"66\":2}}],[\"采用开放寻址\",{\"1\":{\"66\":1,\"72\":1}}],[\"说明请求体的内容类型\",{\"1\":{\"329\":1}}],[\"说明队列为空\",{\"1\":{\"249\":1}}],[\"说明队列已满\",{\"1\":{\"249\":1}}],[\"说明找到目标节点\",{\"1\":{\"89\":1}}],[\"说明目标节点在\",{\"1\":{\"89\":2}}],[\"说明目标元素不在哈希表中\",{\"1\":{\"63\":1}}],[\"说明哈希表中不存在该元素\",{\"1\":{\"65\":1}}],[\"试图缓解线性探测的聚集效应\",{\"1\":{\"64\":1}}],[\"步骤\",{\"1\":{\"451\":1}}],[\"步\",{\"1\":{\"64\":1}}],[\"步长通常为\",{\"1\":{\"63\":1}}],[\"9\",{\"1\":{\"64\":1,\"69\":4,\"131\":1,\"405\":4,\"406\":2,\"412\":3}}],[\"搜索符合某个模式的字符串\",{\"1\":{\"412\":1}}],[\"搜索\",{\"1\":{\"63\":4}}],[\"搜索时间也会增加\",{\"1\":{\"63\":1}}],[\"探测次数的平方\",{\"1\":{\"64\":1}}],[\"探测起始点\",{\"1\":{\"63\":1}}],[\"探测方式主要包括线性探测\",{\"1\":{\"62\":1}}],[\"考虑在线性探测中记录遇到的首个\",{\"1\":{\"63\":1}}],[\"才能找到目标元素\",{\"1\":{\"63\":1}}],[\"才执行扩容操作\",{\"1\":{\"60\":1}}],[\"机制相互通信\",{\"1\":{\"164\":1}}],[\"机制\",{\"1\":{\"63\":1,\"224\":1}}],[\"机器学习\",{\"1\":{\"15\":1}}],[\"最近创建的用户将排在最前面\",{\"1\":{\"389\":1}}],[\"最初用于\",{\"1\":{\"163\":1}}],[\"最终\",{\"1\":{\"111\":1}}],[\"最终导致增删查改操作效率劣化\",{\"1\":{\"63\":1}}],[\"最差情况下所有键值对都存储到同一个桶中\",{\"1\":{\"67\":1}}],[\"最后\",{\"1\":{\"73\":1,\"249\":1}}],[\"最后两位相同的\",{\"1\":{\"63\":1}}],[\"最后一个节点被称为\",{\"1\":{\"16\":1}}],[\"都是一个指针代表一个内存\",{\"1\":{\"200\":1}}],[\"都是每轮排除一半情况\",{\"1\":{\"89\":1}}],[\"都是开放寻址的常见策略之一\",{\"1\":{\"64\":1}}],[\"都会被操作系统回收\",{\"1\":{\"216\":1}}],[\"都会被映射到\",{\"1\":{\"69\":1}}],[\"都会被映射到相同的桶\",{\"1\":{\"63\":1}}],[\"都会为字符串哈希函数加入一个随机的盐\",{\"1\":{\"71\":1}}],[\"都可以放置键值对\",{\"1\":{\"63\":1}}],[\"都代表空桶\",{\"1\":{\"63\":1}}],[\"都在向右移动\",{\"1\":{\"42\":1}}],[\"来禁用这些文件的加载\",{\"1\":{\"505\":1}}],[\"来重命名一个现有的表\",{\"1\":{\"380\":1}}],[\"来查看\",{\"1\":{\"372\":1}}],[\"来进行数据操作\",{\"1\":{\"369\":1}}],[\"来提高性能\",{\"1\":{\"344\":1}}],[\"来防止跨站请求伪造攻击\",{\"1\":{\"340\":1}}],[\"来调试\",{\"1\":{\"314\":1}}],[\"来存储元素\",{\"1\":{\"249\":1}}],[\"来存储和操作数据\",{\"1\":{\"179\":1}}],[\"来定义队列元素的类型\",{\"1\":{\"249\":1}}],[\"来避免数据竞争\",{\"1\":{\"226\":1}}],[\"来对原始模型的数据进行转换或过滤\",{\"1\":{\"186\":1}}],[\"来自定义模型\",{\"1\":{\"179\":1}}],[\"来为原始对象提供新的行为\",{\"1\":{\"135\":1}}],[\"来比较两个字符串的内容\",{\"1\":{\"111\":1}}],[\"来确定失衡节点属于上图中的哪种情况\",{\"1\":{\"104\":1}}],[\"来标记这个桶\",{\"1\":{\"63\":1}}],[\"来处理哈希冲突\",{\"1\":{\"62\":1}}],[\"来实现\",{\"1\":{\"42\":1}}],[\"来实现列表\",{\"1\":{\"26\":1}}],[\"红黑树的平衡条件更宽松\",{\"1\":{\"109\":1}}],[\"红黑树也是一种常见的平衡二叉搜索树\",{\"1\":{\"109\":1}}],[\"红黑树\",{\"1\":{\"61\":1}}],[\"树会从底向顶执行旋转操作\",{\"1\":{\"110\":1}}],[\"树典型应用\",{\"0\":{\"109\":1}}],[\"树常用操作\",{\"0\":{\"105\":1}}],[\"树常见术语\",{\"0\":{\"96\":1}}],[\"树旋转\",{\"0\":{\"99\":1}}],[\"树的高度和根节点的深度都是\",{\"1\":{\"111\":1}}],[\"树的旋转操作包括右旋\",{\"1\":{\"110\":1}}],[\"树的节点查找操作与二叉搜索树一致\",{\"1\":{\"108\":1}}],[\"树的节点插入操作与二叉搜索树在主体上类似\",{\"1\":{\"106\":1}}],[\"树的四种旋转情况\",{\"1\":{\"104\":1}}],[\"树的特点在于\",{\"1\":{\"99\":1}}],[\"树的任意节点的平衡因子皆满足\",{\"1\":{\"98\":1}}],[\"树的相关操作需要获取节点高度\",{\"1\":{\"97\":1}}],[\"树节点类\",{\"1\":{\"97\":1}}],[\"树既是二叉搜索树\",{\"1\":{\"96\":1}}],[\"树能始终保持高效的数据操作性能\",{\"1\":{\"95\":1}}],[\"树不会退化\",{\"1\":{\"95\":1}}],[\"树在插入节点后发生退化\",{\"1\":{\"95\":1}}],[\"树在删除节点后发生退化\",{\"1\":{\"95\":1}}],[\"树将严重向左倾斜\",{\"1\":{\"95\":1}}],[\"树\",{\"0\":{\"95\":1},\"1\":{\"61\":1,\"95\":1,\"109\":1,\"110\":1}}],[\"树中插入节点后\",{\"1\":{\"106\":1}}],[\"树中\",{\"1\":{\"25\":1}}],[\"桶数组\",{\"1\":{\"61\":1,\"63\":1}}],[\"触发扩容的负载因子阈值\",{\"1\":{\"61\":1,\"63\":1}}],[\"代理和负载均衡\",{\"0\":{\"354\":1}}],[\"代理模型\",{\"0\":{\"186\":1}}],[\"代码\",{\"1\":{\"464\":1}}],[\"代码详解\",{\"0\":{\"286\":1}}],[\"代码结构和作用\",{\"0\":{\"249\":1}}],[\"代码解释\",{\"0\":{\"221\":1,\"302\":1}}],[\"代码示例\",{\"0\":{\"220\":1},\"1\":{\"236\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1}}],[\"代码的存在的link\",{\"1\":{\"202\":1}}],[\"代码编译时不使用name\",{\"1\":{\"202\":1}}],[\"代码link\",{\"1\":{\"202\":1}}],[\"代码更具模块化\",{\"1\":{\"171\":1}}],[\"代码维护\",{\"1\":{\"169\":1}}],[\"代码如下所示\",{\"1\":{\"13\":1,\"22\":1,\"42\":1,\"100\":1,\"104\":1,\"106\":1,\"107\":1}}],[\"代表应用程序的数据和业务逻辑\",{\"1\":{\"165\":1}}],[\"代表\",{\"1\":{\"77\":1}}],[\"代替链表\",{\"1\":{\"61\":1}}],[\"占用空间增大\",{\"1\":{\"61\":1}}],[\"占用内存较多\",{\"1\":{\"33\":1}}],[\"占用内存较少\",{\"1\":{\"33\":1}}],[\"改善了不良网络环境下的传输效率\",{\"1\":{\"352\":1}}],[\"改善了在高丢包率\",{\"1\":{\"335\":1}}],[\"改良哈希表数据结构\",{\"1\":{\"60\":1}}],[\"改变\",{\"1\":{\"59\":1}}],[\"严重影响哈希表的可用性\",{\"1\":{\"60\":1}}],[\"非常有用\",{\"1\":{\"153\":1}}],[\"非常耗时\",{\"1\":{\"59\":1}}],[\"非常高效\",{\"1\":{\"56\":1,\"92\":1}}],[\"越过叶节点后跳出\",{\"1\":{\"89\":1,\"90\":1,\"91\":1}}],[\"越过尾部则返回头部\",{\"1\":{\"63\":1}}],[\"越过数组尾部后回到头部\",{\"1\":{\"42\":1}}],[\"越大\",{\"1\":{\"59\":1}}],[\"容器等复杂数据结构的插件\",{\"1\":{\"495\":1}}],[\"容器新增\",{\"0\":{\"269\":1}}],[\"容量为\",{\"1\":{\"249\":1}}],[\"容量设置比较合理\",{\"1\":{\"73\":1}}],[\"容量扩展\",{\"1\":{\"23\":1}}],[\"容易想到\",{\"1\":{\"59\":1}}],[\"gitmodules\",{\"1\":{\"451\":1}}],[\"github\",{\"1\":{\"426\":1,\"427\":2,\"447\":1}}],[\"git\",{\"0\":{\"423\":1},\"1\":{\"423\":2,\"425\":5,\"426\":3,\"427\":7,\"429\":3,\"430\":4,\"431\":2,\"432\":4,\"433\":4,\"434\":3,\"435\":3,\"436\":4,\"438\":3,\"439\":6,\"440\":2,\"441\":2,\"443\":4,\"444\":2,\"445\":2,\"446\":4,\"447\":4,\"448\":3,\"449\":1,\"450\":3,\"451\":3,\"452\":3,\"454\":3,\"455\":2},\"2\":{\"457\":1}}],[\"ghcr\",{\"1\":{\"420\":1}}],[\"gateway\",{\"1\":{\"420\":1}}],[\"games\",{\"1\":{\"420\":2}}],[\"gzip\",{\"1\":{\"350\":2}}],[\"gnu\",{\"1\":{\"315\":1,\"478\":1,\"494\":1}}],[\"gcc\",{\"1\":{\"315\":1,\"503\":1}}],[\"gdbinit\",{\"1\":{\"494\":2,\"495\":1,\"496\":9,\"498\":1,\"501\":1,\"502\":1,\"503\":1,\"504\":2,\"505\":6}}],[\"gdb配置\",{\"1\":{\"491\":1}}],[\"gdb\",{\"0\":{\"320\":1,\"321\":1,\"478\":1,\"479\":1,\"480\":1,\"494\":1},\"1\":{\"314\":2,\"315\":1,\"316\":1,\"319\":5,\"320\":9,\"321\":1,\"478\":3,\"480\":5,\"481\":3,\"482\":10,\"483\":6,\"484\":13,\"485\":6,\"487\":4,\"488\":3,\"489\":5,\"490\":4,\"494\":3,\"495\":3,\"496\":9,\"498\":1,\"501\":1,\"502\":1,\"503\":3,\"504\":3,\"505\":4},\"2\":{\"324\":1,\"493\":1,\"508\":1}}],[\"graph\",{\"1\":{\"432\":2}}],[\"grandchild\",{\"1\":{\"100\":2,\"101\":2}}],[\"grand\",{\"1\":{\"100\":3,\"101\":3,\"111\":1}}],[\"group=ollama\",{\"1\":{\"420\":1}}],[\"group\",{\"1\":{\"390\":3,\"391\":1,\"397\":2}}],[\"grpc\",{\"1\":{\"364\":2}}],[\"green\",{\"1\":{\"275\":3}}],[\"g++\",{\"1\":{\"268\":3}}],[\"gurad相比于std\",{\"1\":{\"257\":1}}],[\"guard和std\",{\"1\":{\"257\":1,\"262\":1}}],[\"guard\",{\"1\":{\"236\":1,\"255\":1,\"257\":1}}],[\"guard<std\",{\"1\":{\"236\":1,\"238\":1,\"257\":1,\"258\":3}}],[\"guidelines解析\",{\"1\":{\"195\":1}}],[\"guifactory\",{\"1\":{\"153\":3}}],[\"gui\",{\"1\":{\"125\":1,\"160\":1,\"420\":1}}],[\"g\",{\"1\":{\"95\":1,\"262\":1,\"474\":1}}],[\"getvideourl\",{\"1\":{\"311\":1}}],[\"getscript\",{\"1\":{\"311\":1}}],[\"getwaves\",{\"1\":{\"308\":1}}],[\"getpid\",{\"1\":{\"301\":1}}],[\"geta\",{\"1\":{\"268\":3}}],[\"getcount\",{\"1\":{\"260\":1}}],[\"getfinalprice\",{\"1\":{\"131\":3}}],[\"get\",{\"1\":{\"58\":1,\"61\":1,\"63\":1,\"255\":2,\"258\":2,\"261\":4,\"262\":1,\"327\":2,\"331\":2,\"346\":1,\"361\":1,\"459\":1}}],[\"gossman\",{\"1\":{\"163\":1}}],[\"go\",{\"1\":{\"16\":1,\"66\":2,\"420\":1}}],[\"键值对的分布情况由哈希函数决定\",{\"1\":{\"67\":1}}],[\"键值对数量\",{\"1\":{\"61\":1,\"63\":1}}],[\"键值对\",{\"1\":{\"58\":1,\"61\":1}}],[\"封装成一个类\",{\"1\":{\"58\":1}}],[\"易得哈希函数为\",{\"1\":{\"58\":1}}],[\"随着\",{\"1\":{\"63\":1}}],[\"随后\",{\"1\":{\"58\":1}}],[\"随机访问\",{\"1\":{\"15\":1}}],[\"随机访问元素\",{\"1\":{\"8\":1}}],[\"取消显示变量\",{\"1\":{\"484\":1}}],[\"取余\",{\"1\":{\"73\":1}}],[\"取余操作\",{\"1\":{\"42\":1}}],[\"取模\",{\"1\":{\"58\":1,\"69\":1,\"73\":1}}],[\"哈希值仍然是不变的\",{\"1\":{\"71\":1}}],[\"哈希冲突的概率就越低\",{\"1\":{\"68\":1,\"72\":1}}],[\"哈希冲突的最佳情况与最差情况\",{\"1\":{\"67\":1}}],[\"哈希冲突会导致查询结果错误\",{\"1\":{\"60\":1}}],[\"哈希冲突\",{\"0\":{\"60\":1},\"1\":{\"70\":1}}],[\"哈希冲突示例\",{\"1\":{\"59\":1}}],[\"哈希冲突与扩容\",{\"0\":{\"59\":1}}],[\"哈希函数下\",{\"1\":{\"73\":1}}],[\"哈希函数将\",{\"1\":{\"72\":1}}],[\"哈希函数\",{\"1\":{\"58\":1,\"61\":1,\"63\":1,\"68\":1}}],[\"哈希函数工作原理\",{\"1\":{\"58\":1}}],[\"哈希函数的最后一步往往是对数组长度\",{\"1\":{\"73\":1}}],[\"哈希函数的输出结果也相同\",{\"1\":{\"59\":1}}],[\"哈希函数的作用是将所有\",{\"1\":{\"59\":1}}],[\"哈希函数的作用是将一个较大的输入空间映射到一个较小的输出空间\",{\"1\":{\"58\":1}}],[\"哈希函数的计算过程分为以下两步\",{\"1\":{\"58\":1}}],[\"哈希算法通常采用大质数作为模数\",{\"1\":{\"72\":1}}],[\"哈希算法还应该具备抗碰撞性和雪崩效应\",{\"1\":{\"72\":1}}],[\"哈希算法处在不断升级与优化的过程中\",{\"1\":{\"70\":1}}],[\"哈希算法的设计是一个需要考虑许多因素的复杂问题\",{\"1\":{\"69\":1}}],[\"哈希算法的设计\",{\"0\":{\"69\":1}}],[\"哈希算法的目标\",{\"0\":{\"68\":1}}],[\"哈希算法需要具备更高等级的安全特性\",{\"1\":{\"68\":1}}],[\"哈希算法除了可以用于实现哈希表\",{\"1\":{\"68\":1}}],[\"哈希算法应使得键值对均匀分布在哈希表中\",{\"1\":{\"68\":1}}],[\"哈希算法应始终产生相同的输出\",{\"1\":{\"68\":1}}],[\"哈希算法应具备以下特点\",{\"1\":{\"68\":1}}],[\"哈希算法\",{\"0\":{\"67\":1},\"1\":{\"58\":1,\"67\":1}}],[\"哈希表有相当一部分内存未使用\",{\"1\":{\"73\":1}}],[\"哈希表有三种常用的遍历方式\",{\"1\":{\"57\":1}}],[\"哈希表底层实现是数组\",{\"1\":{\"73\":1}}],[\"哈希表能够在\",{\"1\":{\"72\":1}}],[\"哈希表都存在\",{\"1\":{\"65\":1}}],[\"哈希表扩容操作的开销很大\",{\"1\":{\"72\":1}}],[\"哈希表扩容需将所有键值对从原哈希表迁移至新哈希表\",{\"1\":{\"59\":1}}],[\"哈希表扩容\",{\"1\":{\"59\":1}}],[\"哈希表容量越大\",{\"1\":{\"72\":1}}],[\"哈希表容量\",{\"1\":{\"59\":1,\"61\":1,\"63\":1}}],[\"哈希表简单实现\",{\"0\":{\"58\":1}}],[\"哈希表的时间效率变高\",{\"1\":{\"73\":1}}],[\"哈希表的时间复杂度可能发生劣化\",{\"1\":{\"73\":1}}],[\"哈希表的时间复杂度会退化至\",{\"1\":{\"73\":1}}],[\"哈希表的时间复杂度在什么情况下是\",{\"1\":{\"73\":1}}],[\"哈希表的目标是将一个较大的状态空间映射到一个较小的空间\",{\"1\":{\"73\":1}}],[\"哈希表的\",{\"1\":{\"71\":1}}],[\"哈希表的实用性越高\",{\"1\":{\"68\":1}}],[\"哈希表的性能则会急剧劣化\",{\"1\":{\"67\":1}}],[\"哈希表的键值对分布\",{\"1\":{\"63\":2}}],[\"哈希表的结构改良方法主要包括\",{\"1\":{\"60\":1}}],[\"哈希表的常见操作包括\",{\"1\":{\"57\":1}}],[\"哈希表的抽象表示\",{\"1\":{\"56\":1}}],[\"哈希表常用操作\",{\"0\":{\"57\":1}}],[\"哈希表和图等数据结构\",{\"1\":{\"25\":1}}],[\"哈希表\",{\"0\":{\"55\":1,\"56\":1},\"1\":{\"15\":1,\"25\":1,\"56\":2,\"61\":1,\"63\":1},\"2\":{\"75\":1}}],[\"keep\",{\"1\":{\"333\":1}}],[\"kernel\",{\"1\":{\"316\":2,\"317\":1,\"319\":2,\"320\":3},\"2\":{\"324\":1}}],[\"key=value\",{\"1\":{\"330\":1}}],[\"keyset\",{\"1\":{\"58\":4}}],[\"key\",{\"1\":{\"56\":2,\"57\":5,\"58\":25,\"59\":3,\"61\":18,\"63\":19,\"67\":1,\"68\":4,\"69\":7,\"71\":3,\"72\":3,\"73\":3,\"225\":3,\"226\":3,\"227\":3,\"285\":2,\"376\":1}}],[\"killed\",{\"1\":{\"301\":1}}],[\"k\",{\"1\":{\"255\":2,\"256\":4,\"257\":2}}],[\"kvm\",{\"1\":{\"318\":1}}],[\"kv\",{\"1\":{\"57\":3,\"58\":3}}],[\"向服务器发送数据\",{\"1\":{\"327\":1}}],[\"向队列中插入元素\",{\"1\":{\"249\":1}}],[\"向左旋转\",{\"1\":{\"101\":1}}],[\"向右旋转\",{\"1\":{\"100\":2}}],[\"向哈希表中输入键\",{\"1\":{\"57\":1}}],[\"向下递推阶段会不断执行入栈操作\",{\"1\":{\"50\":1}}],[\"小括号\",{\"1\":{\"404\":1}}],[\"小于等于\",{\"1\":{\"388\":1}}],[\"小于\",{\"1\":{\"388\":1}}],[\"小数\",{\"1\":{\"71\":1}}],[\"小数或字符串等数据类型\",{\"1\":{\"71\":1}}],[\"小鸭\",{\"1\":{\"57\":1}}],[\"小法\",{\"1\":{\"57\":1}}],[\"小算\",{\"1\":{\"57\":1}}],[\"小啰\",{\"1\":{\"57\":1}}],[\"小哈\",{\"1\":{\"57\":1}}],[\"观察模型\",{\"1\":{\"169\":1}}],[\"观察者\",{\"1\":{\"124\":1}}],[\"观察者模式非常适用于需要动态更新和通知机制的场景\",{\"1\":{\"125\":1}}],[\"观察者模式提供了一种将对象之间的依赖关系解耦的方式\",{\"1\":{\"125\":1}}],[\"观察者模式主要涉及以下几个角色\",{\"1\":{\"124\":1}}],[\"观察者模式通常用于事件驱动的系统\",{\"1\":{\"123\":1}}],[\"观察者模式\",{\"0\":{\"122\":1},\"1\":{\"123\":1,\"125\":1},\"2\":{\"127\":1}}],[\"观察下表\",{\"1\":{\"93\":1}}],[\"观察以上公式\",{\"1\":{\"67\":1}}],[\"观察发现\",{\"1\":{\"56\":1,\"69\":1}}],[\"观察上图\",{\"1\":{\"8\":1,\"16\":1}}],[\"查看所有线程的信息\",{\"1\":{\"489\":1}}],[\"查看线程\",{\"1\":{\"489\":1}}],[\"查看局部变量\",{\"1\":{\"487\":1}}],[\"查看从\",{\"1\":{\"484\":2}}],[\"查看内存\",{\"1\":{\"484\":1}}],[\"查看指针指向的数据\",{\"1\":{\"484\":1}}],[\"查看指定地址的内存内容\",{\"1\":{\"321\":1}}],[\"查看变量\",{\"1\":{\"484\":2}}],[\"查看变量的值等\",{\"1\":{\"320\":1}}],[\"查看整个调用堆栈\",{\"1\":{\"484\":1}}],[\"查看堆栈\",{\"1\":{\"484\":1}}],[\"查看已设置的断点\",{\"1\":{\"482\":1}}],[\"查看工作目录\",{\"1\":{\"433\":1}}],[\"查看分支图形\",{\"1\":{\"432\":1}}],[\"查看哪些文件有更改\",{\"1\":{\"431\":1}}],[\"查看远程仓库\",{\"1\":{\"427\":1}}],[\"查看当前帧的局部变量\",{\"1\":{\"487\":1}}],[\"查看当前帧的函数参数\",{\"1\":{\"487\":1}}],[\"查看当前帧的详细信息\",{\"1\":{\"484\":1}}],[\"查看当前函数的所有局部变量\",{\"1\":{\"484\":1}}],[\"查看当前的远程仓库\",{\"1\":{\"427\":1}}],[\"查看当前设置的断点\",{\"1\":{\"321\":1}}],[\"查看和删除表\",{\"1\":{\"398\":1}}],[\"查看和删除数据库\",{\"1\":{\"398\":1}}],[\"查询\",{\"1\":{\"398\":1}}],[\"查询位于纽约的部门中\",{\"1\":{\"397\":1}}],[\"查询用于从多个表中同时提取数据\",{\"1\":{\"392\":1}}],[\"查询特定列\",{\"1\":{\"387\":1}}],[\"查询所有列\",{\"1\":{\"387\":1}}],[\"查询参数\",{\"1\":{\"330\":1}}],[\"查询效率\",{\"1\":{\"61\":1}}],[\"查询效率降低\",{\"1\":{\"61\":1}}],[\"查询学号为\",{\"1\":{\"59\":1}}],[\"查询操作就是找到\",{\"1\":{\"58\":1}}],[\"查询操作\",{\"1\":{\"57\":2,\"58\":1,\"61\":1,\"63\":1}}],[\"查询元素\",{\"1\":{\"56\":1,\"61\":1}}],[\"查找并使用\",{\"1\":{\"471\":1}}],[\"查找并替换字符串中符合特定模式的部分\",{\"1\":{\"412\":1}}],[\"查找下订单\",{\"1\":{\"393\":1}}],[\"查找操作的时间复杂度也随之劣化\",{\"1\":{\"95\":1}}],[\"查找插入位置并插入节点\",{\"1\":{\"106\":1}}],[\"查找插入位置\",{\"1\":{\"90\":1}}],[\"查找的时候通过哈希函数找到对应的桶和键值对\",{\"1\":{\"73\":1}}],[\"查找其中值为\",{\"1\":{\"22\":1}}],[\"查找节点并删除\",{\"1\":{\"107\":1}}],[\"查找节点\",{\"0\":{\"22\":1,\"89\":1,\"108\":1},\"1\":{\"89\":1}}],[\"查找表\",{\"1\":{\"15\":1}}],[\"查找元素的时候会出现哈希冲突呢\",{\"1\":{\"73\":1}}],[\"查找元素\",{\"0\":{\"12\":1},\"1\":{\"56\":1,\"63\":1,\"65\":1,\"93\":1}}],[\"仅当线程\",{\"1\":{\"489\":1}}],[\"仅仅读取尾部的值\",{\"1\":{\"249\":1}}],[\"仅仅要它是最后的构造函数调用\",{\"1\":{\"208\":1}}],[\"仅处理与\",{\"1\":{\"169\":1}}],[\"仅使用左旋或右旋都无法使子树恢复平衡\",{\"1\":{\"102\":1}}],[\"仅提供基本数据类型的哈希值计算\",{\"1\":{\"71\":1}}],[\"仅在必要时\",{\"1\":{\"60\":1}}],[\"仅用一个数组来实现哈希表\",{\"1\":{\"58\":1}}],[\"仅需将元素添加至数组\",{\"1\":{\"56\":1}}],[\"仅转换有效长度范围内的列表元素\",{\"1\":{\"42\":1}}],[\"除了换行符\",{\"1\":{\"404\":1}}],[\"除了包含值\",{\"1\":{\"16\":1}}],[\"除叶节点外\",{\"1\":{\"77\":1}}],[\"除哈希表外\",{\"1\":{\"56\":1}}],[\"输出风格等\",{\"1\":{\"501\":1}}],[\"输出中会显示子模块的哈希\",{\"1\":{\"449\":1}}],[\"输出结果如下\",{\"1\":{\"159\":1}}],[\"输出的哈希值是不同的\",{\"1\":{\"71\":1}}],[\"输出长度\",{\"1\":{\"70\":1}}],[\"输出空间为数组容量大小\",{\"1\":{\"60\":1}}],[\"输出空间是所有桶\",{\"1\":{\"58\":1}}],[\"输出该节点在链表中的索引\",{\"1\":{\"22\":1}}],[\"输入的微小变化应当导致输出的显著且不可预测的变化\",{\"1\":{\"68\":1}}],[\"输入\",{\"1\":{\"61\":1,\"72\":1}}],[\"输入空间通常远大于输出空间\",{\"1\":{\"73\":1}}],[\"输入空间为全体整数\",{\"1\":{\"60\":1}}],[\"输入空间是所有\",{\"1\":{\"58\":1}}],[\"输入一个\",{\"1\":{\"58\":2}}],[\"输入一个学号\",{\"1\":{\"56\":1}}],[\"姓名为例\",{\"1\":{\"58\":1}}],[\"姓名\",{\"1\":{\"56\":1}}],[\"时使用\",{\"1\":{\"496\":1}}],[\"时生效\",{\"1\":{\"496\":1}}],[\"时都会被自动加载\",{\"1\":{\"496\":1}}],[\"时返回其状态\",{\"1\":{\"298\":1}}],[\"时跳出循环\",{\"1\":{\"90\":1}}],[\"时应该继续遍历\",{\"1\":{\"63\":1}}],[\"时\",{\"1\":{\"52\":2,\"59\":1,\"61\":1,\"66\":1,\"90\":1,\"91\":4,\"100\":1,\"101\":1,\"214\":1,\"238\":1,\"240\":2,\"320\":1,\"485\":1}}],[\"时间的风险\",{\"1\":{\"73\":1}}],[\"时间\",{\"1\":{\"56\":3,\"89\":1,\"90\":1,\"91\":3,\"92\":1}}],[\"时间效率\",{\"1\":{\"49\":1}}],[\"时间片轮转调度算法是一种常见的\",{\"1\":{\"25\":1}}],[\"时间片轮转调度算法\",{\"1\":{\"25\":1}}],[\"时间下访问数组中的任意元素\",{\"1\":{\"21\":1}}],[\"时间复杂度的常数项更大\",{\"1\":{\"73\":1}}],[\"时间复杂度是\",{\"1\":{\"73\":1}}],[\"时间复杂度退化至\",{\"1\":{\"67\":1,\"86\":1}}],[\"时间复杂度都为\",{\"1\":{\"48\":1}}],[\"时间复杂度均为\",{\"1\":{\"42\":1}}],[\"时间复杂度\",{\"1\":{\"39\":1,\"45\":1}}],[\"时间复杂度确实是\",{\"1\":{\"34\":1}}],[\"时间复杂度为\",{\"1\":{\"19\":1,\"21\":1,\"30\":1}}],[\"时间复杂度高\",{\"1\":{\"10\":1}}],[\"时间内查询到\",{\"1\":{\"72\":1}}],[\"时间内获取对应的值\",{\"1\":{\"56\":1}}],[\"时间内获取节点内存地址\",{\"1\":{\"34\":1}}],[\"时间内访问和更新元素\",{\"1\":{\"29\":1}}],[\"时间内访问任何元素\",{\"1\":{\"14\":1}}],[\"时间内随机访问数组中的任意一个元素\",{\"1\":{\"8\":1}}],[\"撤销\",{\"1\":{\"52\":2}}],[\"章节中我们提到\",{\"1\":{\"95\":1}}],[\"章节中讨论\",{\"1\":{\"9\":1}}],[\"章节有提到\",{\"1\":{\"52\":1}}],[\"综上\",{\"1\":{\"49\":1}}],[\"综上所述\",{\"1\":{\"49\":1}}],[\"进一步减少了网络延迟\",{\"1\":{\"352\":1}}],[\"进入子模块目录\",{\"1\":{\"450\":1,\"452\":1}}],[\"进入函数内部\",{\"1\":{\"321\":1,\"483\":1}}],[\"进入established状态\",{\"1\":{\"292\":1}}],[\"进入syn\",{\"1\":{\"292\":1}}],[\"进入这个状态\",{\"1\":{\"290\":3}}],[\"进程通信\",{\"2\":{\"232\":1}}],[\"进程是独立的实体\",{\"1\":{\"223\":1}}],[\"进程间通信是操作系统中用于协调和共享数据的重要机制\",{\"1\":{\"230\":1}}],[\"进程间通信\",{\"0\":{\"223\":1},\"1\":{\"223\":1}}],[\"进程间通信及文件i\",{\"1\":{\"1\":1}}],[\"进程接管孤儿进程或采用\",{\"1\":{\"218\":1}}],[\"进程接管\",{\"1\":{\"218\":1}}],[\"进程会自动调用\",{\"1\":{\"218\":1}}],[\"进程\",{\"1\":{\"218\":3}}],[\"进程表项的数量是有限的\",{\"1\":{\"217\":1}}],[\"进程进入终止状态\",{\"1\":{\"214\":1}}],[\"进程进入阻塞状态\",{\"1\":{\"214\":1}}],[\"进程进入运行状态\",{\"1\":{\"214\":1}}],[\"进程在其生命周期内可以在不同状态之间进行转换\",{\"1\":{\"214\":1}}],[\"进程已完成执行或因某种原因被强制终止\",{\"1\":{\"213\":1}}],[\"进程已经被创建并准备好执行\",{\"1\":{\"213\":1}}],[\"进程无法继续执行\",{\"1\":{\"213\":1}}],[\"进程正在\",{\"1\":{\"213\":1}}],[\"进程正在被创建\",{\"1\":{\"213\":1}}],[\"进程的基本状态\",{\"0\":{\"213\":1}}],[\"进程状态之间的转换\",{\"0\":{\"214\":1}}],[\"进程状态\",{\"0\":{\"212\":1}}],[\"进程编程\",{\"0\":{\"211\":1}}],[\"进阶篇\",{\"1\":{\"195\":1}}],[\"进阶推荐\",{\"0\":{\"195\":1}}],[\"进而决定了键值对在哈希表中的分布情况\",{\"1\":{\"67\":1}}],[\"进行异步处理\",{\"1\":{\"365\":1}}],[\"进行通信\",{\"1\":{\"364\":1}}],[\"进行传输\",{\"1\":{\"335\":1}}],[\"进行静态编译\",{\"1\":{\"317\":1}}],[\"进行排序\",{\"1\":{\"186\":1}}],[\"进行沟通\",{\"1\":{\"171\":1}}],[\"进行解耦\",{\"1\":{\"169\":1,\"174\":1}}],[\"进行业务逻辑的实现\",{\"1\":{\"119\":1}}],[\"进行探测\",{\"1\":{\"65\":1}}],[\"进行扩容的\",{\"1\":{\"49\":1}}],[\"该函数会在每次程序停止时自动执行\",{\"1\":{\"502\":1}}],[\"该表是一个一维数组\",{\"1\":{\"205\":1}}],[\"该模式将这些对象连成一条链\",{\"1\":{\"157\":1}}],[\"该子节点\",{\"1\":{\"91\":1}}],[\"该节点被称为这两个子节点的父节点\",{\"1\":{\"77\":1}}],[\"该位置可以被新元素使用\",{\"1\":{\"73\":1}}],[\"该页面会从栈顶弹出\",{\"1\":{\"52\":1}}],[\"该页面会被添加到栈顶\",{\"1\":{\"52\":1}}],[\"该容量可能超出实际需求\",{\"1\":{\"49\":1}}],[\"该示意图只是定性表示\",{\"1\":{\"34\":1}}],[\"具有很好的应用价值\",{\"1\":{\"95\":1}}],[\"具有很好的缓存本地性\",{\"1\":{\"49\":1}}],[\"具有稳定且高效的性能\",{\"1\":{\"93\":1}}],[\"具体绘制延后到子类实现\",{\"1\":{\"308\":1}}],[\"具体关于条件变量后面会讲到\",{\"1\":{\"257\":1}}],[\"具体地说\",{\"1\":{\"208\":1}}],[\"具体处理者\",{\"1\":{\"158\":1}}],[\"具体工厂\",{\"1\":{\"149\":1,\"152\":1}}],[\"具体产品\",{\"1\":{\"149\":1,\"152\":1}}],[\"具体的绘制由子类实现\",{\"1\":{\"308\":1}}],[\"具体的创建逻辑被封装在工厂类中\",{\"1\":{\"148\":1}}],[\"具体的方法名需要根据所使用的编程语言来确定\",{\"1\":{\"45\":1}}],[\"具体实现步骤如下\",{\"1\":{\"236\":1}}],[\"具体实现类\",{\"1\":{\"142\":1}}],[\"具体实现要添加的功能\",{\"1\":{\"136\":1}}],[\"具体装饰器\",{\"1\":{\"136\":1}}],[\"具体组件\",{\"1\":{\"136\":1}}],[\"具体策略\",{\"1\":{\"131\":1}}],[\"具体策略类\",{\"1\":{\"130\":1}}],[\"具体观察者\",{\"1\":{\"124\":1}}],[\"具体主题\",{\"1\":{\"124\":1}}],[\"具体来说\",{\"1\":{\"63\":1,\"216\":1}}],[\"具体而言\",{\"1\":{\"56\":1}}],[\"具体是如何实现的\",{\"1\":{\"52\":1}}],[\"返回所有至少有一个订单的用户\",{\"1\":{\"394\":1}}],[\"返回两个表中所有的行\",{\"1\":{\"392\":1}}],[\"返回右表中的所有行\",{\"1\":{\"392\":1}}],[\"返回左表中的所有行\",{\"1\":{\"392\":1}}],[\"返回员工工资的平均值\",{\"1\":{\"391\":1}}],[\"返回单一值\",{\"1\":{\"391\":1}}],[\"返回导致停止的信号编号\",{\"1\":{\"300\":1}}],[\"返回导致终止的信号编号\",{\"1\":{\"300\":1}}],[\"返回子进程的退出状态码\",{\"1\":{\"300\":1}}],[\"返回子树的根节点\",{\"1\":{\"106\":1,\"107\":1}}],[\"返回等待的子进程的\",{\"1\":{\"299\":1}}],[\"返回到初始状态\",{\"1\":{\"290\":1}}],[\"返回的结果会保存在future中\",{\"1\":{\"262\":1}}],[\"返回指定索引处的数据\",{\"1\":{\"185\":1}}],[\"返回模型的表头数据\",{\"1\":{\"185\":1}}],[\"返回模型的列数\",{\"1\":{\"185\":1}}],[\"返回模型的行数\",{\"1\":{\"185\":1}}],[\"返回旋转之后的子树的根节点\",{\"1\":{\"111\":1}}],[\"返回旋转后子树的根节点\",{\"1\":{\"100\":1,\"101\":1}}],[\"返回目标节点\",{\"1\":{\"89\":1}}],[\"返回桶索引\",{\"1\":{\"63\":1}}],[\"返回移动后的桶索引\",{\"1\":{\"63\":1}}],[\"返回对应的桶索引\",{\"1\":{\"63\":1}}],[\"返回对应的姓名\",{\"1\":{\"56\":1}}],[\"返回\",{\"1\":{\"48\":1,\"63\":2,\"299\":1}}],[\"返回扩展后的新数组\",{\"1\":{\"13\":1}}],[\"头部压缩等特性显著减少了请求延迟\",{\"1\":{\"352\":1}}],[\"头部压缩\",{\"1\":{\"334\":1}}],[\"头\",{\"0\":{\"329\":1},\"1\":{\"358\":1}}],[\"头插法\",{\"1\":{\"47\":1}}],[\"头节点\",{\"1\":{\"16\":1,\"41\":2}}],[\"使其仅在条件满足时触发\",{\"1\":{\"485\":1}}],[\"使其继续执行\",{\"1\":{\"240\":1}}],[\"使其尝试重新锁定互斥量\",{\"1\":{\"236\":1}}],[\"使其对外表现的逻辑符合栈的特性\",{\"1\":{\"46\":1}}],[\"使子进程在后台运行\",{\"1\":{\"220\":1}}],[\"使它们可以独立地变化\",{\"1\":{\"141\":1}}],[\"使树重新恢复平衡\",{\"1\":{\"110\":1}}],[\"使所有失衡节点恢复平衡\",{\"1\":{\"106\":1,\"107\":1}}],[\"使该子树重新恢复平衡\",{\"1\":{\"104\":1,\"106\":1,\"107\":1}}],[\"使失衡节点重新恢复平衡\",{\"1\":{\"99\":1,\"104\":1}}],[\"使得线程休眠等功能\",{\"1\":{\"255\":1}}],[\"使得数据的排序\",{\"1\":{\"186\":1}}],[\"使得前端开发中的数据管理和\",{\"1\":{\"174\":1}}],[\"使得\",{\"1\":{\"167\":1,\"186\":1}}],[\"使得系统更具扩展性和灵活性\",{\"1\":{\"141\":1}}],[\"使得系统更容易维护和扩展\",{\"1\":{\"137\":1}}],[\"使得它们可以互相替换\",{\"1\":{\"129\":1}}],[\"使得它们的哈希值相同\",{\"1\":{\"68\":1}}],[\"使得对象可以独立变化而不影响彼此\",{\"1\":{\"125\":1}}],[\"使得哈希表可以在出现哈希冲突时正常工作\",{\"1\":{\"60\":1}}],[\"使用以下命令克隆并更新子模块到最新提交\",{\"1\":{\"448\":1}}],[\"使用懒加载技术\",{\"1\":{\"351\":1}}],[\"使用公钥和私钥对传输的数据进行加密\",{\"1\":{\"337\":1}}],[\"使用默认配置\",{\"1\":{\"316\":1}}],[\"使用模板类在编译时对字符串进行加密\",{\"1\":{\"284\":1}}],[\"使用模板参数\",{\"1\":{\"249\":1}}],[\"使用时如何选择\",{\"1\":{\"264\":1}}],[\"使用原子变量的计数器\",{\"1\":{\"258\":1}}],[\"使用原子变量实现无锁队列\",{\"0\":{\"248\":1}}],[\"使用方式都类似\",{\"1\":{\"257\":1}}],[\"使用取模操作来实现循环队列\",{\"1\":{\"249\":1}}],[\"使用场景\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1}}],[\"使用代理模型可以在不修改原始模型的情况下\",{\"1\":{\"186\":1}}],[\"使用macos工厂创建产品\",{\"1\":{\"153\":1}}],[\"使用windows工厂创建产品\",{\"1\":{\"153\":1}}],[\"使用链式地址\",{\"1\":{\"72\":1}}],[\"使用链表实现栈时\",{\"1\":{\"47\":1}}],[\"使用大质数作为模数\",{\"1\":{\"69\":1}}],[\"使用伪随机数进行探测\",{\"1\":{\"66\":1}}],[\"使用列表\",{\"1\":{\"61\":1}}],[\"使用迭代器遍历\",{\"1\":{\"57\":1}}],[\"使用\",{\"0\":{\"173\":1,\"319\":1,\"320\":1},\"1\":{\"56\":3,\"89\":1,\"179\":1,\"180\":1,\"186\":1,\"218\":2,\"221\":1,\"248\":1,\"249\":3,\"286\":1,\"300\":1,\"314\":1,\"319\":1,\"320\":1,\"334\":1,\"335\":1,\"346\":1,\"351\":1,\"371\":1,\"374\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"383\":1,\"384\":1,\"385\":1,\"388\":1,\"389\":1,\"390\":1,\"394\":1,\"395\":2,\"397\":5,\"430\":2,\"459\":1,\"470\":3,\"484\":2,\"489\":1}}],[\"使用两个栈\",{\"1\":{\"52\":1}}],[\"使用双向队列可以方便地实现一些额外操作\",{\"1\":{\"52\":1}}],[\"使用数组实现栈时\",{\"1\":{\"48\":1}}],[\"判断栈是否为空\",{\"1\":{\"47\":1,\"48\":1}}],[\"判断是否为空\",{\"1\":{\"45\":1}}],[\"判断队列是否为空\",{\"1\":{\"39\":1,\"41\":1,\"42\":1}}],[\"出发\",{\"1\":{\"89\":1}}],[\"出现冲突\",{\"1\":{\"65\":1}}],[\"出栈\",{\"1\":{\"44\":1,\"47\":1,\"48\":1}}],[\"出队操作\",{\"1\":{\"42\":1}}],[\"出队\",{\"1\":{\"38\":1,\"41\":1,\"42\":1}}],[\"入口处设置断点\",{\"1\":{\"482\":1}}],[\"入门推荐\",{\"0\":{\"194\":1}}],[\"入栈操作需要初始化节点对象并修改指针\",{\"1\":{\"49\":1}}],[\"入栈和出栈操作都在预先分配好的连续内存中进行\",{\"1\":{\"49\":1}}],[\"入栈与出栈操作分别对应在数组尾部添加元素与删除元素\",{\"1\":{\"48\":1}}],[\"入栈\",{\"1\":{\"44\":1,\"47\":1,\"48\":1}}],[\"入队和出队操作都只需进行一次操作\",{\"1\":{\"42\":1}}],[\"入队操作\",{\"1\":{\"42\":1}}],[\"入队\",{\"1\":{\"38\":1,\"41\":1,\"42\":1}}],[\"底部称为\",{\"1\":{\"44\":1}}],[\"字段\",{\"1\":{\"173\":1}}],[\"字典\",{\"1\":{\"66\":1}}],[\"字符集\",{\"1\":{\"404\":1,\"412\":1}}],[\"字符串搜索\",{\"1\":{\"412\":1}}],[\"字符串对比是否一定要用\",{\"1\":{\"111\":1}}],[\"字符串\",{\"1\":{\"71\":1}}],[\"字符\",{\"1\":{\"44\":1}}],[\"字节或\",{\"1\":{\"34\":1}}],[\"字节\",{\"1\":{\"34\":3}}],[\"餐厅的出餐队列等\",{\"1\":{\"43\":1}}],[\"功能的场景\",{\"1\":{\"43\":1}}],[\"先调用子类的析构函数\",{\"1\":{\"207\":1}}],[\"先左旋再右旋\",{\"1\":{\"110\":1}}],[\"先左旋后右旋\",{\"0\":{\"102\":1},\"1\":{\"99\":1,\"102\":1,\"104\":3}}],[\"先右旋再左旋\",{\"1\":{\"110\":1}}],[\"先右旋后左旋\",{\"0\":{\"103\":1},\"1\":{\"99\":1,\"103\":1,\"104\":3}}],[\"先走到尽头\",{\"1\":{\"110\":1}}],[\"先在二叉树中查找到目标节点\",{\"1\":{\"91\":1}}],[\"先抛出结论\",{\"1\":{\"69\":1}}],[\"先计算哈希值\",{\"1\":{\"67\":1}}],[\"先来后到\",{\"1\":{\"43\":1}}],[\"先根据扩容倍数创建一个更大的数组\",{\"1\":{\"32\":1}}],[\"任意节点的左\",{\"1\":{\"87\":1}}],[\"任意节点都可以视作头节点\",{\"1\":{\"24\":1}}],[\"任何需要实现\",{\"1\":{\"43\":1}}],[\"高级功能\",{\"0\":{\"486\":1}}],[\"高级\",{\"0\":{\"353\":1}}],[\"高级数据结构\",{\"1\":{\"25\":1}}],[\"高层模块不应依赖于低层模块\",{\"1\":{\"118\":1}}],[\"高度和深度等\",{\"1\":{\"110\":1}}],[\"高度和深度都需要加\",{\"1\":{\"78\":1}}],[\"高度为\",{\"1\":{\"86\":2}}],[\"高度等达到极大值或极小值\",{\"1\":{\"86\":1}}],[\"高度\",{\"1\":{\"78\":1}}],[\"高效率和均匀分布的特点\",{\"1\":{\"72\":1}}],[\"高\",{\"1\":{\"70\":2}}],[\"高并发成为工程师们需要重点攻克的问题\",{\"1\":{\"43\":1}}],[\"短时间内会产生海量订单\",{\"1\":{\"43\":1}}],[\"购物者下单后\",{\"1\":{\"43\":1}}],[\"淘宝订单\",{\"1\":{\"43\":1}}],[\"有助于处理文本\",{\"1\":{\"412\":1}}],[\"有助于数据分布得更加均匀\",{\"1\":{\"64\":1}}],[\"有多个状态\",{\"1\":{\"290\":1}}],[\"有std\",{\"1\":{\"262\":1}}],[\"有时候我们如果想真正执行异步操作可以对async进行封装\",{\"1\":{\"262\":1}}],[\"有名管道\",{\"1\":{\"224\":1}}],[\"有了这个函数\",{\"1\":{\"104\":1}}],[\"有左子节点\",{\"1\":{\"101\":1}}],[\"有\",{\"1\":{\"100\":1,\"101\":1}}],[\"有右子节点\",{\"1\":{\"100\":1}}],[\"有兴趣的读者请自行学习\",{\"1\":{\"71\":1}}],[\"有兴趣的读者可以尝试自行实现\",{\"1\":{\"42\":1}}],[\"有初始值\",{\"1\":{\"28\":2}}],[\"jwt\",{\"1\":{\"339\":1}}],[\"j$\",{\"1\":{\"316\":1}}],[\"joinable\",{\"1\":{\"255\":3}}],[\"join\",{\"1\":{\"234\":5,\"236\":1,\"237\":4,\"238\":2,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"248\":2,\"249\":3,\"255\":5,\"256\":2,\"257\":1,\"259\":1,\"261\":1,\"392\":11,\"397\":1}}],[\"john\",{\"1\":{\"163\":1,\"179\":1,\"383\":2}}],[\"json\",{\"1\":{\"327\":1,\"329\":1,\"339\":1}}],[\"jsdelivr\",{\"1\":{\"173\":1}}],[\"js\",{\"0\":{\"173\":1},\"1\":{\"163\":1,\"173\":2}}],[\"jdk\",{\"1\":{\"66\":1}}],[\"j++\",{\"1\":{\"42\":1}}],[\"j\",{\"1\":{\"42\":2}}],[\"javascript\",{\"1\":{\"165\":1,\"351\":1}}],[\"java\",{\"1\":{\"16\":1,\"26\":1,\"32\":1,\"52\":1,\"59\":1,\"66\":1,\"72\":1,\"111\":2}}],[\"~a\",{\"1\":{\"268\":1}}],[\"~arrayhashmap\",{\"1\":{\"58\":1}}],[\"~arrayqueue\",{\"1\":{\"42\":1}}],[\"~threadguard\",{\"1\":{\"255\":1}}],[\"~textbox\",{\"1\":{\"153\":1}}],[\"~lockfreequeue\",{\"1\":{\"248\":1,\"249\":1}}],[\"~linkedliststack\",{\"1\":{\"47\":1}}],[\"~linkedlistqueue\",{\"1\":{\"41\":1}}],[\"~guifactory\",{\"1\":{\"153\":1}}],[\"~button\",{\"1\":{\"153\":1}}],[\"~vehiclefactory\",{\"1\":{\"150\":1}}],[\"~vehicle\",{\"1\":{\"150\":1}}],[\"~shape\",{\"1\":{\"143\":1}}],[\"~color\",{\"1\":{\"143\":1}}],[\"~discountstrategy\",{\"1\":{\"131\":1}}],[\"~hashmapopenaddressing\",{\"1\":{\"63\":1}}],[\"~hashmapchaining\",{\"1\":{\"61\":1}}],[\"或使用\",{\"1\":{\"429\":1}}],[\"或结合聚合\",{\"1\":{\"397\":1}}],[\"或降序\",{\"1\":{\"389\":1}}],[\"或类\",{\"1\":{\"216\":1}}],[\"或者引入特殊的元字符\",{\"1\":{\"404\":1}}],[\"或者将表达式的多个部分视为一个整体\",{\"1\":{\"404\":1}}],[\"或者下列标志的组合\",{\"1\":{\"298\":1}}],[\"或者系统cpu个数\",{\"1\":{\"255\":1}}],[\"或者\",{\"1\":{\"234\":1,\"432\":1}}],[\"或者由于其他更高优先级的进程需要\",{\"1\":{\"214\":1}}],[\"或者说对合数取模的弊端是什么\",{\"1\":{\"69\":1}}],[\"或\",{\"1\":{\"42\":1,\"45\":1,\"49\":1,\"61\":1,\"179\":1,\"185\":1,\"216\":2,\"218\":4,\"238\":1,\"240\":2,\"320\":1,\"330\":2,\"340\":1,\"343\":1,\"377\":2,\"388\":1,\"393\":1,\"404\":2,\"406\":1,\"407\":1,\"468\":1,\"496\":1,\"505\":1}}],[\"减少手动配置的重复性工作\",{\"1\":{\"505\":1}}],[\"减少页面加载时的请求数量\",{\"1\":{\"351\":1}}],[\"减少传输的数据量\",{\"1\":{\"350\":1}}],[\"减少访问延迟\",{\"1\":{\"344\":1}}],[\"减少了连接建立时间\",{\"1\":{\"335\":1}}],[\"减少了带宽消耗\",{\"1\":{\"334\":1}}],[\"减少了手动操作\",{\"1\":{\"171\":1}}],[\"减少内存拷贝\",{\"1\":{\"268\":1}}],[\"减少读计数器\",{\"1\":{\"237\":1}}],[\"减少信号量\",{\"1\":{\"227\":1}}],[\"减少客户端与具体类的耦合\",{\"1\":{\"153\":1}}],[\"减少类的数量\",{\"1\":{\"137\":1}}],[\"减少类的复杂性\",{\"1\":{\"118\":1}}],[\"减少耦合\",{\"1\":{\"119\":1}}],[\"减少代码的复杂性\",{\"1\":{\"118\":1}}],[\"减少模块之间的耦合性\",{\"1\":{\"118\":1}}],[\"减少引入新\",{\"1\":{\"118\":1}}],[\"减少哈希冲突\",{\"1\":{\"72\":1}}],[\"减少\",{\"1\":{\"42\":1,\"351\":1,\"365\":1}}],[\"增强了系统的灵活性和可扩展性\",{\"1\":{\"160\":1}}],[\"增加信号量\",{\"1\":{\"227\":1}}],[\"增加\",{\"1\":{\"42\":2}}],[\"增删的优势可以在其他应用上得到体现\",{\"1\":{\"34\":1}}],[\"索引处\",{\"1\":{\"42\":1}}],[\"索引本质上是内存地址的偏移量\",{\"1\":{\"8\":1}}],[\"各自拥有独立的内存空间\",{\"1\":{\"223\":1}}],[\"各项时间复杂度会劣化至\",{\"1\":{\"110\":1}}],[\"各项操作都变为线性操作\",{\"1\":{\"86\":1}}],[\"各种编程语言采取了不同的哈希表实现策略\",{\"1\":{\"66\":1}}],[\"各种操作的实现方法如下图所示\",{\"1\":{\"42\":1}}],[\"各类待办事项\",{\"1\":{\"43\":1}}],[\"各个节点可以存储不同类型的数据\",{\"1\":{\"34\":1}}],[\"各个节点通过\",{\"1\":{\"16\":1}}],[\"各个参数的设定也非常考究\",{\"1\":{\"32\":1}}],[\"定制化输出\",{\"1\":{\"495\":1}}],[\"定制调试工具和简化常用操作\",{\"1\":{\"495\":1}}],[\"定位对应的桶呢\",{\"1\":{\"58\":1}}],[\"定义自定义函数\",{\"0\":{\"502\":1}}],[\"定义别名\",{\"0\":{\"499\":1},\"1\":{\"494\":1,\"504\":2}}],[\"定义一个可执行文件\",{\"1\":{\"461\":1}}],[\"定义一个接口\",{\"1\":{\"124\":1}}],[\"定义项目的名称和版本信息\",{\"1\":{\"461\":1}}],[\"定义项目名称和语言\",{\"1\":{\"461\":1}}],[\"定义常量\",{\"1\":{\"203\":1}}],[\"定义创建产品族中各产品的接口\",{\"1\":{\"152\":1}}],[\"定义创建产品的方法\",{\"1\":{\"149\":1}}],[\"定义产品家族中的各个产品的接口\",{\"1\":{\"152\":1}}],[\"定义实现类的接口\",{\"1\":{\"142\":1}}],[\"定义了处理请求的抽象方法\",{\"1\":{\"158\":1}}],[\"定义了工厂所要创建的对象的接口或抽象类\",{\"1\":{\"149\":1}}],[\"定义了抽象的接口\",{\"1\":{\"142\":1}}],[\"定义了一种一对多的依赖关系\",{\"1\":{\"123\":1}}],[\"定义对象的接口\",{\"1\":{\"136\":1}}],[\"定义算法的通用接口\",{\"1\":{\"130\":1}}],[\"定义为节点左子树的高度减去右子树的高度\",{\"1\":{\"98\":1}}],[\"定义为\",{\"1\":{\"78\":1}}],[\"定义\",{\"1\":{\"42\":1,\"118\":5}}],[\"定量表示需要根据具体情况进行分析\",{\"1\":{\"34\":1}}],[\"描述本次提交的内容\",{\"1\":{\"430\":1}}],[\"描述\",{\"1\":{\"39\":1,\"45\":1}}],[\"尾部称为\",{\"1\":{\"38\":1}}],[\"尾节点视为栈底\",{\"1\":{\"47\":1}}],[\"尾节点都指向该节点\",{\"1\":{\"41\":1}}],[\"尾节点指向空\",{\"1\":{\"24\":1}}],[\"尾节点指向的是\",{\"1\":{\"16\":1}}],[\"尾节点\",{\"1\":{\"16\":1,\"34\":1,\"41\":2}}],[\"队尾\",{\"1\":{\"38\":1,\"41\":1}}],[\"队首指针向后移动一位\",{\"1\":{\"42\":1}}],[\"队首指针\",{\"1\":{\"42\":1}}],[\"队首仅可删除节点\",{\"1\":{\"41\":1}}],[\"队首元素出队\",{\"1\":{\"39\":1}}],[\"队首\",{\"1\":{\"38\":1,\"41\":1}}],[\"队列使用一个动态分配的数组\",{\"1\":{\"249\":1}}],[\"队列中的节点数量是\",{\"1\":{\"111\":1}}],[\"队列是一种遵循先入先出原则的数据结构\",{\"1\":{\"51\":1}}],[\"队列在这些场景中可以有效地维护处理顺序\",{\"1\":{\"43\":1}}],[\"队列典型应用\",{\"0\":{\"43\":1}}],[\"队列已满\",{\"1\":{\"42\":1,\"248\":1,\"249\":1}}],[\"队列容量\",{\"1\":{\"42\":1}}],[\"队列长度\",{\"1\":{\"42\":1}}],[\"队列为空\",{\"1\":{\"41\":1,\"42\":1,\"248\":1,\"249\":1}}],[\"队列实现\",{\"0\":{\"40\":1}}],[\"队列的逻辑\",{\"1\":{\"52\":1}}],[\"队列的结论与前述栈的结论相似\",{\"1\":{\"51\":1}}],[\"队列的常见操作如下表所示\",{\"1\":{\"39\":1}}],[\"队列的先入先出规则\",{\"1\":{\"38\":1}}],[\"队列常用操作\",{\"0\":{\"39\":1}}],[\"队列模拟了排队现象\",{\"1\":{\"38\":1}}],[\"队列和栈\",{\"0\":{\"37\":1}}],[\"队列\",{\"0\":{\"38\":1},\"1\":{\"15\":1,\"25\":1,\"38\":1},\"2\":{\"54\":1}}],[\"顾名思义\",{\"1\":{\"38\":1,\"65\":1}}],[\"会话\",{\"1\":{\"496\":1}}],[\"会进入一个交互式命令行界面\",{\"1\":{\"480\":1}}],[\"会下载远程仓库的所有更改\",{\"1\":{\"445\":1}}],[\"会创建一个\",{\"1\":{\"425\":1}}],[\"会匹配整个字符串\",{\"1\":{\"411\":1}}],[\"会暂停并命中断点\",{\"1\":{\"320\":1}}],[\"会根据实际情况决定采用哪种策略\",{\"1\":{\"262\":1}}],[\"会根据这些信号自动更新显示内容\",{\"1\":{\"183\":1}}],[\"会先调用父类的构造函数\",{\"1\":{\"205\":1}}],[\"会自动为每个含有虚函数的类生成一份虚表\",{\"1\":{\"205\":1}}],[\"会自动更新显示\",{\"1\":{\"180\":1}}],[\"会自动更新\",{\"1\":{\"168\":1,\"173\":1}}],[\"会同步更新到页面上\",{\"1\":{\"173\":1}}],[\"会通知所有观察者\",{\"1\":{\"124\":1}}],[\"会通知所有已注册的观察者\",{\"1\":{\"124\":1}}],[\"会执行一次特殊的等量扩容操作\",{\"1\":{\"66\":1}}],[\"会触发扩容机制\",{\"1\":{\"49\":1}}],[\"会导致\",{\"1\":{\"34\":1}}],[\"会发现它们每个元素的\",{\"1\":{\"34\":1}}],[\"操作和使用场景的详细介绍\",{\"1\":{\"446\":1}}],[\"操作符时\",{\"1\":{\"395\":1}}],[\"操作对字符进行加密和解密\",{\"1\":{\"286\":1}}],[\"操作减少内存拷贝和移动\",{\"0\":{\"269\":1}}],[\"操作或等待某个事件发生\",{\"1\":{\"214\":1}}],[\"操作系统我只推荐这一本书\",{\"1\":{\"195\":1}}],[\"操作\",{\"0\":{\"424\":1},\"1\":{\"34\":1,\"99\":1,\"100\":1,\"101\":1,\"240\":6,\"404\":1}}],[\"×1\",{\"1\":{\"34\":1}}],[\"一次性插入多行\",{\"1\":{\"383\":1}}],[\"一次是geta\",{\"1\":{\"268\":1}}],[\"一种单向的服务器推送技术\",{\"1\":{\"356\":1}}],[\"一种基于\",{\"1\":{\"355\":1}}],[\"一系列进程\",{\"1\":{\"244\":1}}],[\"一言以蔽之就是\",{\"1\":{\"205\":1}}],[\"一网打尽\",{\"1\":{\"193\":1}}],[\"一个简单的\",{\"1\":{\"461\":1}}],[\"一个包含调试符号的未压缩内核映像\",{\"1\":{\"316\":1}}],[\"一个非空的unique\",{\"1\":{\"266\":1}}],[\"一个进程\",{\"1\":{\"244\":1}}],[\"一个是调用join\",{\"1\":{\"255\":1}}],[\"一个是调用\",{\"1\":{\"234\":1}}],[\"一个模块只实现其功能的最小集\",{\"1\":{\"119\":1}}],[\"一个类应只有一个引起其变化的原因\",{\"1\":{\"118\":1}}],[\"一个用于记录当前正在读取的线程数\",{\"1\":{\"237\":1}}],[\"一个用于后一个元素\",{\"1\":{\"34\":1}}],[\"一个用于前一个元素\",{\"1\":{\"34\":1}}],[\"一套操作\",{\"1\":{\"111\":1}}],[\"一圈一圈向外扩展\",{\"1\":{\"110\":1}}],[\"一分为二\",{\"1\":{\"77\":1,\"110\":1}}],[\"一部分研究人员努力提升哈希算法的性能\",{\"1\":{\"70\":1}}],[\"一般情况下\",{\"1\":{\"34\":1}}],[\"一方面\",{\"1\":{\"34\":2}}],[\"一同进步\",{\"1\":{\"3\":1}}],[\"长度\",{\"1\":{\"34\":1}}],[\"长度不可变的性质会导致列表的实用性降低\",{\"1\":{\"26\":1}}],[\"长度不可变\",{\"1\":{\"14\":1,\"23\":1}}],[\"浅蓝色的存储节点指针是占用一块内存地址吗\",{\"1\":{\"34\":1}}],[\"再到连接关闭的整个过程\",{\"1\":{\"294\":1}}],[\"再次\",{\"1\":{\"221\":1}}],[\"再更新\",{\"1\":{\"168\":1}}],[\"再递归地构建左右子树\",{\"1\":{\"111\":1}}],[\"再回溯继续\",{\"1\":{\"110\":1}}],[\"再对\",{\"1\":{\"102\":1,\"103\":1}}],[\"再对数组长度取模\",{\"1\":{\"67\":1}}],[\"再例如\",{\"1\":{\"95\":1}}],[\"再将其删除\",{\"1\":{\"91\":1}}],[\"再将当前数组的所有元素依次移动至新数组\",{\"1\":{\"32\":1}}],[\"再从数组\",{\"1\":{\"56\":1}}],[\"再删除元素\",{\"1\":{\"34\":1}}],[\"那我们就再也无法控制线程什么时候结束了\",{\"1\":{\"234\":1,\"255\":1}}],[\"那使用虚函数也没有实际意义呀\",{\"1\":{\"208\":1}}],[\"那\",{\"1\":{\"111\":1}}],[\"那为什么时间复杂度不是\",{\"1\":{\"34\":1}}],[\"那么拷贝结束后\",{\"1\":{\"266\":1}}],[\"那么在这种情况下\",{\"1\":{\"208\":1}}],[\"那么在这个对象的生命期内\",{\"1\":{\"208\":1}}],[\"那么为什么会出现多态性\",{\"1\":{\"205\":1}}],[\"那么就设计为\",{\"1\":{\"111\":1}}],[\"那么通常比哈希表更快\",{\"1\":{\"73\":1}}],[\"那么选择质数或者合数作为模数都可以\",{\"1\":{\"69\":1}}],[\"那么哈希值就会出现聚堆\",{\"1\":{\"69\":1}}],[\"那么所有可以被\",{\"1\":{\"69\":1}}],[\"那么数据就被视为完整\",{\"1\":{\"68\":1}}],[\"那么密码就被视为正确\",{\"1\":{\"68\":1}}],[\"那么需要两个栈来配合实现\",{\"1\":{\"50\":1}}],[\"那么可以省去初始化步骤\",{\"1\":{\"49\":1}}],[\"那么可以用数组存储\",{\"1\":{\"15\":1}}],[\"那么\",{\"1\":{\"34\":1,\"58\":1}}],[\"那么它会影响后继节点的内存回收\",{\"1\":{\"34\":1}}],[\"那么多余的空间就被浪费了\",{\"1\":{\"14\":1}}],[\"不加载任何\",{\"1\":{\"496\":1}}],[\"不加载系统全局的\",{\"1\":{\"496\":1}}],[\"不加条件会删除所有记录\",{\"1\":{\"385\":1}}],[\"不进入函数内部\",{\"1\":{\"483\":1}}],[\"不支持\",{\"1\":{\"392\":1}}],[\"不等于\",{\"1\":{\"388\":1}}],[\"不推荐使用\",{\"1\":{\"385\":1}}],[\"不仅要掌握其基础知识\",{\"1\":{\"366\":1}}],[\"不缓存\",{\"1\":{\"342\":1}}],[\"不包含响应体\",{\"1\":{\"327\":1}}],[\"不启动图形界面\",{\"1\":{\"319\":1}}],[\"不管还有没有weak\",{\"1\":{\"267\":1}}],[\"不计数\",{\"1\":{\"267\":1}}],[\"不带超时功能\",{\"1\":{\"256\":2}}],[\"不需要使用互斥量\",{\"1\":{\"262\":1}}],[\"不需要像packaged\",{\"1\":{\"262\":1}}],[\"不需要同步内存顺序\",{\"1\":{\"250\":1}}],[\"不需要加锁解锁\",{\"1\":{\"239\":1}}],[\"不能用在stl标准容器中\",{\"1\":{\"266\":1}}],[\"不能递归\",{\"1\":{\"256\":1}}],[\"不能递归使用\",{\"1\":{\"256\":1}}],[\"不能再通过join来等待线程执行完\",{\"1\":{\"255\":1}}],[\"不能再通过join来等待线程执行完成\",{\"1\":{\"234\":1}}],[\"不能直接删除元素\",{\"1\":{\"65\":1}}],[\"不是对象的动态行为\",{\"1\":{\"208\":1}}],[\"不是程序代码\",{\"1\":{\"206\":1}}],[\"不可能通过父类的指针或者引用去调用\",{\"1\":{\"208\":1}}],[\"不可能存储在代码段\",{\"1\":{\"206\":1}}],[\"不必动态分配内存空间存储虚函数表\",{\"1\":{\"206\":1}}],[\"不易跟踪数据的流动\",{\"1\":{\"172\":1}}],[\"不直接与\",{\"1\":{\"179\":1}}],[\"不直接依赖\",{\"1\":{\"169\":1}}],[\"不直接操作\",{\"1\":{\"167\":1}}],[\"不希望通过修改已有代码或继承来实现\",{\"1\":{\"135\":1}}],[\"不应强迫一个类依赖于它不需要的接口\",{\"1\":{\"118\":1}}],[\"不属于右旋操作的维护范围\",{\"1\":{\"111\":1}}],[\"不匹配\",{\"1\":{\"73\":1}}],[\"不难发现\",{\"1\":{\"70\":1}}],[\"不存在\",{\"1\":{\"63\":1}}],[\"不存在上述数组扩容时效率降低的问题\",{\"1\":{\"49\":1}}],[\"不引入额外的数据结构\",{\"1\":{\"62\":1}}],[\"不过这本书我更推荐有一定基础\",{\"1\":{\"195\":1}}],[\"不过\",{\"1\":{\"49\":1}}],[\"不同场景下的数据查询需求多种多样\",{\"1\":{\"386\":1}}],[\"不同编程语言采取了不同的哈希表实现\",{\"1\":{\"72\":1}}],[\"不同编程语言的内置哈希值计算函数的定义和方法不同\",{\"1\":{\"71\":1}}],[\"不同编程语言的方法名称可能会有所不同\",{\"1\":{\"39\":1}}],[\"不同类型的节点值占用的空间是不同的\",{\"1\":{\"34\":1}}],[\"不会匹配\",{\"1\":{\"407\":1}}],[\"不会创建线程\",{\"1\":{\"262\":1}}],[\"不会引起数据竞争\",{\"1\":{\"246\":1}}],[\"不会\",{\"1\":{\"34\":1}}],[\"不断开没有关系\",{\"1\":{\"34\":1}}],[\"不修改\",{\"1\":{\"34\":1}}],[\"从项目中移除子模块\",{\"1\":{\"451\":1}}],[\"从远程仓库获取最新的提交和分支信息\",{\"1\":{\"445\":1}}],[\"从远程仓库拉取更改并合并到本地分支\",{\"1\":{\"443\":1}}],[\"从远程仓库克隆一个仓库到本地\",{\"1\":{\"426\":1}}],[\"从文本中提取特定格式的数据\",{\"1\":{\"412\":1}}],[\"从多个表中提取关联数据\",{\"1\":{\"397\":1}}],[\"从服务器获取资源\",{\"1\":{\"327\":1}}],[\"从内存中申请一个对象\",{\"1\":{\"309\":2}}],[\"从队列中取出元素\",{\"1\":{\"249\":1}}],[\"从刚创建对象开始就会新建一个线程用于执行函数\",{\"1\":{\"234\":1,\"255\":1}}],[\"从管道读取\",{\"1\":{\"224\":1}}],[\"从实现上看\",{\"1\":{\"208\":1}}],[\"从使用角度\",{\"1\":{\"208\":1}}],[\"从存储空间角度\",{\"1\":{\"208\":1}}],[\"从结果分析子类体现了多态性\",{\"1\":{\"205\":1}}],[\"从入门\",{\"1\":{\"193\":1}}],[\"从\",{\"1\":{\"180\":1,\"451\":2}}],[\"从该节点到根节点的路径上可能会出现一系列失衡节点\",{\"1\":{\"106\":1}}],[\"从该链表的角度看\",{\"1\":{\"34\":1}}],[\"从底至顶看\",{\"1\":{\"100\":1}}],[\"从根节点出发\",{\"1\":{\"90\":1}}],[\"从根节点到该节点所经过的边的数量\",{\"1\":{\"78\":1}}],[\"从根节点到最远叶节点所经过的边的数量\",{\"1\":{\"78\":1}}],[\"从二叉树的根节点\",{\"1\":{\"89\":1}}],[\"从距离该节点最远的叶节点到该节点所经过的边的数量\",{\"1\":{\"78\":1}}],[\"从顶至底递增\",{\"1\":{\"78\":1}}],[\"从中删除键值对\",{\"1\":{\"61\":2}}],[\"从本质上看\",{\"1\":{\"59\":1}}],[\"从栈\",{\"1\":{\"52\":2}}],[\"从标准库的角度看\",{\"1\":{\"34\":1}}],[\"从数据结构与算法\",{\"1\":{\"34\":1}}],[\"从头节点遍历到尾节点已经不会遇到\",{\"1\":{\"34\":1}}],[\"从而快速设置好调试环境\",{\"1\":{\"504\":1}}],[\"从而保持线性历史\",{\"1\":{\"441\":1}}],[\"从而提升页面加载速度\",{\"1\":{\"350\":1}}],[\"从而提高调试效率\",{\"1\":{\"494\":1}}],[\"从而提高运行时性能\",{\"1\":{\"283\":1}}],[\"从而提高效率\",{\"1\":{\"49\":1}}],[\"从而不会以明文形式出现在可执行文件中\",{\"1\":{\"284\":1}}],[\"从而脱离控制终端\",{\"1\":{\"221\":1}}],[\"从而防止僵尸进程的产生\",{\"1\":{\"218\":1}}],[\"从而导致的进程状态\",{\"1\":{\"216\":1}}],[\"从而导致以下不同点\",{\"1\":{\"34\":1}}],[\"从而实现进程在后台运行\",{\"1\":{\"221\":1}}],[\"从而实现多态性\",{\"1\":{\"205\":1}}],[\"从而实现哈希冲突的缓解\",{\"1\":{\"73\":1}}],[\"从而在调用虚函数时\",{\"1\":{\"205\":1}}],[\"从而让vptr指向正确的虚表\",{\"1\":{\"205\":1}}],[\"从而使代码更具可维护性和可测试性\",{\"1\":{\"163\":1}}],[\"从而使得各种操作的时间复杂度保持在\",{\"1\":{\"95\":1}}],[\"从而避免请求的发送者和接收者之间的耦合\",{\"1\":{\"157\":1}}],[\"从而避免哈希冲突\",{\"1\":{\"69\":1}}],[\"从而得出一个重要性质\",{\"1\":{\"92\":1}}],[\"从而完成节点插入操作\",{\"1\":{\"90\":1}}],[\"从而访问对应桶并获取\",{\"1\":{\"72\":1}}],[\"从而访问到对应的节点\",{\"1\":{\"34\":1}}],[\"从而加重哈希冲突\",{\"1\":{\"69\":1}}],[\"从而破解密码\",{\"1\":{\"68\":1}}],[\"从而优化查询效率\",{\"1\":{\"63\":1}}],[\"从而进一步促使该位置的聚堆生长\",{\"1\":{\"63\":1}}],[\"从而将查询操作的时间复杂度优化至\",{\"1\":{\"61\":1}}],[\"从而简化代码\",{\"1\":{\"61\":1}}],[\"从而获取\",{\"1\":{\"58\":1}}],[\"从而获取该\",{\"1\":{\"58\":1}}],[\"从而引入扩容机制\",{\"1\":{\"42\":1}}],[\"从而难以选择合适的列表长度\",{\"1\":{\"26\":1}}],[\"从而借助高速缓存来提升后续操作的执行速度\",{\"1\":{\"14\":1}}],[\"从而无法安全地扩展数组容量\",{\"1\":{\"13\":1}}],[\"从而直接访问该元素\",{\"1\":{\"8\":1}}],[\"呢\",{\"1\":{\"34\":2,\"73\":1}}],[\"设置常用断点\",{\"1\":{\"504\":1}}],[\"设置\",{\"1\":{\"501\":1}}],[\"设置仅在线程上触发的断点\",{\"1\":{\"489\":1}}],[\"设置动态库中的断点\",{\"1\":{\"488\":1}}],[\"设置为\",{\"1\":{\"484\":1}}],[\"设置一次性断点\",{\"1\":{\"482\":1}}],[\"设置断点\",{\"0\":{\"482\":1,\"498\":1}}],[\"设置变量\",{\"1\":{\"470\":1}}],[\"设置文件权限掩码\",{\"1\":{\"220\":1,\"221\":1}}],[\"设置新的会话等\",{\"1\":{\"219\":1}}],[\"设置模型\",{\"1\":{\"182\":1}}],[\"设置责任链\",{\"1\":{\"159\":1}}],[\"设置下一个处理者\",{\"1\":{\"159\":1}}],[\"设计基于资源的接口\",{\"1\":{\"346\":1}}],[\"设计健壮的网络服务非常重要\",{\"1\":{\"294\":1}}],[\"设计原则是指导代码设计的基本准则\",{\"1\":{\"118\":1}}],[\"设计原则\",{\"0\":{\"118\":1},\"2\":{\"121\":1}}],[\"设计模式是解决常见软件设计问题的通用解决方案\",{\"1\":{\"117\":1}}],[\"设计模式是解决反复出现的问题的解决方案\",{\"1\":{\"117\":1}}],[\"设计模式\",{\"0\":{\"116\":1,\"117\":1},\"1\":{\"2\":1},\"2\":{\"121\":1,\"127\":1,\"133\":1,\"139\":1,\"145\":1,\"155\":1,\"162\":1,\"176\":1,\"188\":1,\"313\":1}}],[\"设平衡因子为\",{\"1\":{\"98\":1}}],[\"设数组长度\",{\"1\":{\"58\":1}}],[\"设为\",{\"1\":{\"34\":1}}],[\"后跟要合并的分支名称\",{\"1\":{\"440\":1}}],[\"后跟分支名称\",{\"1\":{\"438\":1}}],[\"后跟文件\",{\"1\":{\"434\":1}}],[\"后跟文件路径\",{\"1\":{\"429\":1}}],[\"后跟仓库\",{\"1\":{\"426\":1}}],[\"后发送syn包\",{\"1\":{\"292\":1}}],[\"后使父进程退出\",{\"1\":{\"218\":1}}],[\"后变量不会释放\",{\"1\":{\"198\":1}}],[\"后序遍历是三种二叉树遍历方法\",{\"1\":{\"111\":1}}],[\"后序遍历皆属于深度优先搜索\",{\"1\":{\"110\":1}}],[\"后三种顺序\",{\"1\":{\"111\":1}}],[\"后代\",{\"1\":{\"77\":1}}],[\"后两位相同时\",{\"1\":{\"59\":1}}],[\"后退操作实际上是在执行出栈\",{\"1\":{\"50\":1}}],[\"后\",{\"1\":{\"34\":2,\"480\":1}}],[\"8b\",{\"1\":{\"420\":1}}],[\"80\",{\"1\":{\"330\":1}}],[\"8080\",{\"1\":{\"229\":2,\"420\":1}}],[\"8\",{\"0\":{\"436\":1,\"454\":1},\"1\":{\"34\":2,\"66\":3,\"69\":1,\"412\":2}}],[\"单步执行\",{\"0\":{\"483\":1}}],[\"单步执行代码等\",{\"1\":{\"478\":1}}],[\"单步执行代码\",{\"1\":{\"321\":2}}],[\"单一职责\",{\"1\":{\"119\":1}}],[\"单一职责原则\",{\"1\":{\"118\":1}}],[\"单向绑定\",{\"1\":{\"168\":1}}],[\"单向性\",{\"1\":{\"68\":1}}],[\"单向链表通常用于实现栈\",{\"1\":{\"25\":1}}],[\"单向链表的节点包含值和指向下一节点的引用两项数据\",{\"1\":{\"24\":1}}],[\"单向链表\",{\"1\":{\"24\":1}}],[\"单次入栈操作的时间复杂度会劣化至\",{\"1\":{\"51\":1}}],[\"单个元素分别占用\",{\"1\":{\"34\":1}}],[\"两个表的数据合并输出\",{\"1\":{\"395\":1}}],[\"两个线程同时运行\",{\"1\":{\"249\":1}}],[\"两个不同的\",{\"1\":{\"72\":1}}],[\"两个学号指向了同一个姓名\",{\"1\":{\"59\":1}}],[\"两项数据\",{\"1\":{\"56\":1}}],[\"两种模式\",{\"1\":{\"229\":1}}],[\"两种符号的工作原理是不同的\",{\"1\":{\"111\":1}}],[\"两种实现都支持栈定义中的各项操作\",{\"1\":{\"49\":1}}],[\"两种实现对比\",{\"0\":{\"49\":1}}],[\"两种实现的对比结论与栈一致\",{\"1\":{\"42\":1}}],[\"两种类型\",{\"1\":{\"34\":1}}],[\"两者的特点呈现出互补的特性\",{\"1\":{\"33\":1}}],[\"连接上并发发送多个请求\",{\"1\":{\"334\":1}}],[\"连接关闭时的状态\",{\"1\":{\"293\":1}}],[\"连接已建立\",{\"1\":{\"293\":1}}],[\"连接彻底关闭\",{\"1\":{\"290\":1}}],[\"连接的主动关闭方\",{\"1\":{\"290\":1}}],[\"连接状态\",{\"0\":{\"289\":1}}],[\"连接共享内存\",{\"1\":{\"226\":2}}],[\"连接两个节点的线段\",{\"1\":{\"78\":1}}],[\"连接\",{\"1\":{\"34\":1,\"319\":1,\"333\":1,\"356\":1}}],[\"连续空间存储和分散空间存储\",{\"1\":{\"33\":1}}],[\"连续空间存储是一把双刃剑\",{\"1\":{\"14\":1}}],[\"连续内存空间\",{\"1\":{\"23\":1}}],[\"灵活性高\",{\"1\":{\"137\":1}}],[\"灵活性\",{\"1\":{\"34\":1}}],[\"大于等于\",{\"1\":{\"388\":1}}],[\"大于\",{\"1\":{\"388\":1}}],[\"大家有需要可以留言\",{\"1\":{\"260\":1}}],[\"大量僵尸进程可能会让系统管理者难以管理和监控系统状态\",{\"1\":{\"217\":1}}],[\"大量的数据绑定可能会引起性能问题\",{\"1\":{\"172\":1}}],[\"大小确定\",{\"1\":{\"206\":1}}],[\"大小限制\",{\"1\":{\"34\":1}}],[\"大多为\",{\"1\":{\"34\":1}}],[\"大多数编程语言会将数组元素初始化为\",{\"1\":{\"7\":1}}],[\"更适合高性能需求的服务间通信\",{\"1\":{\"364\":1}}],[\"更适合需要复杂数据绑定和动态\",{\"1\":{\"169\":1}}],[\"更方便实现实现保护\",{\"1\":{\"262\":1}}],[\"更改工作目录\",{\"1\":{\"220\":1,\"221\":1}}],[\"更新\",{\"1\":{\"454\":1}}],[\"更新子模块\",{\"1\":{\"448\":1}}],[\"更新和删除表中的数据行\",{\"1\":{\"398\":1}}],[\"更新资源\",{\"1\":{\"327\":1}}],[\"更新头部指针\",{\"1\":{\"249\":1}}],[\"更新显示\",{\"1\":{\"179\":1}}],[\"更新的应用\",{\"1\":{\"169\":1}}],[\"更新节点高度\",{\"1\":{\"97\":1,\"100\":1,\"101\":1,\"106\":1,\"107\":1}}],[\"更新元素\",{\"1\":{\"29\":1}}],[\"更近的桶\",{\"1\":{\"63\":1}}],[\"更占用空间\",{\"1\":{\"34\":1}}],[\"更容易碎片化\",{\"1\":{\"34\":1}}],[\"栈帧调试\",{\"0\":{\"487\":1}}],[\"栈是一种遵循先入后出原则的数据结构\",{\"1\":{\"51\":1}}],[\"栈是一块较小的内存\",{\"1\":{\"34\":1}}],[\"栈为空\",{\"1\":{\"47\":1,\"48\":1}}],[\"栈遵循先入后出的原则\",{\"1\":{\"46\":1}}],[\"栈的数组实现可能导致一定程度的空间浪费\",{\"1\":{\"51\":1}}],[\"栈的数组实现具有较高的平均效率\",{\"1\":{\"51\":1}}],[\"栈的链表实现具有更为稳定的效率表现\",{\"1\":{\"51\":1}}],[\"栈的典型应用\",{\"0\":{\"50\":1}}],[\"栈的长度\",{\"1\":{\"47\":1}}],[\"栈的实现\",{\"0\":{\"46\":1}}],[\"栈的常用操作如下表所示\",{\"1\":{\"45\":1}}],[\"栈的常用操作\",{\"0\":{\"45\":1}}],[\"栈的先入后出规则\",{\"1\":{\"44\":1}}],[\"栈底\",{\"1\":{\"44\":1}}],[\"栈顶元素出栈\",{\"1\":{\"45\":1}}],[\"栈顶\",{\"1\":{\"44\":1}}],[\"栈\",{\"0\":{\"44\":1},\"1\":{\"44\":1,\"52\":3},\"2\":{\"54\":1}}],[\"栈和队列往往会使用编程语言提供的\",{\"1\":{\"34\":1}}],[\"栈和堆具有各自的特点\",{\"1\":{\"34\":1}}],[\"栈上的数组的大小需要在编译时确定\",{\"1\":{\"34\":1}}],[\"栈内存相对较小\",{\"1\":{\"34\":1}}],[\"栈与队列\",{\"1\":{\"25\":1}}],[\"然后拉取最新的更改\",{\"1\":{\"450\":1}}],[\"然后使用\",{\"1\":{\"320\":1}}],[\"然后\",{\"1\":{\"284\":1}}],[\"然后子进程立即退出\",{\"1\":{\"218\":1}}],[\"然后再调用基类的析构函数\",{\"1\":{\"207\":1}}],[\"然后构建引用\",{\"1\":{\"80\":1}}],[\"然后将中点元素作为根节点\",{\"1\":{\"111\":1}}],[\"然后将这些哈希值组合起来\",{\"1\":{\"71\":1}}],[\"然后将节点\",{\"1\":{\"61\":1}}],[\"然后与存储的哈希值进行比较\",{\"1\":{\"68\":1}}],[\"然后遍历链表并对比\",{\"1\":{\"61\":1}}],[\"然后把原数组元素依次复制到新数组\",{\"1\":{\"13\":1}}],[\"然而virtual\",{\"1\":{\"208\":1}}],[\"然而对于某些要求不高的场景\",{\"1\":{\"69\":1}}],[\"然而该哈希算法过于简单\",{\"1\":{\"68\":1}}],[\"然而无论是开放寻址还是链式地址\",{\"1\":{\"67\":1}}],[\"然而\",{\"1\":{\"34\":3,\"42\":2,\"45\":1,\"46\":1,\"49\":2,\"63\":2,\"64\":1,\"72\":1,\"73\":1,\"93\":1,\"111\":1}}],[\"quantifiers\",{\"1\":{\"402\":1,\"412\":1}}],[\"quic\",{\"1\":{\"335\":1,\"352\":1}}],[\"quecapacity\",{\"1\":{\"42\":7}}],[\"quesize++\",{\"1\":{\"41\":1,\"42\":1}}],[\"quesize\",{\"1\":{\"41\":5,\"42\":8}}],[\"queue<int>\",{\"1\":{\"39\":1}}],[\"queue\",{\"1\":{\"34\":1,\"38\":1,\"39\":10,\"41\":2,\"248\":5,\"249\":8}}],[\"qemu\",{\"0\":{\"318\":1,\"319\":1},\"1\":{\"314\":2,\"318\":3,\"319\":4,\"320\":2,\"321\":1},\"2\":{\"324\":1}}],[\"qidentityproxymodel\",{\"1\":{\"186\":1}}],[\"qsortfilterproxymodel\",{\"1\":{\"186\":4}}],[\"qstring\",{\"1\":{\"185\":1}}],[\"qstringlistmodel\",{\"1\":{\"179\":1}}],[\"qstyleoptionviewitem\",{\"1\":{\"181\":1}}],[\"qstyleditemdelegate\",{\"1\":{\"181\":4}}],[\"qstandarditem\",{\"1\":{\"179\":4}}],[\"qstandarditemmodel\",{\"1\":{\"179\":5,\"180\":1}}],[\"qvariant\",{\"1\":{\"185\":2}}],[\"qmodelindex\",{\"1\":{\"181\":1,\"185\":5}}],[\"qpainter\",{\"1\":{\"181\":1}}],[\"qobject\",{\"1\":{\"181\":1,\"185\":1}}],[\"qlistview\",{\"1\":{\"180\":2}}],[\"qabstractlistmodel\",{\"1\":{\"179\":2,\"185\":1}}],[\"qabstracttablemodel\",{\"1\":{\"179\":2,\"185\":3}}],[\"qabstractitemmodel\",{\"1\":{\"179\":2,\"185\":1}}],[\"qtreeview\",{\"1\":{\"180\":2}}],[\"qtableview\",{\"1\":{\"180\":5}}],[\"qt\",{\"0\":{\"184\":1},\"1\":{\"177\":2,\"179\":2,\"180\":1,\"181\":2,\"183\":1,\"184\":3,\"185\":3,\"186\":4},\"2\":{\"188\":1}}],[\"qt开发\",{\"1\":{\"2\":1}}],[\"q\",{\"0\":{\"34\":1,\"52\":1,\"73\":1,\"111\":1},\"1\":{\"34\":10,\"52\":4,\"73\":6,\"111\":8,\"181\":1,\"185\":1}}],[\"应该没谁比c++之父更有发言权吧\",{\"1\":{\"195\":1}}],[\"应采用的旋转方法\",{\"1\":{\"104\":1}}],[\"应用示例\",{\"0\":{\"173\":1}}],[\"应用场景\",{\"0\":{\"160\":1}}],[\"应用\",{\"1\":{\"70\":1}}],[\"应当极难找到两个不同的输入\",{\"1\":{\"68\":1}}],[\"应根据具体需求和场景做出恰当选择\",{\"1\":{\"33\":1}}],[\"应被替换为\",{\"1\":{\"16\":1}}],[\"同样需要注意指定条件\",{\"1\":{\"385\":1}}],[\"同样可以通过数组或链表来实现\",{\"1\":{\"51\":1}}],[\"同步\",{\"1\":{\"290\":1}}],[\"同时\",{\"1\":{\"168\":1}}],[\"同时维护一个指向下一个处理者的引用\",{\"1\":{\"158\":1}}],[\"同时避免类爆炸问题\",{\"1\":{\"143\":1}}],[\"同时规定空节点的平衡因子为\",{\"1\":{\"98\":1}}],[\"同时满足这两类二叉树的所有性质\",{\"1\":{\"96\":1}}],[\"同时可以灵活调整长度\",{\"1\":{\"33\":1}}],[\"同理可得右子树\",{\"1\":{\"77\":1}}],[\"同理\",{\"1\":{\"10\":1,\"101\":1}}],[\"通知\",{\"1\":{\"179\":1,\"182\":1,\"238\":1}}],[\"通知数据变更\",{\"1\":{\"179\":1}}],[\"通常位于\",{\"1\":{\"496\":1}}],[\"通常\",{\"1\":{\"460\":1}}],[\"通常跟\",{\"1\":{\"430\":1}}],[\"通常与\",{\"1\":{\"396\":1}}],[\"通常与聚合函数一起使用\",{\"1\":{\"390\":1}}],[\"通常通过\",{\"1\":{\"392\":1}}],[\"通常通过队列来实现\",{\"1\":{\"110\":1}}],[\"通常使用\",{\"1\":{\"387\":1}}],[\"通常使用递归来实现\",{\"1\":{\"110\":1}}],[\"通常需要指定条件以避免更新所有行\",{\"1\":{\"384\":1}}],[\"通常不是\",{\"1\":{\"331\":1}}],[\"通常不与任何终端关联\",{\"1\":{\"219\":1}}],[\"通常用于匹配完整的单词\",{\"1\":{\"407\":1}}],[\"通常用于在主查询中使用子查询结果\",{\"1\":{\"393\":1}}],[\"通常用于\",{\"1\":{\"328\":1}}],[\"通常用于提交表单或上传文件\",{\"1\":{\"327\":1}}],[\"通常用布尔值或整数表示\",{\"1\":{\"236\":1}}],[\"通常会使用日志文件或\",{\"1\":{\"222\":1}}],[\"通常是2分钟\",{\"1\":{\"290\":1}}],[\"通常是客户端\",{\"1\":{\"290\":1}}],[\"通常是纯粹的\",{\"1\":{\"165\":1}}],[\"通常是具体的业务逻辑类\",{\"1\":{\"142\":1}}],[\"通常包含一个实现部分的引用\",{\"1\":{\"142\":1}}],[\"通常认为时间复杂度是\",{\"1\":{\"73\":1}}],[\"通常情况下哈希函数的输入空间远大于输出空间\",{\"1\":{\"60\":1}}],[\"通常情况下\",{\"1\":{\"45\":1,\"72\":1}}],[\"通常情况下这\",{\"1\":{\"34\":1}}],[\"通常比\",{\"1\":{\"34\":1}}],[\"通常基于动态数组实现\",{\"1\":{\"33\":1}}],[\"通过在\",{\"1\":{\"505\":1}}],[\"通过在方法中调用组件对象的方法\",{\"1\":{\"136\":1}}],[\"通过定义别名\",{\"1\":{\"499\":1}}],[\"通过定义命令别名\",{\"1\":{\"495\":1}}],[\"通过定义一组工厂接口\",{\"1\":{\"153\":1}}],[\"通过熟练掌握\",{\"1\":{\"490\":1}}],[\"通过以上基本操作和命令\",{\"1\":{\"474\":1}}],[\"通过上述命令\",{\"1\":{\"454\":1}}],[\"通过不断学习和实践\",{\"1\":{\"366\":1}}],[\"通过负载均衡器分配流量\",{\"1\":{\"354\":1}}],[\"通过反向代理服务器\",{\"1\":{\"354\":1}}],[\"通过合并\",{\"1\":{\"351\":1}}],[\"通过压缩响应内容\",{\"1\":{\"350\":1}}],[\"通过将资源缓存到靠近用户的节点\",{\"1\":{\"344\":1}}],[\"通过将数据和显示逻辑解耦\",{\"1\":{\"177\":1}}],[\"通过输入输出的严格验证和编码来防止跨站脚本攻击\",{\"1\":{\"340\":1}}],[\"通过使用基于\",{\"1\":{\"352\":1}}],[\"通过使用令牌\",{\"1\":{\"340\":1}}],[\"通过使用观察者模式\",{\"1\":{\"125\":1}}],[\"通过设置\",{\"1\":{\"338\":1,\"495\":1}}],[\"通过正确使用\",{\"1\":{\"304\":1}}],[\"通过传递特定的\",{\"1\":{\"303\":1}}],[\"通过分析tcp连接的状态\",{\"1\":{\"294\":1}}],[\"通过右值引用\",{\"1\":{\"268\":1}}],[\"通过async可以直接创建异步的任务\",{\"1\":{\"262\":1}}],[\"通过get\",{\"1\":{\"261\":1}}],[\"通过及时调用\",{\"1\":{\"218\":1}}],[\"通过这种方式\",{\"1\":{\"286\":1}}],[\"通过这种设计\",{\"1\":{\"184\":1}}],[\"通过这种模式\",{\"1\":{\"143\":1}}],[\"通过信号通知\",{\"1\":{\"182\":1}}],[\"通过委托机制\",{\"1\":{\"186\":1}}],[\"通过委托\",{\"1\":{\"181\":1}}],[\"通过访问\",{\"1\":{\"180\":1}}],[\"通过数据绑定机制进行通信\",{\"1\":{\"169\":1}}],[\"通过桥接模式\",{\"1\":{\"143\":1}}],[\"通过继承的方式会导致子类的\",{\"1\":{\"137\":1}}],[\"通过实现iprogress\",{\"1\":{\"125\":1}}],[\"通过添加抽象接口层\",{\"1\":{\"119\":1}}],[\"通过多个特定接口来代替单一的总接口\",{\"1\":{\"118\":1}}],[\"通过抽象和接口\",{\"1\":{\"118\":1}}],[\"通过\",{\"1\":{\"111\":1,\"181\":1,\"182\":1,\"183\":1,\"249\":1,\"343\":1,\"356\":1,\"397\":3,\"459\":1,\"472\":1,\"482\":1,\"485\":1,\"490\":1,\"494\":1,\"505\":1}}],[\"通过重写对象的哈希方法\",{\"1\":{\"71\":1}}],[\"通过哈希函数计算桶索引\",{\"1\":{\"63\":1}}],[\"通过某种哈希算法\",{\"1\":{\"58\":1}}],[\"通过取余操作实现\",{\"1\":{\"42\":1}}],[\"通过索引遍历列表\",{\"1\":{\"31\":1}}],[\"通过索引遍历数组\",{\"1\":{\"11\":1}}],[\"通过引用指向\",{\"1\":{\"18\":1}}],[\"通过它可以从当前节点访问到下一个节点\",{\"1\":{\"16\":1}}],[\"实际的内容数据\",{\"1\":{\"327\":1}}],[\"实际应用中可以根据需求扩展守护进程的功能\",{\"1\":{\"222\":1}}],[\"实际上相当于同步操作\",{\"1\":{\"262\":1}}],[\"实际上需要通过修改节点指针来实现\",{\"1\":{\"100\":1}}],[\"实际上\",{\"1\":{\"26\":1,\"68\":1}}],[\"实例管理的数据和行为\",{\"1\":{\"173\":1}}],[\"实现分页\",{\"1\":{\"397\":1}}],[\"实现\",{\"1\":{\"392\":1}}],[\"实现指数退避算法\",{\"1\":{\"362\":1}}],[\"实现preference\",{\"0\":{\"310\":1}}],[\"实现示例\",{\"0\":{\"285\":1}}],[\"实现编译时加密和运行时解密是一种有效保护敏感信息的方法\",{\"1\":{\"286\":1}}],[\"实现编译时加密\",{\"0\":{\"282\":1},\"1\":{\"282\":1,\"283\":1}}],[\"实现生产者\",{\"1\":{\"240\":1}}],[\"实现原理\",{\"1\":{\"236\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"265\":1}}],[\"实现双向数据绑定\",{\"1\":{\"167\":1}}],[\"实现界面和数据的自动同步\",{\"1\":{\"164\":1}}],[\"实现了表格和树状结构的支持\",{\"1\":{\"179\":1}}],[\"实现了请求的解耦处理\",{\"1\":{\"160\":1}}],[\"实现了处理者接口\",{\"1\":{\"158\":1}}],[\"实现创建具体产品族的方法\",{\"1\":{\"152\":1}}],[\"实现具体的产品类\",{\"1\":{\"152\":1}}],[\"实现工厂接口\",{\"1\":{\"149\":1}}],[\"实现产品接口的具体类\",{\"1\":{\"149\":1}}],[\"实现类和抽象类之间可以自由组合\",{\"1\":{\"143\":1}}],[\"实现类接口与抽象类没有继承关系\",{\"1\":{\"142\":1}}],[\"实现类接口\",{\"1\":{\"142\":1}}],[\"实现类接口类型\",{\"1\":{\"142\":1}}],[\"实现实现类接口\",{\"1\":{\"142\":1}}],[\"实现功能的叠加\",{\"1\":{\"136\":1}}],[\"实现组件接口\",{\"1\":{\"136\":1}}],[\"实现组件接口的具体类\",{\"1\":{\"136\":1}}],[\"实现策略接口的不同算法\",{\"1\":{\"130\":1}}],[\"实现观察者接口\",{\"1\":{\"124\":1}}],[\"实现主题接口\",{\"1\":{\"124\":1}}],[\"实现模块基于抽象接口实现具体的底层细节\",{\"1\":{\"119\":1}}],[\"实现的基础\",{\"1\":{\"199\":1}}],[\"实现的请假流程处理的责任链模式示例\",{\"1\":{\"159\":1}}],[\"实现的\",{\"1\":{\"58\":1}}],[\"实现高效的查找\",{\"1\":{\"94\":1}}],[\"实现高效的元素查询\",{\"1\":{\"56\":1}}],[\"实现高效的节点插入与删除\",{\"1\":{\"33\":1}}],[\"且没有立即可用的子进程终止状态\",{\"1\":{\"299\":1}}],[\"且值相同\",{\"1\":{\"200\":1}}],[\"且最底层节点尽量靠左填充\",{\"1\":{\"84\":1}}],[\"且容易产生聚集\",{\"1\":{\"72\":1}}],[\"且链表长度达到\",{\"1\":{\"66\":1}}],[\"且可以灵活调整长度\",{\"1\":{\"33\":1}}],[\"且初始化后长度不可变\",{\"1\":{\"33\":1}}],[\"且元素类型相同\",{\"1\":{\"14\":1}}],[\"分析崩溃时的堆栈和变量状态\",{\"1\":{\"490\":1}}],[\"分析程序崩溃的原因\",{\"1\":{\"490\":1}}],[\"分析网络性能\",{\"1\":{\"347\":1}}],[\"分支管理\",{\"0\":{\"437\":1}}],[\"分页查询\",{\"1\":{\"397\":1}}],[\"分页查询用于获取大数据集中的一部分记录\",{\"1\":{\"396\":1}}],[\"分组查询\",{\"1\":{\"397\":1}}],[\"分组查询用于将数据按照某一列或多列的值分组\",{\"1\":{\"390\":1}}],[\"分组和条件查询\",{\"1\":{\"397\":1}}],[\"分组\",{\"1\":{\"386\":1}}],[\"分离任务逻辑和执行实现\",{\"1\":{\"311\":1}}],[\"分离共享内存\",{\"1\":{\"226\":2}}],[\"分为计数信号量和二进制信号量\",{\"1\":{\"240\":1}}],[\"分\",{\"1\":{\"91\":1}}],[\"分治\",{\"1\":{\"86\":1}}],[\"分布越均匀\",{\"1\":{\"68\":1}}],[\"分别运行在线程对象\",{\"1\":{\"234\":1}}],[\"分别有什么用呢\",{\"1\":{\"111\":1}}],[\"分别指向其左子节点和右子节点\",{\"1\":{\"110\":1}}],[\"分别指向左子节点\",{\"1\":{\"77\":1}}],[\"分别需要采用右旋\",{\"1\":{\"104\":1}}],[\"分别用于获取和更新节点的高度\",{\"1\":{\"97\":1}}],[\"分别视为\",{\"1\":{\"41\":1}}],[\"分别代表数据在计算机内存中的两种存储方式\",{\"1\":{\"33\":1}}],[\"分配了必要的资源后\",{\"1\":{\"214\":1}}],[\"分配由编译器自动完成\",{\"1\":{\"34\":1}}],[\"分配和释放效率\",{\"1\":{\"34\":1}}],[\"分散内存空间\",{\"1\":{\"23\":1}}],[\"倍\",{\"1\":{\"32\":1,\"49\":1,\"59\":1,\"61\":1}}],[\"初始状态\",{\"1\":{\"290\":1}}],[\"初始容量\",{\"1\":{\"32\":1,\"49\":1}}],[\"初始化文件\",{\"1\":{\"496\":2}}],[\"初始化变量或加载调试符号\",{\"1\":{\"495\":1}}],[\"初始化之后\",{\"1\":{\"448\":1}}],[\"初始化绘制参数op\",{\"1\":{\"308\":1}}],[\"初始化op\",{\"1\":{\"308\":2}}],[\"初始化指针并将引用计数置为1\",{\"1\":{\"265\":1}}],[\"初始化信号量\",{\"1\":{\"227\":1}}],[\"初始化的字符串都存储在字符串常量池中\",{\"1\":{\"111\":1}}],[\"初始化节点\",{\"1\":{\"80\":1,\"90\":1}}],[\"初始化二叉树\",{\"0\":{\"80\":1},\"1\":{\"80\":1}}],[\"初始化扩容后的新哈希表\",{\"1\":{\"61\":1,\"63\":1}}],[\"初始化哈希表\",{\"1\":{\"57\":1}}],[\"初始化\",{\"1\":{\"57\":1,\"448\":1}}],[\"初始化栈\",{\"1\":{\"45\":1}}],[\"初始化队列\",{\"1\":{\"39\":1}}],[\"初始化列表\",{\"0\":{\"28\":1},\"1\":{\"28\":1,\"34\":1}}],[\"初始化各个节点\",{\"1\":{\"18\":1}}],[\"初始化完成后\",{\"1\":{\"18\":1}}],[\"初始化链表\",{\"0\":{\"18\":1},\"1\":{\"18\":1}}],[\"初始化一个扩展长度后的数组\",{\"1\":{\"13\":1}}],[\"初始化数组\",{\"0\":{\"7\":1},\"1\":{\"7\":1,\"42\":1,\"58\":1}}],[\"包后进入这个状态\",{\"1\":{\"290\":2}}],[\"包括堆栈\",{\"1\":{\"484\":1}}],[\"包括特殊字符\",{\"1\":{\"412\":1}}],[\"包括基础查询\",{\"1\":{\"386\":1}}],[\"包括添加\",{\"1\":{\"379\":1}}],[\"包括\",{\"1\":{\"327\":2}}],[\"包括对数据的增删改查操作\",{\"1\":{\"179\":1}}],[\"包括以下三个重点设计\",{\"1\":{\"32\":1}}],[\"包含目录\",{\"1\":{\"470\":1}}],[\"包含构建系统的配置和构建指令\",{\"1\":{\"460\":1}}],[\"包含元数据\",{\"1\":{\"327\":2}}],[\"包含元素\",{\"1\":{\"18\":1}}],[\"包含子进程的状态信息\",{\"1\":{\"300\":1}}],[\"包含退出状态信息等\",{\"1\":{\"216\":1}}],[\"包含了\",{\"1\":{\"169\":1}}],[\"包含多个桶\",{\"1\":{\"61\":1}}],[\"包含\",{\"1\":{\"58\":1}}],[\"感兴趣的读者可以查阅源码进行学习\",{\"1\":{\"32\":1}}],[\"许多编程语言内置了列表\",{\"1\":{\"32\":1}}],[\"许多编程语言中的标准库提供的列表是基于动态数组实现的\",{\"1\":{\"26\":1}}],[\"直到指定位置\",{\"1\":{\"483\":1}}],[\"直到指定的子进程终止或者发生了其他指定的状态变化\",{\"1\":{\"297\":1}}],[\"直到下一个断点或程序结束\",{\"1\":{\"483\":1}}],[\"直到下一个断点\",{\"1\":{\"321\":1}}],[\"直到有线程通知或者超时才会唤醒正在阻塞的线程\",{\"1\":{\"260\":1}}],[\"直到有对象处理它为止\",{\"1\":{\"157\":1}}],[\"直到锁可用为止\",{\"1\":{\"241\":1}}],[\"直到互斥量被解锁\",{\"1\":{\"236\":1}}],[\"直到线程函数执行结束\",{\"1\":{\"234\":1,\"255\":1}}],[\"直到最后的构造函数结束\",{\"1\":{\"208\":1}}],[\"直到某个组件处理该事件\",{\"1\":{\"160\":1}}],[\"直到越过叶节点\",{\"1\":{\"90\":1}}],[\"直到找到能够处理请求的对象\",{\"1\":{\"158\":1}}],[\"直到找到目标元素时返回\",{\"1\":{\"65\":1}}],[\"直到找到空位后插入元素\",{\"1\":{\"65\":1}}],[\"直到找到对应元素\",{\"1\":{\"63\":1}}],[\"直至找到正确的键值对或无法找到跳出为止\",{\"1\":{\"73\":1}}],[\"直至找到空桶\",{\"1\":{\"63\":1}}],[\"直至找到目标节点\",{\"1\":{\"21\":1}}],[\"直至冲突消失为止\",{\"1\":{\"60\":1}}],[\"直接运行程序\",{\"1\":{\"481\":1}}],[\"直接使用本地缓存\",{\"1\":{\"343\":1}}],[\"直接看使用代码吧\",{\"1\":{\"259\":1}}],[\"直接看代码\",{\"1\":{\"234\":1,\"255\":1}}],[\"直接的讲\",{\"1\":{\"208\":1}}],[\"直接映射原始模型\",{\"1\":{\"186\":1}}],[\"直接绑定到\",{\"1\":{\"168\":1}}],[\"直接删除\",{\"1\":{\"107\":2}}],[\"直接提前返回\",{\"1\":{\"91\":1}}],[\"直接返回\",{\"1\":{\"90\":2,\"104\":1,\"106\":1}}],[\"直接回到数组头部继续遍历\",{\"1\":{\"42\":1}}],[\"直接遍历列表元素\",{\"1\":{\"31\":1}}],[\"与头部指针\",{\"1\":{\"249\":1}}],[\"与服务层\",{\"1\":{\"165\":1}}],[\"与顺序和逆序遍历数组类似\",{\"1\":{\"111\":1}}],[\"与插入节点类似\",{\"1\":{\"91\":1}}],[\"与查找节点相同\",{\"1\":{\"90\":1}}],[\"与查找操作相似\",{\"1\":{\"90\":1}}],[\"与链表类似\",{\"1\":{\"77\":1,\"80\":1,\"81\":1}}],[\"与数组扩容类似\",{\"1\":{\"72\":1}}],[\"与数组一样\",{\"1\":{\"31\":1}}],[\"与\",{\"0\":{\"169\":1,\"184\":1,\"200\":1},\"1\":{\"68\":1,\"77\":1,\"200\":1,\"249\":1,\"327\":1,\"364\":1}}],[\"与线性探测相比\",{\"1\":{\"65\":1}}],[\"与值\",{\"1\":{\"56\":1}}],[\"与许多语言不同\",{\"1\":{\"34\":1}}],[\"与单向链表相比\",{\"1\":{\"24\":1}}],[\"65\",{\"1\":{\"225\":1,\"226\":1,\"227\":1}}],[\"64\",{\"1\":{\"66\":1,\"319\":1}}],[\"6\",{\"0\":{\"203\":1,\"229\":1,\"241\":1,\"434\":1,\"452\":1},\"1\":{\"30\":2,\"69\":8,\"220\":1,\"272\":1,\"316\":10,\"319\":4}}],[\"需重新验证\",{\"1\":{\"342\":1}}],[\"需要使用\",{\"1\":{\"373\":1}}],[\"需要使用weak\",{\"1\":{\"267\":1}}],[\"需要配置\",{\"1\":{\"337\":1}}],[\"需要身份验证\",{\"1\":{\"328\":1}}],[\"需要持有相关的互斥量\",{\"1\":{\"238\":1}}],[\"需要根据需求进行选择\",{\"1\":{\"230\":1}}],[\"需要沿着责任链传递的请求\",{\"1\":{\"158\":1}}],[\"需要从底至顶执行旋转操作\",{\"1\":{\"107\":1}}],[\"需要先对\",{\"1\":{\"103\":1}}],[\"需要先查询到元素\",{\"1\":{\"56\":1}}],[\"需要在左旋中添加一步\",{\"1\":{\"101\":1}}],[\"需要在右旋中添加一步\",{\"1\":{\"100\":1}}],[\"需要特别注意的是\",{\"1\":{\"97\":1}}],[\"需要通过标记删除\",{\"1\":{\"73\":1}}],[\"需要注意以下两点\",{\"1\":{\"90\":1}}],[\"需要注意两点\",{\"1\":{\"61\":1}}],[\"需要注意的是\",{\"1\":{\"39\":1,\"81\":1}}],[\"需要针对具体情况进行分析\",{\"1\":{\"49\":1}}],[\"需要手动释放空间\",{\"1\":{\"7\":1}}],[\"需注意\",{\"1\":{\"28\":1}}],[\"视图的用户输入会通过绑定机制传递给\",{\"1\":{\"168\":1}}],[\"视图会自动更新\",{\"1\":{\"168\":1}}],[\"视图层\",{\"1\":{\"168\":1}}],[\"视图模型\",{\"0\":{\"167\":1},\"1\":{\"164\":1}}],[\"视图\",{\"0\":{\"166\":1,\"180\":1},\"1\":{\"164\":1,\"169\":1,\"177\":1}}],[\"视为父节点\",{\"1\":{\"77\":1}}],[\"视为等同的概念\",{\"1\":{\"26\":1}}],[\"视频播放器中\",{\"1\":{\"25\":1}}],[\"dump\",{\"0\":{\"490\":1},\"1\":{\"480\":1,\"490\":4}}],[\"dup\",{\"1\":{\"220\":2}}],[\"ds\",{\"1\":{\"227\":1}}],[\"darkwavestyle\",{\"1\":{\"308\":1}}],[\"daemon\",{\"1\":{\"219\":1,\"318\":1}}],[\"datatype\",{\"1\":{\"376\":2,\"379\":2}}],[\"databases\",{\"1\":{\"372\":2}}],[\"database\",{\"1\":{\"371\":5,\"373\":2,\"374\":5}}],[\"datachanged\",{\"1\":{\"183\":2}}],[\"data\",{\"1\":{\"164\":1,\"173\":3,\"181\":1,\"182\":1,\"185\":2,\"237\":3,\"285\":7,\"286\":1,\"420\":1}}],[\"days\",{\"1\":{\"159\":20}}],[\"drop\",{\"1\":{\"374\":3,\"379\":2,\"381\":3}}],[\"driving\",{\"1\":{\"150\":1}}],[\"drive\",{\"1\":{\"150\":3}}],[\"drawwaves\",{\"1\":{\"308\":1}}],[\"drawoption\",{\"1\":{\"308\":9}}],[\"drawing\",{\"1\":{\"143\":2}}],[\"draw\",{\"1\":{\"143\":3,\"308\":4}}],[\"docker\",{\"1\":{\"420\":4}}],[\"docrypto\",{\"1\":{\"137\":3}}],[\"doe\",{\"1\":{\"383\":1}}],[\"dodraw\",{\"1\":{\"308\":4}}],[\"downloaded\",{\"1\":{\"420\":1}}],[\"downloading\",{\"1\":{\"420\":1}}],[\"downloads\",{\"1\":{\"317\":1}}],[\"down\",{\"1\":{\"243\":1}}],[\"do\",{\"1\":{\"234\":2,\"308\":3,\"309\":2,\"311\":7}}],[\"dom\",{\"1\":{\"171\":1}}],[\"dobuffer\",{\"1\":{\"137\":3}}],[\"doprogress\",{\"1\":{\"125\":2}}],[\"double\",{\"1\":{\"34\":2,\"49\":1,\"61\":4,\"63\":3,\"71\":1,\"131\":8,\"218\":2,\"271\":1,\"272\":1}}],[\"dirs\",{\"1\":{\"471\":1}}],[\"directly\",{\"1\":{\"420\":1}}],[\"directories\",{\"1\":{\"470\":2,\"471\":1}}],[\"directory\",{\"1\":{\"220\":1}}],[\"directorhandler\",{\"1\":{\"159\":1}}],[\"director\",{\"1\":{\"159\":6}}],[\"diff\",{\"1\":{\"433\":4}}],[\"diagram\",{\"1\":{\"289\":1}}],[\"display\",{\"1\":{\"484\":1}}],[\"displayrole\",{\"1\":{\"185\":2}}],[\"discounts\",{\"1\":{\"131\":1}}],[\"discountstrategy\",{\"1\":{\"131\":7}}],[\"div>\",{\"1\":{\"173\":1}}],[\"dip\",{\"1\":{\"118\":1}}],[\"dict\",{\"1\":{\"66\":1,\"72\":1}}],[\"dfs\",{\"1\":{\"111\":1}}],[\"debian\",{\"1\":{\"459\":1}}],[\"debug\",{\"1\":{\"317\":1,\"321\":1,\"504\":1}}],[\"debugfs\",{\"1\":{\"317\":1}}],[\"departments\",{\"1\":{\"397\":1}}],[\"department\",{\"1\":{\"390\":4,\"391\":2,\"397\":4}}],[\"depth\",{\"1\":{\"78\":1}}],[\"destination\",{\"1\":{\"473\":1}}],[\"destruct\",{\"1\":{\"268\":7}}],[\"description=ollama\",{\"1\":{\"420\":1}}],[\"describe\",{\"1\":{\"377\":3}}],[\"desc\",{\"1\":{\"389\":2,\"397\":1}}],[\"desaction\",{\"1\":{\"255\":5}}],[\"defconfig\",{\"1\":{\"316\":1}}],[\"define\",{\"1\":{\"285\":1,\"502\":1,\"504\":1}}],[\"deferred表示延迟执行任务\",{\"1\":{\"262\":1}}],[\"deferred\",{\"1\":{\"262\":1}}],[\"default\",{\"1\":{\"97\":1,\"143\":2,\"150\":2,\"153\":3,\"255\":2,\"376\":1}}],[\"dequeue\",{\"1\":{\"248\":2,\"249\":5}}],[\"detach\",{\"1\":{\"234\":3,\"255\":3,\"261\":1}}],[\"devtools\",{\"1\":{\"347\":1}}],[\"dev\",{\"1\":{\"220\":2,\"221\":1}}],[\"delegate\",{\"0\":{\"181\":1},\"1\":{\"177\":1,\"181\":2,\"184\":2}}],[\"delele\",{\"1\":{\"131\":2}}],[\"deletion\",{\"1\":{\"63\":1}}],[\"delete是c++语言标准库提供的一组用于动态创建\",{\"1\":{\"199\":1}}],[\"delete与malloc\",{\"0\":{\"199\":1}}],[\"delete\",{\"1\":{\"13\":1,\"20\":1,\"41\":1,\"42\":1,\"47\":1,\"58\":2,\"61\":3,\"63\":4,\"91\":1,\"107\":2,\"199\":1,\"205\":1,\"248\":1,\"249\":1,\"327\":1,\"331\":1,\"385\":4,\"482\":1}}],[\"degree\",{\"1\":{\"78\":1}}],[\"decrypt\",{\"1\":{\"285\":2,\"286\":1}}],[\"decorator\",{\"1\":{\"135\":1,\"136\":2}}],[\"dec\",{\"1\":{\"71\":2}}],[\"d\",{\"1\":{\"59\":1,\"237\":2,\"317\":1,\"405\":4,\"410\":3,\"412\":3,\"420\":1,\"439\":2}}],[\"dynamic\",{\"1\":{\"26\":1}}],[\"为编译器指定自定义编译选项\",{\"1\":{\"472\":1}}],[\"为目标\",{\"1\":{\"470\":1}}],[\"为下次提交做准备\",{\"1\":{\"429\":1}}],[\"为内核启动的初始化程序\",{\"1\":{\"317\":1}}],[\"为正表示父进程\",{\"1\":{\"302\":1}}],[\"为实现无锁编程提供了基础设施\",{\"1\":{\"247\":1}}],[\"为子类对象初始化虚表指针\",{\"1\":{\"205\":1}}],[\"为支持函数重载引入了name\",{\"1\":{\"202\":1}}],[\"为数组的指针\",{\"1\":{\"200\":1}}],[\"为数组名指向首元素地址即与\",{\"1\":{\"200\":1}}],[\"为数组长度\",{\"1\":{\"10\":1}}],[\"为原点\",{\"1\":{\"100\":1,\"101\":1}}],[\"为例\",{\"1\":{\"71\":1}}],[\"为什么要将\",{\"1\":{\"111\":1}}],[\"为什么要强调对质数取模\",{\"1\":{\"69\":1}}],[\"为什么\",{\"1\":{\"111\":1}}],[\"为什么哈希表扩容能够缓解哈希冲突\",{\"1\":{\"73\":1}}],[\"为什么在线性探测中\",{\"1\":{\"73\":1}}],[\"为什么不使用哈希函数\",{\"1\":{\"73\":1}}],[\"为什么数组要求相同类型的元素\",{\"1\":{\"34\":1}}],[\"为此\",{\"1\":{\"59\":1,\"63\":1}}],[\"为了便于使用\",{\"1\":{\"104\":1}}],[\"为了保持二叉搜索树\",{\"1\":{\"90\":1}}],[\"为了保护用户密码的安全\",{\"1\":{\"68\":1}}],[\"为了防止这种情况的发生\",{\"1\":{\"208\":1}}],[\"为了防止从哈希值推导出原始密码等逆向工程\",{\"1\":{\"68\":1}}],[\"为了防止频繁扩容\",{\"1\":{\"34\":1}}],[\"为了实现插入节点\",{\"1\":{\"90\":1}}],[\"为了实现\",{\"1\":{\"68\":1}}],[\"为了实现队列\",{\"1\":{\"40\":1}}],[\"为了降低哈希冲突的发生概率\",{\"1\":{\"67\":1}}],[\"为了更加充分地使用哈希表的空间\",{\"1\":{\"63\":1}}],[\"为了提升效率\",{\"1\":{\"60\":1}}],[\"为了解决该问题\",{\"1\":{\"60\":1,\"63\":1}}],[\"为了解决此问题\",{\"1\":{\"42\":1}}],[\"为了深入了解栈的运行机制\",{\"1\":{\"46\":1}}],[\"为了加深对列表工作原理的理解\",{\"1\":{\"32\":1}}],[\"为\",{\"1\":{\"33\":1,\"218\":1,\"298\":1,\"302\":1}}],[\"为解决此问题\",{\"1\":{\"26\":1}}],[\"并运行程序\",{\"1\":{\"488\":1}}],[\"并指定源文件\",{\"1\":{\"461\":1}}],[\"并按员工数量降序排序\",{\"1\":{\"397\":1}}],[\"并开始调试\",{\"1\":{\"320\":1}}],[\"并开启\",{\"1\":{\"319\":1}}],[\"并可以控制虚拟机的执行\",{\"1\":{\"320\":1}}],[\"并初始化\",{\"1\":{\"309\":2}}],[\"并获取其退出状态\",{\"1\":{\"302\":1}}],[\"并设置\",{\"1\":{\"299\":1}}],[\"并采取相应的措施来修复或优化\",{\"1\":{\"294\":1}}],[\"并正确关闭连接\",{\"1\":{\"293\":1}}],[\"并进入syn\",{\"1\":{\"292\":1}}],[\"并进入这个状态\",{\"1\":{\"290\":1}}],[\"并详细解释了其工作原理\",{\"1\":{\"286\":1}}],[\"并存储在\",{\"1\":{\"286\":1}}],[\"并展示一个具体的实现示例\",{\"1\":{\"282\":1}}],[\"并增加右操作数所指对象的引用计数\",{\"1\":{\"265\":1}}],[\"并输出相应的信息\",{\"1\":{\"249\":1}}],[\"并使用\",{\"1\":{\"249\":2}}],[\"并释放互斥量\",{\"1\":{\"238\":1}}],[\"并为父类对象初始化虚表指针\",{\"1\":{\"205\":1}}],[\"并实现相关的接口方法\",{\"1\":{\"185\":1}}],[\"并处理用户交互\",{\"1\":{\"184\":1}}],[\"并通过模型的标准接口\",{\"1\":{\"182\":1}}],[\"并向\",{\"1\":{\"179\":1}}],[\"并与\",{\"1\":{\"169\":1}}],[\"并与接收到的哈希值进行比较\",{\"1\":{\"68\":1}}],[\"并根据模型的变化进行更新\",{\"1\":{\"169\":1}}],[\"并根据父节点与子节点之间的索引映射关系来实现指针\",{\"1\":{\"110\":1}}],[\"并沿着这条链传递请求\",{\"1\":{\"157\":1}}],[\"并持有一个组件对象的引用\",{\"1\":{\"136\":1}}],[\"并简化代码结构\",{\"1\":{\"125\":1}}],[\"并用该节点替换当前节点\",{\"1\":{\"107\":1}}],[\"并声明一个成员变量\",{\"1\":{\"88\":1}}],[\"并提供\",{\"1\":{\"73\":1}}],[\"并引起一些安全问题\",{\"1\":{\"70\":1}}],[\"并清空栈\",{\"1\":{\"52\":1}}],[\"并在运行时对其进行解密\",{\"1\":{\"284\":1}}],[\"并在运行时决定使用哪种策略\",{\"1\":{\"130\":1}}],[\"并在其析构函数中对这些内存空间进行释放\",{\"1\":{\"208\":1}}],[\"并在树中递归删除节点\",{\"1\":{\"91\":1}}],[\"并在桶中获取\",{\"1\":{\"58\":1}}],[\"并在程序逻辑上忽略与栈无关的操作\",{\"1\":{\"45\":1}}],[\"并在另一端删除元素\",{\"1\":{\"40\":1}}],[\"并将请求转发到后端服务器\",{\"1\":{\"354\":1}}],[\"并将解密后的字符串输出\",{\"1\":{\"286\":1}}],[\"并将互斥量状态设置为锁定\",{\"1\":{\"236\":1}}],[\"并将这些数据渲染到屏幕上\",{\"1\":{\"180\":1}}],[\"并将操作传递给\",{\"1\":{\"167\":1}}],[\"并将其作为子模块添加\",{\"1\":{\"447\":1}}],[\"并将其传递给\",{\"1\":{\"166\":1,\"167\":1}}],[\"并将其压入栈\",{\"1\":{\"52\":2}}],[\"并将每个算法封装在独立的策略类中\",{\"1\":{\"129\":1}}],[\"并将搜索到的目标元素与该\",{\"1\":{\"63\":1}}],[\"并将\",{\"1\":{\"42\":2,\"249\":1}}],[\"并将原列表的所有元素搬运过去\",{\"1\":{\"34\":1}}],[\"并维护一个变量\",{\"1\":{\"42\":1}}],[\"并返回\",{\"1\":{\"41\":1,\"42\":1,\"47\":1,\"61\":1,\"63\":1,\"107\":1}}],[\"并且你有相应的权限克隆子模块\",{\"1\":{\"454\":1}}],[\"并且其状态尚未报告\",{\"1\":{\"298\":1}}],[\"并且构造函数的作用是提供初始化\",{\"1\":{\"208\":1}}],[\"并且存在对象内存布局的最前面\",{\"1\":{\"206\":1}}],[\"并且由于数据绑定\",{\"1\":{\"173\":1}}],[\"并且由于哈希表容量\",{\"1\":{\"59\":1}}],[\"并且需要将这些维度解耦的场景中使用\",{\"1\":{\"143\":1}}],[\"并且仍然保持二叉搜索树的性质\",{\"1\":{\"100\":1}}],[\"并且通过哈希函数找到标记为已删除的位置时\",{\"1\":{\"73\":1}}],[\"并且这个质数最好足够大\",{\"1\":{\"69\":1}}],[\"并且这些数字的内存地址无须连续\",{\"1\":{\"34\":1}}],[\"并且更加灵活\",{\"1\":{\"52\":1}}],[\"并且\",{\"1\":{\"49\":1,\"208\":1}}],[\"并且可以在程序运行过程中进行动态扩容\",{\"1\":{\"26\":1}}],[\"并且可以灵活动态扩容\",{\"1\":{\"26\":1}}],[\"并不是连续的\",{\"1\":{\"34\":1}}],[\"并随着元素插入和删除实时更新\",{\"1\":{\"32\":1}}],[\"并生成一个随机序列\",{\"1\":{\"15\":1}}],[\"添加依赖库\",{\"1\":{\"470\":1}}],[\"添加静态或动态库\",{\"1\":{\"470\":1}}],[\"添加库\",{\"1\":{\"470\":1}}],[\"添加可执行文件\",{\"1\":{\"461\":1}}],[\"添加并提交子模块的状态\",{\"1\":{\"452\":1}}],[\"添加当前目录下的所有更改\",{\"1\":{\"429\":1}}],[\"添加远程仓库\",{\"1\":{\"427\":1}}],[\"添加新的远程仓库\",{\"1\":{\"427\":1}}],[\"添加列\",{\"1\":{\"379\":1}}],[\"添加字符串结束符\",{\"1\":{\"285\":2}}],[\"添加键值对\",{\"1\":{\"72\":1}}],[\"添加键值对和删除键值对等\",{\"1\":{\"57\":1}}],[\"添加到链表中\",{\"1\":{\"61\":1}}],[\"添加操作\",{\"1\":{\"57\":1,\"58\":1,\"61\":1,\"63\":1}}],[\"添加至栈顶\",{\"1\":{\"45\":1}}],[\"添加至队尾\",{\"1\":{\"42\":1}}],[\"添加\",{\"1\":{\"26\":1}}],[\"添加元素\",{\"1\":{\"23\":1,\"56\":2,\"61\":1}}],[\"支持调试多线程程序\",{\"1\":{\"489\":1}}],[\"支持调试堆栈帧\",{\"1\":{\"487\":1}}],[\"支持动态调试\",{\"1\":{\"485\":1}}],[\"支持的主要功能包括设置断点\",{\"1\":{\"478\":1}}],[\"支持多平台\",{\"1\":{\"459\":1}}],[\"支持部分内容请求\",{\"1\":{\"333\":1}}],[\"支持对线程join或者detach\",{\"1\":{\"234\":1,\"255\":1}}],[\"支持广播通信\",{\"1\":{\"125\":1}}],[\"支持操作\",{\"1\":{\"49\":1}}],[\"支持元素访问\",{\"1\":{\"26\":1}}],[\"支持随机访问\",{\"1\":{\"14\":1}}],[\"以十六进制形式查看指定地址的内容\",{\"1\":{\"484\":1}}],[\"以外的任意一个字符\",{\"1\":{\"406\":1}}],[\"以避免删除所有行\",{\"1\":{\"385\":1}}],[\"以避免在网络恢复前过度占用资源\",{\"1\":{\"362\":1}}],[\"以避免守护进程占用可卸载的文件系统\",{\"1\":{\"221\":1}}],[\"以指示错误\",{\"1\":{\"299\":1}}],[\"以控制并发操作的顺序性\",{\"1\":{\"246\":1}}],[\"以防止多个进程同时访问共享资源\",{\"1\":{\"227\":1}}],[\"以回收子进程的资源\",{\"1\":{\"218\":1}}],[\"以获取并处理子进程的退出状态\",{\"1\":{\"218\":1}}],[\"以适应复杂的数据结构和特定的业务需求\",{\"1\":{\"185\":1}}],[\"以便稍后恢复\",{\"1\":{\"435\":1}}],[\"以便接收更新\",{\"1\":{\"124\":1}}],[\"以便使用调试符号\",{\"1\":{\"320\":1}}],[\"以便使用\",{\"1\":{\"111\":1}}],[\"以便实现无缝播放\",{\"1\":{\"25\":1}}],[\"以保持其有序状态\",{\"1\":{\"94\":1}}],[\"以实现有实际意义的操作\",{\"1\":{\"81\":1}}],[\"以最大化地保证哈希值均匀分布\",{\"1\":{\"72\":1}}],[\"以\",{\"1\":{\"71\":1,\"100\":1,\"101\":1}}],[\"以上两个都不是async的默认策略\",{\"1\":{\"262\":1}}],[\"以上代码创建了一个简单的守护进程\",{\"1\":{\"222\":1}}],[\"以上介绍的简单哈希算法都比较\",{\"1\":{\"70\":1}}],[\"以上实现的队列仍然具有局限性\",{\"1\":{\"42\":1}}],[\"以尽可能消除周期性模式\",{\"1\":{\"69\":1}}],[\"以确保在此之前的所有操作不会被重排序到\",{\"1\":{\"250\":1}}],[\"以确保在没有锁的情况下实现线程安全\",{\"1\":{\"245\":1}}],[\"以确保加载的结果及其后续的操作不会被重排序到\",{\"1\":{\"250\":1}}],[\"以确保取出操作完成后\",{\"1\":{\"249\":1}}],[\"以确保插入操作完成后\",{\"1\":{\"249\":1}}],[\"以确保守护进程创建的新文件有正确的权限\",{\"1\":{\"221\":1}}],[\"以确保哈希值在合适的范围内\",{\"1\":{\"69\":1}}],[\"以确保性能\",{\"1\":{\"66\":1}}],[\"以来\",{\"1\":{\"66\":1}}],[\"以此类推\",{\"1\":{\"65\":1}}],[\"以查找目标键值对\",{\"1\":{\"61\":1}}],[\"以表示键值对\",{\"1\":{\"58\":1}}],[\"以下将详细介绍\",{\"1\":{\"478\":1}}],[\"以下实现包含哈希表扩容方法\",{\"1\":{\"61\":1}}],[\"以下代码实现了一个包含懒删除的开放寻址\",{\"1\":{\"63\":1}}],[\"以下代码实现了一个简单哈希表\",{\"1\":{\"58\":1}}],[\"以下代码给出了链式地址哈希表的简单实现\",{\"1\":{\"61\":1}}],[\"以下为示例代码\",{\"1\":{\"48\":1}}],[\"以下是不同系统的安装方式\",{\"1\":{\"459\":1}}],[\"以下是\",{\"1\":{\"458\":1}}],[\"以下是常见的\",{\"1\":{\"446\":1}}],[\"以下是常见的状态转换路径\",{\"1\":{\"214\":1}}],[\"以下是一些常用的\",{\"1\":{\"423\":1}}],[\"以下是一个综合示例\",{\"1\":{\"397\":1}}],[\"以下是一个使用\",{\"1\":{\"301\":1}}],[\"以下是一个完整的实现示例\",{\"1\":{\"285\":1}}],[\"以下是对它们的详细介绍\",{\"1\":{\"402\":1}}],[\"以下是对各种场景下数据查询操作的详细介绍\",{\"1\":{\"386\":1}}],[\"以下是对每个层次的详细介绍和常用命令的解释\",{\"1\":{\"369\":1}}],[\"以下是与数据行相关的常用操作\",{\"1\":{\"382\":1}}],[\"以下是与数据库相关的基本操作\",{\"1\":{\"370\":1}}],[\"以下是与表操作相关的基本命令\",{\"1\":{\"375\":1}}],[\"以下是tcp连接状态的转换图\",{\"1\":{\"291\":1}}],[\"以下是主要的tcp连接状态及其转换\",{\"1\":{\"290\":1}}],[\"以下是几种常用的方法\",{\"1\":{\"218\":1}}],[\"以下是基于链表实现栈的示例代码\",{\"1\":{\"47\":1}}],[\"以下是用链表实现队列的代码\",{\"1\":{\"41\":1}}],[\"以及对数据进行统计\",{\"1\":{\"398\":1}}],[\"以及重命名表\",{\"1\":{\"398\":1}}],[\"以及判断是否需要扩容\",{\"1\":{\"32\":1}}],[\"以及支持快速添加和删除节点\",{\"1\":{\"25\":1}}],[\"以及之后的所有元素向后移动一位\",{\"1\":{\"9\":1}}],[\"算法中\",{\"1\":{\"25\":1}}],[\"算法\",{\"1\":{\"25\":1,\"71\":2}}],[\"llama3\",{\"1\":{\"420\":1}}],[\"llama\",{\"1\":{\"420\":1}}],[\"lucas\",{\"1\":{\"420\":2}}],[\"ls\",{\"1\":{\"319\":1}}],[\"lsp\",{\"1\":{\"118\":1}}],[\"languages\",{\"1\":{\"461\":1}}],[\"landis\",{\"1\":{\"95\":1}}],[\"last\",{\"1\":{\"290\":1,\"292\":1,\"293\":1,\"342\":2,\"343\":1}}],[\"lambda\",{\"1\":{\"286\":1}}],[\"launch\",{\"1\":{\"262\":8}}],[\"latch\",{\"1\":{\"243\":2}}],[\"layoutchanged\",{\"1\":{\"183\":1}}],[\"lazy\",{\"1\":{\"63\":1}}],[\"length\",{\"1\":{\"327\":1}}],[\"leaving\",{\"1\":{\"227\":2}}],[\"leavedays3\",{\"1\":{\"159\":2}}],[\"leavedays2\",{\"1\":{\"159\":2}}],[\"leavedays1\",{\"1\":{\"159\":2}}],[\"leave\",{\"1\":{\"159\":6}}],[\"leavehandler\",{\"1\":{\"159\":4}}],[\"leader\",{\"1\":{\"159\":4}}],[\"leaf\",{\"1\":{\"78\":1}}],[\"level\",{\"1\":{\"78\":1}}],[\"leftrotate\",{\"1\":{\"101\":1,\"104\":3}}],[\"left\",{\"1\":{\"77\":4,\"89\":1,\"97\":1,\"101\":2,\"392\":3}}],[\"locals\",{\"1\":{\"484\":1,\"487\":1}}],[\"localhost\",{\"1\":{\"420\":1}}],[\"local\",{\"1\":{\"420\":6}}],[\"location\",{\"1\":{\"397\":1}}],[\"lock通过raii技术方便了加锁和解锁调用\",{\"1\":{\"262\":1}}],[\"lock使用\",{\"1\":{\"257\":1}}],[\"lock类有unlock函数\",{\"1\":{\"257\":1}}],[\"lock更加轻量级\",{\"1\":{\"257\":1}}],[\"lock两种方式\",{\"1\":{\"257\":1}}],[\"lock相关\",{\"0\":{\"257\":1},\"1\":{\"254\":1}}],[\"lockfreequeue<int>\",{\"1\":{\"248\":1,\"249\":1}}],[\"lockfreequeue\",{\"1\":{\"248\":2,\"249\":4}}],[\"lock<std\",{\"1\":{\"237\":2,\"238\":1,\"257\":1,\"260\":3}}],[\"lock\",{\"1\":{\"236\":2,\"237\":4,\"238\":4,\"241\":2,\"245\":1,\"256\":2,\"257\":6,\"258\":6,\"260\":6,\"262\":2}}],[\"log\",{\"1\":{\"432\":4}}],[\"log2​\",{\"1\":{\"86\":1}}],[\"logn\",{\"1\":{\"61\":1,\"89\":1,\"90\":1,\"91\":3,\"93\":4,\"95\":2,\"110\":1}}],[\"loadfactor\",{\"1\":{\"61\":2,\"63\":2}}],[\"loadthres\",{\"1\":{\"61\":3,\"63\":2}}],[\"load\",{\"1\":{\"59\":1,\"248\":4,\"249\":8,\"250\":3,\"258\":1}}],[\"long\",{\"1\":{\"34\":2,\"69\":2,\"225\":1}}],[\"lru\",{\"1\":{\"25\":2}}],[\"limit\",{\"1\":{\"396\":2,\"397\":2}}],[\"like\",{\"1\":{\"388\":2,\"420\":1}}],[\"libraries\",{\"1\":{\"470\":2,\"471\":2}}],[\"library\",{\"1\":{\"470\":4}}],[\"libvirt\",{\"1\":{\"318\":2}}],[\"libstdcxx\",{\"1\":{\"503\":3}}],[\"libs\",{\"1\":{\"317\":1,\"447\":2,\"450\":2,\"451\":1,\"452\":2}}],[\"light\",{\"1\":{\"308\":1}}],[\"lightwavestyle\",{\"1\":{\"308\":1}}],[\"listen\",{\"1\":{\"229\":1,\"290\":1,\"292\":1,\"293\":1}}],[\"listnode\",{\"1\":{\"16\":4,\"18\":10,\"19\":3,\"20\":3,\"21\":2,\"22\":1,\"24\":4,\"41\":5,\"47\":5}}],[\"list\",{\"1\":{\"16\":1,\"26\":3,\"34\":3,\"47\":1}}],[\"link\",{\"1\":{\"470\":2,\"471\":1}}],[\"linkedliststack\",{\"1\":{\"47\":2}}],[\"linkedlistqueue\",{\"1\":{\"41\":2}}],[\"linkedlist\",{\"1\":{\"41\":2,\"47\":2}}],[\"linked\",{\"1\":{\"16\":1}}],[\"line\",{\"1\":{\"420\":1}}],[\"linux\",{\"0\":{\"280\":1,\"316\":1},\"1\":{\"216\":1,\"219\":1,\"297\":1,\"314\":2,\"316\":6,\"319\":2,\"474\":1},\"2\":{\"281\":1,\"306\":1,\"324\":1,\"493\":1,\"508\":1}}],[\"linux系统编程\",{\"1\":{\"2\":1}}],[\"浏览器开发者工具\",{\"1\":{\"347\":1}}],[\"浏览器的同源策略限制了跨域请求\",{\"1\":{\"338\":1}}],[\"浏览器的前进后退功能本质上是\",{\"1\":{\"52\":1}}],[\"浏览器的前进后退是否是双向链表实现\",{\"1\":{\"52\":1}}],[\"浏览器就会对上一个网页执行入栈\",{\"1\":{\"50\":1}}],[\"浏览器中的后退与前进\",{\"1\":{\"50\":1}}],[\"浏览器需要知道用户访问过的前一个和后一个网页\",{\"1\":{\"25\":1}}],[\"浏览器历史\",{\"1\":{\"25\":1}}],[\"bt\",{\"1\":{\"489\":1,\"499\":1,\"504\":1}}],[\"bword\",{\"1\":{\"407\":2}}],[\"bz2\",{\"1\":{\"317\":2,\"319\":1}}],[\"bzimage\",{\"1\":{\"316\":4,\"319\":4}}],[\"by\",{\"1\":{\"273\":1,\"301\":2,\"389\":2,\"390\":3,\"391\":1,\"397\":4}}],[\"between\",{\"1\":{\"388\":2}}],[\"bearer\",{\"1\":{\"329\":1}}],[\"be\",{\"1\":{\"269\":1,\"420\":1}}],[\"begindraw\",{\"1\":{\"308\":2}}],[\"begin\",{\"1\":{\"30\":2,\"57\":1,\"61\":1}}],[\"blocked\",{\"1\":{\"213\":1}}],[\"bluesquare\",{\"1\":{\"143\":2}}],[\"blue\",{\"1\":{\"143\":3,\"275\":4}}],[\"bluecolor\",{\"1\":{\"143\":1}}],[\"brew\",{\"1\":{\"459\":1}}],[\"breakpoints\",{\"1\":{\"321\":1,\"482\":1}}],[\"break\",{\"1\":{\"89\":1,\"91\":1,\"275\":3,\"482\":7,\"485\":1,\"488\":1,\"489\":1,\"498\":2,\"499\":1,\"504\":3}}],[\"branch\",{\"1\":{\"434\":1,\"438\":2,\"439\":10,\"440\":1}}],[\"brotli\",{\"1\":{\"350\":2}}],[\"browser\",{\"1\":{\"311\":8,\"420\":2}}],[\"bridge\",{\"1\":{\"141\":1,\"318\":1}}],[\"bfs\",{\"1\":{\"137\":3}}],[\"busybox\",{\"1\":{\"317\":5,\"319\":2}}],[\"bus\",{\"1\":{\"308\":1}}],[\"buswav\",{\"1\":{\"308\":1}}],[\"buf\",{\"1\":{\"227\":2}}],[\"buffer\",{\"1\":{\"137\":1,\"224\":4,\"229\":4,\"248\":5,\"249\":7}}],[\"bufferedstream\",{\"1\":{\"137\":4}}],[\"button\",{\"1\":{\"153\":5}}],[\"bug\",{\"1\":{\"118\":1}}],[\"build\",{\"1\":{\"111\":1,\"317\":2,\"467\":2}}],[\"bucketstmp\",{\"1\":{\"61\":2,\"63\":2}}],[\"buckets\",{\"1\":{\"58\":11,\"61\":11,\"63\":23}}],[\"bucket\",{\"1\":{\"58\":3,\"61\":12}}],[\"bst\",{\"1\":{\"89\":3,\"91\":3}}],[\"bad\",{\"1\":{\"328\":1}}],[\"barrier\",{\"1\":{\"242\":1}}],[\"bar\",{\"1\":{\"234\":6}}],[\"base为基类\",{\"1\":{\"205\":1}}],[\"base\",{\"1\":{\"205\":12}}],[\"balancefactor\",{\"1\":{\"98\":1,\"104\":6}}],[\"balance\",{\"1\":{\"98\":1}}],[\"balanced\",{\"1\":{\"85\":1,\"96\":1}}],[\"backtrace\",{\"1\":{\"484\":2,\"489\":1,\"490\":1,\"499\":1,\"504\":1}}],[\"backend\",{\"1\":{\"420\":1}}],[\"back\",{\"1\":{\"30\":5,\"48\":3,\"58\":3,\"61\":1,\"237\":1,\"242\":1,\"243\":1,\"269\":6,\"310\":1}}],[\"bin\",{\"1\":{\"317\":3,\"420\":7,\"473\":1,\"504\":2}}],[\"bind\",{\"1\":{\"229\":1}}],[\"binding\",{\"1\":{\"164\":1}}],[\"binarysearchtree\",{\"1\":{\"88\":1}}],[\"binary\",{\"1\":{\"77\":1,\"83\":1,\"84\":1,\"85\":1,\"87\":1,\"96\":1,\"317\":1}}],[\"bikefactory\",{\"1\":{\"150\":3}}],[\"bike\",{\"1\":{\"150\":4}}],[\"bitwav\",{\"1\":{\"308\":1}}],[\"bit\",{\"1\":{\"70\":4,\"308\":1}}],[\"bob\",{\"1\":{\"383\":2}}],[\"boost\",{\"1\":{\"471\":4}}],[\"boot\",{\"1\":{\"316\":2,\"317\":1}}],[\"book\",{\"2\":{\"196\":1}}],[\"bool\",{\"1\":{\"39\":1,\"41\":1,\"42\":1,\"45\":1,\"47\":1,\"48\":1,\"71\":1,\"159\":4,\"238\":1,\"248\":2,\"249\":2}}],[\"bol\",{\"1\":{\"71\":2}}],[\"b\",{\"1\":{\"25\":1,\"52\":4,\"111\":2,\"320\":1,\"321\":2,\"404\":1,\"406\":2,\"407\":4,\"412\":4,\"438\":1}}],[\"邻接表是表示图的一种常用方式\",{\"1\":{\"25\":1}}],[\"所需要的资源\",{\"1\":{\"244\":1}}],[\"所需的数据\",{\"1\":{\"167\":1}}],[\"所谓的合适时机\",{\"1\":{\"205\":1}}],[\"所有资源释放后\",{\"1\":{\"290\":1}}],[\"所有等待的线程被唤醒\",{\"1\":{\"243\":1}}],[\"所有等待的线程继续执行\",{\"1\":{\"242\":1}}],[\"所有自定义模型的基类\",{\"1\":{\"179\":1}}],[\"所有观察者都可以自动接收到通知\",{\"1\":{\"125\":1}}],[\"所有具体的观察者类实现该接口\",{\"1\":{\"124\":1}}],[\"所有依赖于它的观察者对象都会收到通知并自动更新\",{\"1\":{\"123\":1}}],[\"所有操作的时间复杂度将从\",{\"1\":{\"95\":1}}],[\"所有层的节点都被完全填满\",{\"1\":{\"83\":1}}],[\"所有后两位相等的\",{\"1\":{\"68\":1}}],[\"所有冲突的元素都会被放到一个链表中\",{\"1\":{\"25\":1}}],[\"所以weak\",{\"1\":{\"267\":1}}],[\"所以unique\",{\"1\":{\"266\":1}}],[\"所以条件变量都配合std\",{\"1\":{\"257\":1}}],[\"所以它使用的vptr必须是对于这个类的vtable\",{\"1\":{\"208\":1}}],[\"所以构造函数没有必要是虚函数\",{\"1\":{\"208\":1}}],[\"所以构造函数不能是虚函数\",{\"1\":{\"208\":1}}],[\"所以在调用基类的析构函数时\",{\"1\":{\"207\":1}}],[\"所以不在堆中\",{\"1\":{\"206\":1}}],[\"所以\",{\"1\":{\"34\":1,\"208\":1}}],[\"所以上述查找操作被称为\",{\"1\":{\"12\":1}}],[\"所以我们无须特意去修改它\",{\"1\":{\"10\":1}}],[\"链接库\",{\"1\":{\"470\":1}}],[\"链式地址通过将单个元素转化为链表\",{\"1\":{\"72\":1}}],[\"链式地址存在以下局限性\",{\"1\":{\"61\":1}}],[\"链式地址哈希表\",{\"1\":{\"61\":2}}],[\"链式地址\",{\"0\":{\"61\":1},\"1\":{\"60\":1,\"61\":1}}],[\"链式地址是解决哈希冲突的主流方案之一\",{\"1\":{\"25\":1}}],[\"链表则是另一个极端\",{\"1\":{\"86\":1}}],[\"链表则不然\",{\"1\":{\"21\":1}}],[\"链表过长会降低查询效率\",{\"1\":{\"72\":1}}],[\"链表会转换为红黑树以提升查找性能\",{\"1\":{\"66\":1}}],[\"链表包含节点指针\",{\"1\":{\"61\":1}}],[\"链表和数组都符合要求\",{\"1\":{\"40\":1}}],[\"链表由节点组成\",{\"1\":{\"34\":1}}],[\"链表通过更改引用\",{\"1\":{\"33\":1}}],[\"链表天然可以看作一个列表\",{\"1\":{\"26\":1}}],[\"链表中的每个元素都代表与该顶点相连的其他顶点\",{\"1\":{\"25\":1}}],[\"链表典型应用\",{\"0\":{\"25\":1}}],[\"链表删除节点\",{\"1\":{\"20\":1}}],[\"链表插入节点示例\",{\"1\":{\"19\":1}}],[\"链表常用操作\",{\"0\":{\"17\":1}}],[\"链表比数组占用更多的内存空间\",{\"1\":{\"16\":1}}],[\"链表节点所占用的内存空间比数组元素更大\",{\"1\":{\"51\":1}}],[\"链表节点结构体\",{\"1\":{\"16\":1}}],[\"链表节点\",{\"1\":{\"16\":1}}],[\"链表的扩容非常灵活\",{\"1\":{\"49\":1}}],[\"链表的\",{\"1\":{\"34\":1}}],[\"链表的首个节点被称为\",{\"1\":{\"16\":1}}],[\"链表的组成单位是节点\",{\"1\":{\"16\":1}}],[\"链表的设计使得各个节点可以分散存储在内存各处\",{\"1\":{\"16\":1}}],[\"链表定义与存储方式\",{\"1\":{\"16\":1,\"34\":1}}],[\"链表\",{\"0\":{\"16\":1,\"23\":1},\"1\":{\"16\":1,\"23\":1,\"45\":1,\"56\":4,\"73\":1,\"86\":2},\"2\":{\"36\":1}}],[\"上\",{\"1\":{\"327\":1}}],[\"上执行代码\",{\"1\":{\"213\":1}}],[\"上图中展示了虚表和虚表指针在基类对象和派生类对象中的模型\",{\"1\":{\"205\":1}}],[\"上下文类\",{\"1\":{\"130\":1,\"131\":1}}],[\"上一个节点\",{\"1\":{\"24\":1}}],[\"上述代码中\",{\"1\":{\"234\":1,\"255\":1}}],[\"上述\",{\"1\":{\"16\":1}}],[\"即构建文件和源文件分离\",{\"1\":{\"460\":1}}],[\"即表示这个字符是可选的\",{\"1\":{\"409\":1}}],[\"即在用户滚动到相应位置时才加载资源\",{\"1\":{\"351\":1}}],[\"即在执行时不会被其他线程打断\",{\"1\":{\"246\":1}}],[\"即等效于\",{\"1\":{\"298\":1}}],[\"即避免临时对象的拷贝构造和析构\",{\"1\":{\"268\":1}}],[\"即使左表中没有匹配的行\",{\"1\":{\"392\":1}}],[\"即使右表中没有匹配的行\",{\"1\":{\"392\":1}}],[\"即使守护进程尝试读取或写入标准输入输出\",{\"1\":{\"221\":1}}],[\"即使对象的内容发生了变化\",{\"1\":{\"71\":1}}],[\"即进程描述符\",{\"1\":{\"217\":1}}],[\"即进程控制块\",{\"1\":{\"216\":1}}],[\"即大小是在编译时期确定的\",{\"1\":{\"206\":1}}],[\"即虚函数表的大小可以确定\",{\"1\":{\"206\":1}}],[\"即虚函数表的元素是指向类成员函数的指针\",{\"1\":{\"206\":1}}],[\"即虚函数表不是函数\",{\"1\":{\"206\":1}}],[\"即全局仅有一个\",{\"1\":{\"206\":1}}],[\"即vptr\",{\"1\":{\"205\":1}}],[\"即被修饰变量不可以被修改\",{\"1\":{\"203\":1}}],[\"即指向第二个元素a\",{\"1\":{\"200\":1}}],[\"即一个类只负责一项职责\",{\"1\":{\"118\":1}}],[\"即它们在内存中的位置是否相同\",{\"1\":{\"111\":1}}],[\"即所经过的\",{\"1\":{\"97\":1}}],[\"即同样满足条件\",{\"1\":{\"87\":1}}],[\"即节点引用\",{\"1\":{\"78\":1}}],[\"即某些位置比其他位置更容易被占用\",{\"1\":{\"64\":1}}],[\"即\",{\"1\":{\"64\":1}}],[\"即当哈希冲突比较严重时\",{\"1\":{\"60\":1}}],[\"即将元素添加至队尾\",{\"1\":{\"39\":1}}],[\"即新来的人不断加入队列尾部\",{\"1\":{\"38\":1}}],[\"即是本文描述的\",{\"1\":{\"28\":1}}],[\"即前面介绍的普通链表\",{\"1\":{\"24\":1}}],[\"即可得到左旋的实现代码\",{\"1\":{\"101\":1}}],[\"即可访问链表头节点\",{\"1\":{\"61\":1}}],[\"即可\",{\"1\":{\"19\":1,\"20\":1,\"63\":1}}],[\"可视化工具\",{\"1\":{\"413\":1}}],[\"可阻塞一个或多个线程\",{\"1\":{\"262\":1}}],[\"可用于实现单例\",{\"1\":{\"262\":1}}],[\"可用于替代\",{\"1\":{\"70\":1}}],[\"可重入\",{\"1\":{\"256\":1}}],[\"可是\",{\"1\":{\"208\":1}}],[\"可测试性强\",{\"1\":{\"171\":1}}],[\"可能需要自动加载符号文件或其他调试信息\",{\"1\":{\"500\":1}}],[\"可能需要在库加载后设置断点\",{\"1\":{\"488\":1}}],[\"可能会忘记将更新提交到主仓库\",{\"1\":{\"454\":1}}],[\"可能会导致系统无法创建新进程\",{\"1\":{\"217\":1}}],[\"可能导致调试过程变得更加复杂\",{\"1\":{\"172\":1}}],[\"可能导致二叉树退化为下图所示的链表\",{\"1\":{\"93\":1}}],[\"可能在经过哈希函数后得到相同的数组索引\",{\"1\":{\"72\":1}}],[\"可实现基于内容生成哈希值\",{\"1\":{\"71\":1}}],[\"可通过数组或链表来实现\",{\"1\":{\"51\":1}}],[\"可以极大地提升开发体验\",{\"1\":{\"505\":1}}],[\"可以简化常用命令的输入\",{\"1\":{\"499\":1}}],[\"可以帮助开发者深入分析和调试程序\",{\"1\":{\"490\":1}}],[\"可以帮助开发人员调试和分析内核的行为\",{\"1\":{\"314\":1}}],[\"可以调试\",{\"1\":{\"490\":1}}],[\"可以调用线程对象的detach函数\",{\"1\":{\"255\":1}}],[\"可以调用线程对象的\",{\"1\":{\"234\":1}}],[\"可以查看线程状态\",{\"1\":{\"489\":1}}],[\"可以为不同平台生成相应的构建系统\",{\"1\":{\"460\":1}}],[\"可以让你更好地组织代码\",{\"1\":{\"454\":1}}],[\"可以让你的提交历史保持整洁\",{\"1\":{\"441\":1}}],[\"可以将远程仓库复制到本地\",{\"1\":{\"426\":1}}],[\"可以根据实际需求设计复杂的匹配规则\",{\"1\":{\"412\":1}}],[\"可以根据二叉搜索树的性质来查找\",{\"1\":{\"89\":1}}],[\"可以重复一次或多次\",{\"1\":{\"404\":1}}],[\"可以匹配两位\",{\"1\":{\"410\":1}}],[\"可以匹配四位数字\",{\"1\":{\"410\":1}}],[\"可以匹配空字符串\",{\"1\":{\"409\":1}}],[\"可以匹配空格或换行符\",{\"1\":{\"405\":1}}],[\"可以匹配一个或多个字母\",{\"1\":{\"405\":1}}],[\"可以匹配任何非空白字符\",{\"1\":{\"405\":1}}],[\"可以匹配任何非字母或非数字字符\",{\"1\":{\"405\":1}}],[\"可以匹配任何非数字字符\",{\"1\":{\"405\":1}}],[\"可以匹配任意三位数字\",{\"1\":{\"405\":1}}],[\"可以匹配任意元音字母\",{\"1\":{\"404\":1}}],[\"可以匹配字符\",{\"1\":{\"404\":1}}],[\"可以匹配\",{\"1\":{\"404\":2,\"409\":2}}],[\"可以保留所有行\",{\"1\":{\"395\":1}}],[\"可以保持系统的灵活性\",{\"1\":{\"143\":1}}],[\"可以保持代码的开放封闭原则\",{\"1\":{\"137\":1}}],[\"可以保持代码的灵活性和可扩展性\",{\"1\":{\"131\":1}}],[\"可以指定升序\",{\"1\":{\"389\":1}}],[\"可以逐步提高对\",{\"1\":{\"366\":1}}],[\"可以定义私有的状态码或方法\",{\"1\":{\"358\":1}}],[\"可以提高安全性\",{\"1\":{\"354\":1}}],[\"可以提高应用程序的安全性\",{\"1\":{\"286\":1}}],[\"可以设置断点在\",{\"1\":{\"320\":1}}],[\"可以防止僵尸进程的产生\",{\"1\":{\"303\":1}}],[\"可以与\",{\"1\":{\"303\":1}}],[\"可以识别出哪些连接处于非正常状态\",{\"1\":{\"294\":1}}],[\"可以用来加载调试辅助工具或插件\",{\"1\":{\"495\":1}}],[\"可以用来存储和管理数据\",{\"1\":{\"369\":1}}],[\"可以用\",{\"1\":{\"264\":2}}],[\"可以用于等待和管理某个特定子进程的状态变化\",{\"1\":{\"303\":1}}],[\"可以用于不同主机之间的进程通信\",{\"1\":{\"229\":1}}],[\"可以用于无亲缘关系的进程之间\",{\"1\":{\"224\":1}}],[\"可以很方便的获取线程函数的返回值\",{\"1\":{\"261\":1}}],[\"可以很容易地增加新的形状或颜色\",{\"1\":{\"143\":1}}],[\"可以手动释放锁\",{\"1\":{\"257\":1}}],[\"可以动态的释放锁资源\",{\"1\":{\"257\":1}}],[\"可以递归使用\",{\"1\":{\"256\":1}}],[\"可以选择不同的\",{\"1\":{\"230\":1}}],[\"可以使用常规调试命令\",{\"1\":{\"490\":1}}],[\"可以使用生成的构建系统工具进行编译\",{\"1\":{\"469\":1}}],[\"可以使用一系列宏来解析这个状态值\",{\"1\":{\"300\":1}}],[\"可以使用std\",{\"1\":{\"261\":2}}],[\"可以使用\",{\"1\":{\"221\":1,\"372\":1,\"448\":1,\"481\":1,\"505\":1}}],[\"可以使用数组作为查找表\",{\"1\":{\"15\":1}}],[\"可以有效地管理并发进程\",{\"1\":{\"304\":1}}],[\"可以有效地管理对象之间的依赖关系\",{\"1\":{\"125\":1}}],[\"可以有效避免僵尸进程的产生\",{\"1\":{\"218\":1}}],[\"可以通过启动\",{\"1\":{\"496\":1}}],[\"可以通过以下方式启动\",{\"1\":{\"480\":1}}],[\"可以通过\",{\"1\":{\"474\":1,\"501\":1,\"503\":1}}],[\"可以通过添加自定义的请求头或响应头来传递额外的信息\",{\"1\":{\"358\":1}}],[\"可以通过调用\",{\"1\":{\"218\":1}}],[\"可以通过进一步将链表转换为红黑树来提高效率\",{\"1\":{\"72\":1}}],[\"可以取代宏的功能\",{\"1\":{\"201\":1}}],[\"可以组成责任链\",{\"1\":{\"160\":1}}],[\"可以生产不同操作系统环境下的按钮和文本框\",{\"1\":{\"153\":1}}],[\"可以生产汽车和自行车\",{\"1\":{\"150\":1}}],[\"可以独立地扩展抽象类和实现类\",{\"1\":{\"143\":1}}],[\"可以是\",{\"1\":{\"298\":1}}],[\"可以是抽象类或接口\",{\"1\":{\"136\":1}}],[\"可以是整数\",{\"1\":{\"71\":1}}],[\"可以避免使用条件语句来选择不同的算法\",{\"1\":{\"131\":1}}],[\"可以理解为资源的子节点的资源释放吗\",{\"1\":{\"111\":1}}],[\"可以观察到\",{\"1\":{\"101\":1}}],[\"可以直接删除\",{\"1\":{\"91\":1}}],[\"可以充分发挥二叉树\",{\"1\":{\"86\":1}}],[\"可以减少因取模操作而产生的周期性模式\",{\"1\":{\"69\":1}}],[\"可以最大化地保证哈希值的均匀分布\",{\"1\":{\"69\":1}}],[\"可以产生均匀分布的输出\",{\"1\":{\"68\":1}}],[\"可以看到当前分支的状态信息\",{\"1\":{\"431\":1}}],[\"可以看到\",{\"1\":{\"42\":1}}],[\"可以在\",{\"1\":{\"498\":1}}],[\"可以在启动时自动运行脚本\",{\"1\":{\"495\":1}}],[\"可以在不同帧之间切换\",{\"1\":{\"487\":1}}],[\"可以在不提交代码的情况下保存未完成的工作\",{\"1\":{\"435\":1}}],[\"可以在变量值改变时自动暂停程序执行\",{\"1\":{\"485\":1}}],[\"可以在程序运行时执行命令以分析程序行为\",{\"1\":{\"485\":1}}],[\"可以在服务器端配置反向代理或缓存服务器\",{\"1\":{\"344\":1}}],[\"可以在内核的特定位置设置断点\",{\"1\":{\"320\":1}}],[\"可以在一端添加元素\",{\"1\":{\"40\":1}}],[\"可以在代码中动态分配\",{\"1\":{\"34\":1}}],[\"可以朝两个方向遍历链表\",{\"1\":{\"24\":1}}],[\"可灵活扩展\",{\"1\":{\"23\":1}}],[\"下载安装程序\",{\"1\":{\"459\":1}}],[\"下表展示了在实际应用中常见的哈希算法\",{\"1\":{\"70\":1}}],[\"下表总结了数组和链表的各项特点并对比了操作效率\",{\"1\":{\"23\":1}}],[\"下\",{\"1\":{\"68\":1}}],[\"下面将详细介绍如何设置和使用\",{\"1\":{\"314\":1}}],[\"下面阐述实现多态的过程\",{\"1\":{\"205\":1}}],[\"下面展示了一个简单的\",{\"1\":{\"173\":1}}],[\"下面是一个典型的\",{\"1\":{\"504\":1}}],[\"下面是一个简单的无锁单生产者单消费者队列的实现示例\",{\"1\":{\"248\":1}}],[\"下面是一个用\",{\"1\":{\"159\":1,\"219\":1}}],[\"下面是一个用c++实现的商品计算折扣的策略模式事例\",{\"1\":{\"131\":1}}],[\"下面是各个部分的详细解释\",{\"1\":{\"164\":1}}],[\"下面详细介绍这些旋转操作\",{\"1\":{\"99\":1}}],[\"下面举几个例子\",{\"1\":{\"66\":1}}],[\"下面以线性探测为例\",{\"1\":{\"62\":1}}],[\"下图展示的四种失衡情况与上述案例逐个对应\",{\"1\":{\"104\":1}}],[\"下图展示了二叉树的理想结构与退化结构\",{\"1\":{\"86\":1}}],[\"下图展示了开放寻址\",{\"1\":{\"63\":1}}],[\"下图展示了一个链式地址哈希表的例子\",{\"1\":{\"61\":1}}],[\"下图展示了数组的主要概念和存储方式\",{\"1\":{\"5\":1}}],[\"下图给出了一个示例\",{\"1\":{\"81\":1}}],[\"下图以\",{\"1\":{\"58\":1}}],[\"下一个节点\",{\"1\":{\"24\":1}}],[\"遍历二叉树有前\",{\"1\":{\"111\":1}}],[\"遍历至\",{\"1\":{\"90\":1}}],[\"遍历桶\",{\"1\":{\"61\":3}}],[\"遍历哈希表\",{\"1\":{\"57\":1}}],[\"遍历键和遍历值\",{\"1\":{\"57\":1}}],[\"遍历键值对\",{\"1\":{\"57\":2}}],[\"遍历列表\",{\"0\":{\"31\":1}}],[\"遍历链表删除节点\",{\"1\":{\"41\":1,\"47\":1}}],[\"遍历链表\",{\"1\":{\"22\":1}}],[\"遍历数组\",{\"0\":{\"11\":1},\"1\":{\"11\":1}}],[\"hook\",{\"1\":{\"502\":2,\"504\":1}}],[\"host\",{\"1\":{\"420\":1}}],[\"host=host\",{\"1\":{\"420\":1}}],[\"host=0\",{\"1\":{\"420\":1}}],[\"homebrew\",{\"1\":{\"459\":1}}],[\"home\",{\"1\":{\"420\":2,\"496\":1,\"504\":3}}],[\"hold\",{\"1\":{\"244\":1}}],[\"href=\",{\"1\":{\"411\":1}}],[\"hpack\",{\"1\":{\"334\":1}}],[\"h>\",{\"1\":{\"218\":3,\"220\":6,\"224\":1,\"225\":2,\"226\":2,\"227\":2,\"228\":1,\"229\":6,\"301\":2}}],[\"http\",{\"0\":{\"325\":1,\"326\":1,\"328\":1,\"329\":1,\"331\":1,\"332\":1,\"333\":2,\"334\":1,\"335\":1,\"341\":1,\"345\":1,\"349\":1,\"352\":2,\"353\":1,\"357\":1,\"358\":1,\"360\":1,\"363\":1,\"365\":1},\"1\":{\"327\":4,\"330\":1,\"333\":2,\"334\":1,\"337\":1,\"346\":1,\"347\":3,\"348\":1,\"351\":1,\"352\":2,\"355\":1,\"356\":1,\"358\":1,\"364\":2,\"365\":1,\"366\":3,\"411\":1,\"420\":1},\"2\":{\"368\":1}}],[\"https\",{\"0\":{\"337\":1},\"1\":{\"173\":1,\"316\":1,\"317\":1,\"330\":1,\"420\":1,\"426\":1,\"427\":2,\"447\":1}}],[\"htons\",{\"1\":{\"229\":2}}],[\"html\",{\"1\":{\"166\":1,\"173\":1,\"327\":1,\"329\":2,\"412\":2}}],[\"h=2\",{\"1\":{\"111\":1}}],[\"hi\",{\"1\":{\"111\":2}}],[\"h+1\",{\"1\":{\"86\":1}}],[\"h\",{\"1\":{\"83\":1,\"86\":2}}],[\"heng\",{\"1\":{\"285\":4}}],[\"height\",{\"1\":{\"78\":2,\"97\":4,\"98\":2,\"111\":2}}],[\"helloworld\",{\"1\":{\"461\":1,\"465\":1}}],[\"hello\",{\"1\":{\"71\":2,\"224\":1,\"225\":1,\"226\":1,\"229\":1,\"461\":1,\"464\":1,\"465\":1,\"469\":1,\"470\":1,\"471\":1,\"472\":1,\"473\":1}}],[\"head~1\",{\"1\":{\"436\":2}}],[\"head～n\",{\"1\":{\"430\":1}}],[\"header\",{\"1\":{\"358\":1}}],[\"headerdata\",{\"1\":{\"185\":1}}],[\"head\",{\"1\":{\"21\":5,\"22\":5,\"248\":5,\"249\":11,\"250\":1,\"327\":1}}],[\"hard\",{\"1\":{\"436\":2}}],[\"hardware\",{\"1\":{\"255\":1}}],[\"having\",{\"1\":{\"390\":2,\"393\":1,\"397\":1}}],[\"haproxy\",{\"1\":{\"354\":1}}],[\"handle可用于pthread相关操作\",{\"1\":{\"255\":1}}],[\"handle\",{\"1\":{\"255\":3}}],[\"handlerequest\",{\"1\":{\"159\":4}}],[\"handler\",{\"1\":{\"158\":2,\"159\":2,\"218\":2}}],[\"has\",{\"1\":{\"243\":1,\"272\":4}}],[\"hash>\",{\"1\":{\"452\":1}}],[\"hashdos\",{\"1\":{\"71\":1}}],[\"hashdec\",{\"1\":{\"71\":1}}],[\"hashstr\",{\"1\":{\"71\":1}}],[\"hash<string>\",{\"1\":{\"71\":1}}],[\"hash<double>\",{\"1\":{\"71\":1}}],[\"hash<bool>\",{\"1\":{\"71\":1}}],[\"hash<int>\",{\"1\":{\"71\":1}}],[\"hashbol\",{\"1\":{\"71\":1}}],[\"hashnum\",{\"1\":{\"71\":1}}],[\"hashmap\",{\"1\":{\"66\":1,\"72\":1}}],[\"hashmapopenaddressing\",{\"1\":{\"63\":2}}],[\"hashmapchaining\",{\"1\":{\"61\":2}}],[\"hashfunc\",{\"1\":{\"58\":4,\"61\":4,\"63\":2}}],[\"hash\",{\"1\":{\"56\":1,\"58\":4,\"59\":1,\"67\":3,\"69\":5,\"71\":2},\"2\":{\"75\":1}}],[\"hackcpp\",{\"1\":{\"3\":1}}],[\"轮循环内查找任意节点\",{\"1\":{\"93\":1}}],[\"轮\",{\"1\":{\"21\":1}}],[\"个线程\",{\"1\":{\"489\":1}}],[\"个十六进制值\",{\"1\":{\"484\":1}}],[\"个字母或数字的密码\",{\"1\":{\"412\":1}}],[\"个部门\",{\"1\":{\"397\":1}}],[\"个键值对\",{\"1\":{\"66\":1}}],[\"个桶\",{\"1\":{\"58\":1}}],[\"个学生\",{\"1\":{\"56\":1}}],[\"个节点对象也分散存储在内存各处\",{\"1\":{\"34\":1}}],[\"个节点需要循环\",{\"1\":{\"21\":1}}],[\"个元素的地址是相连的\",{\"1\":{\"34\":1}}],[\"个人博客\",{\"1\":{\"3\":1}}],[\"也不会有任何操作\",{\"1\":{\"221\":1}}],[\"也不是为它的派生类\",{\"1\":{\"208\":1}}],[\"也不同意是虚函数\",{\"1\":{\"208\":1}}],[\"也没有必要成为虚函数\",{\"1\":{\"208\":1}}],[\"也就是内存空间还没有\",{\"1\":{\"208\":1}}],[\"也就是说\",{\"1\":{\"21\":1,\"267\":1}}],[\"也称平衡二叉搜索树\",{\"1\":{\"110\":1}}],[\"也能使树重新变为\",{\"1\":{\"99\":1}}],[\"也是平衡二叉树\",{\"1\":{\"96\":1}}],[\"也常作为哈希表扩容的触发条件\",{\"1\":{\"59\":1}}],[\"也会出现很多空位\",{\"1\":{\"34\":1}}],[\"也可以重入\",{\"1\":{\"262\":1}}],[\"也可以\",{\"1\":{\"34\":1}}],[\"也可以直接遍历各元素\",{\"1\":{\"31\":1}}],[\"也可以直接遍历获取数组中的每个元素\",{\"1\":{\"11\":1}}],[\"也可能会使用环形链表\",{\"1\":{\"25\":1}}],[\"也可用于实现各种复杂数据结构\",{\"1\":{\"15\":1}}],[\"程序暂停时使用\",{\"1\":{\"488\":1}}],[\"程序执行到断点处后自动删除\",{\"1\":{\"482\":1}}],[\"程序运行会自动调用构造函数\",{\"1\":{\"205\":1}}],[\"程序运行时\",{\"1\":{\"33\":1}}],[\"程序可能误判这些元素不存在\",{\"1\":{\"63\":1}}],[\"程序内存管理\",{\"1\":{\"50\":1}}],[\"程序需要从头节点出发\",{\"1\":{\"21\":1}}],[\"程序难以保证数组之后的内存空间是可用的\",{\"1\":{\"13\":1}}],[\"访问变量\",{\"1\":{\"470\":1}}],[\"访问栈顶元素\",{\"1\":{\"45\":2,\"47\":1,\"48\":1}}],[\"访问队首元素\",{\"1\":{\"39\":2,\"41\":1,\"42\":1}}],[\"访问索引\",{\"1\":{\"29\":1}}],[\"访问链表中索引为\",{\"1\":{\"21\":1}}],[\"访问链表的第\",{\"1\":{\"21\":1}}],[\"访问节点\",{\"0\":{\"21\":1}}],[\"访问元素\",{\"0\":{\"8\":1,\"29\":1},\"1\":{\"23\":1,\"29\":1}}],[\"只回退提交\",{\"1\":{\"436\":1}}],[\"只匹配第一个标签\",{\"1\":{\"411\":1}}],[\"只能匹配以\",{\"1\":{\"404\":2}}],[\"只能用于有亲缘关系的进程\",{\"1\":{\"224\":1}}],[\"只返回两个表中匹配的行\",{\"1\":{\"392\":1}}],[\"只返回\",{\"1\":{\"387\":1}}],[\"只是监视\",{\"1\":{\"264\":1}}],[\"只是在特定使用场景下时间效率变高了\",{\"1\":{\"73\":1}}],[\"只要其中一张表中有匹配的行\",{\"1\":{\"392\":1}}],[\"只要求操作是原子的\",{\"1\":{\"250\":1}}],[\"只要保证程序的逻辑是正确的就行\",{\"1\":{\"34\":1}}],[\"只可以在当前文件访问\",{\"1\":{\"198\":1}}],[\"只关注界面展示\",{\"1\":{\"169\":1}}],[\"只有在高频添加\",{\"1\":{\"93\":1}}],[\"只有最底层的节点未被填满\",{\"1\":{\"84\":1}}],[\"只有不可变对象是可哈希的\",{\"1\":{\"72\":1}}],[\"只有不可变对象才可作为哈希表的\",{\"1\":{\"71\":1}}],[\"只需增加一个具体策略类\",{\"1\":{\"131\":1}}],[\"只需将头节点从链表中删除即可\",{\"1\":{\"47\":1}}],[\"只需将\",{\"1\":{\"42\":1}}],[\"只需改变一个节点的引用\",{\"1\":{\"20\":1}}],[\"只用前面一部分\",{\"1\":{\"10\":1}}],[\"相当于\",{\"1\":{\"405\":4,\"443\":1}}],[\"相等\",{\"1\":{\"249\":2}}],[\"相同\",{\"1\":{\"200\":1}}],[\"相应地\",{\"1\":{\"101\":1}}],[\"相较线性探测更不易产生聚集\",{\"1\":{\"72\":1}}],[\"相较\",{\"1\":{\"70\":1}}],[\"相较于\",{\"1\":{\"109\":1}}],[\"相较于数组\",{\"1\":{\"30\":1}}],[\"相较于单向链表\",{\"1\":{\"24\":1}}],[\"相关信息\",{\"1\":{\"65\":1,\"71\":1,\"78\":1,\"98\":1,\"254\":1,\"264\":1}}],[\"相对地\",{\"1\":{\"34\":1}}],[\"相比之下\",{\"1\":{\"19\":1,\"51\":1}}],[\"相连接\",{\"1\":{\"16\":1}}],[\"pc\",{\"1\":{\"484\":1,\"502\":1}}],[\"play\",{\"1\":{\"311\":3}}],[\"placeholder=\",{\"1\":{\"173\":1}}],[\"ptr是否为空指针\",{\"1\":{\"267\":1}}],[\"ptr是一个弱引用\",{\"1\":{\"267\":1}}],[\"ptr不保证它指向的内存一定是有效的\",{\"1\":{\"267\":1}}],[\"ptr不支持普通的拷贝和赋值操作\",{\"1\":{\"266\":1}}],[\"ptr引用该内存\",{\"1\":{\"267\":1}}],[\"ptr析构了之后\",{\"1\":{\"267\":1}}],[\"ptr同时引用\",{\"1\":{\"267\":1}}],[\"ptr和weak\",{\"1\":{\"267\":1}}],[\"ptr管理的对象而不影响所指对象的生命周期\",{\"1\":{\"267\":1}}],[\"ptr而引入的一种智能指针\",{\"1\":{\"267\":1}}],[\"ptr打破环形引用\",{\"1\":{\"267\":1}}],[\"ptr都会指向相同的资源\",{\"1\":{\"266\":1}}],[\"ptr将会把所有权全部从源指针转移给目标指针\",{\"1\":{\"266\":1}}],[\"ptr总是拥有它所指向的资源\",{\"1\":{\"266\":1}}],[\"ptr采用的是独享所有权语义\",{\"1\":{\"266\":1}}],[\"ptr\",{\"1\":{\"264\":8,\"266\":1,\"267\":1}}],[\"ptr<leavehandler>\",{\"1\":{\"159\":5}}],[\"ptr<guifactory>\",{\"1\":{\"153\":1}}],[\"ptr<textbox>\",{\"1\":{\"153\":5}}],[\"ptr<button>\",{\"1\":{\"153\":5}}],[\"ptr<vehiclefactory>\",{\"1\":{\"150\":2}}],[\"ptr<vehicle>\",{\"1\":{\"150\":5}}],[\"ptr<shape>\",{\"1\":{\"143\":2}}],[\"ptr<color>\",{\"1\":{\"143\":6}}],[\"postman\",{\"1\":{\"347\":1}}],[\"post\",{\"1\":{\"327\":1,\"328\":1,\"331\":2,\"346\":1,\"355\":1}}],[\"pool\",{\"1\":{\"309\":2}}],[\"pointer\",{\"1\":{\"484\":1}}],[\"point\",{\"1\":{\"242\":2,\"243\":4}}],[\"pop\",{\"1\":{\"39\":2,\"41\":2,\"42\":1,\"45\":3,\"47\":2,\"48\":3,\"435\":1}}],[\"pipe\",{\"1\":{\"224\":1}}],[\"pipes\",{\"1\":{\"224\":2}}],[\"pid2\",{\"1\":{\"218\":2}}],[\"pid\",{\"1\":{\"218\":14,\"220\":8,\"224\":3,\"298\":9,\"299\":1,\"301\":7,\"302\":3,\"303\":1}}],[\"p>\",{\"1\":{\"173\":1}}],[\"permanently\",{\"1\":{\"328\":1}}],[\"perfect\",{\"1\":{\"83\":1}}],[\"peek\",{\"1\":{\"39\":1,\"41\":2,\"42\":2,\"45\":2}}],[\"pagination\",{\"1\":{\"501\":1,\"504\":1}}],[\"package\",{\"1\":{\"471\":2}}],[\"packaged\",{\"1\":{\"261\":7,\"262\":1}}],[\"path=\",{\"1\":{\"420\":1}}],[\"path\",{\"1\":{\"330\":1,\"500\":2,\"503\":3,\"504\":1}}],[\"patch\",{\"1\":{\"327\":1}}],[\"pattern\",{\"1\":{\"123\":1,\"129\":1,\"135\":1,\"141\":1,\"157\":1}}],[\"passive\",{\"1\":{\"290\":1}}],[\"params\",{\"1\":{\"262\":2}}],[\"parent\",{\"1\":{\"77\":1,\"181\":2,\"185\":4,\"224\":1,\"225\":1,\"226\":1,\"227\":2}}],[\"pauses\",{\"1\":{\"234\":2}}],[\"pause\",{\"1\":{\"218\":1}}],[\"painter\",{\"1\":{\"181\":4}}],[\"paint\",{\"1\":{\"181\":1}}],[\"pairset\",{\"1\":{\"58\":5}}],[\"pair\",{\"1\":{\"58\":24,\"61\":22,\"63\":21,\"269\":1}}],[\"pull\",{\"1\":{\"443\":2,\"450\":1}}],[\"pub\",{\"1\":{\"316\":1}}],[\"public\",{\"1\":{\"41\":1,\"42\":1,\"47\":1,\"48\":1,\"58\":2,\"61\":1,\"63\":1,\"111\":3,\"125\":4,\"131\":6,\"137\":11,\"143\":10,\"150\":10,\"153\":15,\"159\":7,\"181\":2,\"185\":2,\"205\":4,\"241\":1,\"248\":1,\"249\":1,\"255\":1,\"260\":1,\"285\":1,\"308\":9,\"309\":2,\"310\":2,\"311\":11}}],[\"put\",{\"1\":{\"58\":1,\"61\":2,\"63\":2,\"327\":1,\"361\":1}}],[\"push\",{\"1\":{\"30\":5,\"39\":6,\"41\":2,\"42\":1,\"45\":7,\"47\":2,\"48\":3,\"58\":3,\"61\":1,\"237\":1,\"269\":3,\"310\":1,\"444\":2}}],[\"project\",{\"1\":{\"461\":2,\"463\":1,\"465\":1,\"504\":3}}],[\"proc\",{\"1\":{\"317\":4}}],[\"proceeding\",{\"1\":{\"242\":1,\"243\":1}}],[\"process\",{\"1\":{\"216\":1,\"224\":1,\"225\":2,\"226\":1,\"227\":4,\"301\":3}}],[\"prom\",{\"1\":{\"261\":3}}],[\"promise更高级的东西\",{\"1\":{\"262\":1}}],[\"promise\",{\"1\":{\"261\":1}}],[\"promise包装的是一个值\",{\"1\":{\"261\":1}}],[\"promise<int>\",{\"1\":{\"261\":1}}],[\"promise与std\",{\"1\":{\"261\":1}}],[\"promise用来包装一个值\",{\"1\":{\"261\":1}}],[\"promise和std\",{\"1\":{\"261\":2}}],[\"produced\",{\"1\":{\"248\":1,\"249\":1}}],[\"producer\",{\"1\":{\"248\":2,\"249\":3}}],[\"product\",{\"1\":{\"149\":2,\"152\":2}}],[\"programming\",{\"1\":{\"245\":1}}],[\"progress\",{\"1\":{\"125\":2}}],[\"progfile\",{\"1\":{\"225\":1}}],[\"proxymodel\",{\"1\":{\"186\":4}}],[\"proxy\",{\"1\":{\"186\":1}}],[\"protected\",{\"1\":{\"143\":1,\"159\":1,\"285\":2,\"286\":2,\"308\":3,\"311\":1}}],[\"pretty\",{\"1\":{\"495\":1,\"501\":1,\"503\":5,\"504\":4}}],[\"prefer\",{\"1\":{\"420\":1}}],[\"preferenceobserver\",{\"1\":{\"310\":2}}],[\"preference\",{\"1\":{\"310\":1}}],[\"preemption\",{\"1\":{\"244\":1}}],[\"presenter\",{\"1\":{\"169\":3}}],[\"presentation\",{\"1\":{\"163\":1}}],[\"pre\",{\"1\":{\"90\":6,\"91\":5}}],[\"prev\",{\"1\":{\"24\":2}}],[\"priters\",{\"1\":{\"503\":1}}],[\"primary\",{\"1\":{\"376\":1}}],[\"primer\",{\"1\":{\"194\":1}}],[\"price\",{\"1\":{\"131\":7}}],[\"printer\",{\"1\":{\"503\":1}}],[\"printers\",{\"1\":{\"495\":1,\"503\":8,\"504\":5}}],[\"printf\",{\"1\":{\"502\":1,\"504\":1}}],[\"prints\",{\"1\":{\"275\":1}}],[\"print\",{\"1\":{\"58\":1,\"61\":1,\"63\":1,\"236\":2,\"238\":2,\"321\":1,\"484\":3,\"490\":1,\"501\":1,\"504\":1}}],[\"private\",{\"1\":{\"41\":1,\"42\":1,\"47\":1,\"48\":1,\"58\":1,\"61\":1,\"63\":1,\"111\":3,\"125\":1,\"137\":4,\"248\":1,\"255\":1,\"260\":1,\"285\":1,\"308\":2,\"310\":1,\"311\":1,\"472\":1}}],[\"p\",{\"1\":{\"19\":5,\"20\":7,\"34\":6,\"81\":5,\"173\":1,\"240\":3,\"420\":1}}],[\"python\",{\"1\":{\"16\":1,\"26\":1,\"32\":1,\"34\":2,\"52\":1,\"66\":1,\"71\":2,\"72\":1,\"503\":5,\"504\":2}}],[\"之前\",{\"1\":{\"250\":1}}],[\"之间\",{\"1\":{\"224\":1}}],[\"之间没有直接的依赖关系\",{\"1\":{\"171\":1}}],[\"之间保持同步\",{\"1\":{\"167\":1}}],[\"之间的中介\",{\"1\":{\"181\":1}}],[\"之间的同步更加方便\",{\"1\":{\"171\":1}}],[\"之间的桥梁\",{\"1\":{\"167\":1}}],[\"之间的关系\",{\"1\":{\"111\":1}}],[\"之间的大小关系\",{\"1\":{\"89\":1}}],[\"之间的派生关系\",{\"1\":{\"77\":1}}],[\"之间的映射\",{\"1\":{\"56\":1}}],[\"之间不存在公约数\",{\"1\":{\"69\":1}}],[\"之间插入一个新节点\",{\"1\":{\"19\":1}}],[\"之后切换为专用的\",{\"1\":{\"348\":1}}],[\"之后\",{\"1\":{\"250\":1}}],[\"之后插入节点\",{\"1\":{\"19\":1}}],[\"之后的首个节点\",{\"1\":{\"20\":1}}],[\"之后的所有元素向前移动一位\",{\"1\":{\"10\":1}}],[\"之后的元素都向前移动一位\",{\"1\":{\"10\":1}}],[\"之后再把元素赋值给该索引\",{\"1\":{\"9\":1}}],[\"假如线程函数执行时间较长\",{\"1\":{\"234\":1,\"255\":1}}],[\"假如我们将列表\",{\"1\":{\"71\":1}}],[\"假如我们希望实现\",{\"1\":{\"56\":1}}],[\"假如我们想实现字符到\",{\"1\":{\"15\":1}}],[\"假如把列表元素换成链表节点\",{\"1\":{\"34\":1}}],[\"假设基类中采用的是非虚析构函数\",{\"1\":{\"208\":1}}],[\"假设函数调用使用虚机制\",{\"1\":{\"208\":1}}],[\"假设构造函数是虚的\",{\"1\":{\"208\":1}}],[\"假设有数组\",{\"0\":{\"200\":1}}],[\"假设将\",{\"1\":{\"69\":1}}],[\"假设我们有一个操作系统的工厂\",{\"1\":{\"153\":1}}],[\"假设我们有一个交通工具的工厂\",{\"1\":{\"150\":1}}],[\"假设我们选择右子树的最小节点\",{\"1\":{\"91\":1}}],[\"假设我们选择合数\",{\"1\":{\"69\":1}}],[\"假设我们想在相邻的两个节点\",{\"1\":{\"19\":1}}],[\"假设被删除节点未被正常回收\",{\"1\":{\"34\":1}}],[\"而懒惰匹配\",{\"1\":{\"411\":1}}],[\"而std\",{\"1\":{\"261\":3}}],[\"而全然忽视这个对象后面是否还有继承者\",{\"1\":{\"208\":1}}],[\"而构造函数是在创建对象时自己主动调用的\",{\"1\":{\"208\":1}}],[\"而类中虚函数的个数在编译时期可以确定\",{\"1\":{\"206\":1}}],[\"而constexpr有\",{\"1\":{\"201\":1}}],[\"而代理模型则进一步扩展了数据处理的能力\",{\"1\":{\"186\":1}}],[\"而无需指定它们的具体类\",{\"1\":{\"151\":1}}],[\"而无需了解具体的创建过程\",{\"1\":{\"148\":1}}],[\"而无法减少哈希冲突的发生\",{\"1\":{\"67\":1}}],[\"而抽象工厂模式适用于创建相关产品的家族\",{\"1\":{\"147\":1}}],[\"而不影响当前的代码提交历史\",{\"1\":{\"435\":1}}],[\"而不阻塞\",{\"1\":{\"298\":1}}],[\"而不是跟随最新的更改\",{\"1\":{\"452\":1}}],[\"而不是匹配任意字符\",{\"1\":{\"404\":1}}],[\"而不是等到子进程终止\",{\"1\":{\"298\":1}}],[\"而不是std\",{\"1\":{\"257\":1}}],[\"而不是最后的vtable\",{\"1\":{\"208\":1}}],[\"而不会导致数据重复提交或操作错误\",{\"1\":{\"361\":1}}],[\"而不会阻塞或挂起\",{\"1\":{\"241\":1}}],[\"而不会调用派生类的析构函数\",{\"1\":{\"208\":1}}],[\"而不会相互影响\",{\"1\":{\"143\":1}}],[\"而不依赖于实际的\",{\"1\":{\"171\":1}}],[\"而不需要指定创建的具体类\",{\"1\":{\"147\":1}}],[\"而不需要修改现有代码\",{\"1\":{\"131\":1}}],[\"而空节点的高度为\",{\"1\":{\"97\":1}}],[\"而二叉搜索树满足\",{\"1\":{\"92\":1}}],[\"而需要使用一个节点替换该节点\",{\"1\":{\"91\":1}}],[\"而删除节点通常意味着删除该节点及其所有子树\",{\"1\":{\"81\":1}}],[\"而\",{\"1\":{\"72\":1,\"73\":1,\"111\":1,\"331\":1,\"342\":1}}],[\"而当所有节点都偏向一侧时\",{\"1\":{\"86\":1}}],[\"而当\",{\"1\":{\"69\":1}}],[\"而当查询元素时\",{\"1\":{\"63\":1}}],[\"而当数组非常大时\",{\"1\":{\"16\":1}}],[\"而通过线性探测\",{\"1\":{\"63\":1}}],[\"而输入空间往往远大于输出空间\",{\"1\":{\"59\":1}}],[\"而向上回溯阶段则会不断执行出栈操作\",{\"1\":{\"50\":1}}],[\"而对于出栈操作\",{\"1\":{\"47\":1}}],[\"而位于队列头部的人逐个离开\",{\"1\":{\"38\":1}}],[\"而非代表实际的字符\",{\"1\":{\"403\":1}}],[\"而非\",{\"1\":{\"335\":1}}],[\"而非完全替换\",{\"1\":{\"327\":1}}],[\"而非链表\",{\"1\":{\"34\":1}}],[\"而非节点本身\",{\"1\":{\"34\":1}}],[\"而只在必要时才使用链表\",{\"1\":{\"34\":1}}],[\"而是未定义\",{\"1\":{\"262\":1}}],[\"而是希望通过动态组合的方式进行扩展\",{\"1\":{\"135\":1}}],[\"而是存储密码的哈希值\",{\"1\":{\"68\":1}}],[\"而是跳过\",{\"1\":{\"64\":1}}],[\"而是利用一个常量\",{\"1\":{\"63\":1}}],[\"而是通过信号和槽机制通知\",{\"1\":{\"179\":1}}],[\"而是通过数据绑定和命令机制进行交互\",{\"1\":{\"167\":1}}],[\"而是通过\",{\"1\":{\"62\":1}}],[\"而是对数字的引用\",{\"1\":{\"34\":1}}],[\"而是分别跟\",{\"1\":{\"34\":1}}],[\"而在链表中却没有强调相同类型呢\",{\"1\":{\"34\":1}}],[\"而堆上的数组的大小可以在运行时动态确定\",{\"1\":{\"34\":1}}],[\"而堆内存相对更大\",{\"1\":{\"34\":1}}],[\"而链表是退化后的最差状态\",{\"1\":{\"110\":1}}],[\"而链表是由多个独立的节点对象组成的\",{\"1\":{\"18\":1}}],[\"而链表则在内存使用上更加灵活\",{\"1\":{\"33\":1}}],[\"等编程语言\",{\"1\":{\"478\":1}}],[\"等函数进行统计\",{\"1\":{\"397\":1}}],[\"等响应头来允许跨域访问\",{\"1\":{\"338\":1}}],[\"等于\",{\"1\":{\"298\":1,\"388\":1,\"485\":1}}],[\"等待用户输入调试命令\",{\"1\":{\"480\":1}}],[\"等待任何子进程\",{\"1\":{\"298\":1}}],[\"等待任何属于与调用进程相同进程组的子进程\",{\"1\":{\"298\":1}}],[\"等待进程组\",{\"1\":{\"298\":1}}],[\"等待进程\",{\"1\":{\"298\":1}}],[\"等待最后的确认\",{\"1\":{\"292\":1}}],[\"等待应用程序关闭连接\",{\"1\":{\"290\":1,\"292\":1}}],[\"等待对方发送fin包\",{\"1\":{\"290\":1}}],[\"等待对方的ack\",{\"1\":{\"290\":2}}],[\"等待客户端的ack确认\",{\"1\":{\"290\":1}}],[\"等待服务器的syn\",{\"1\":{\"290\":1}}],[\"等待其它线程通知后唤醒\",{\"1\":{\"262\":1}}],[\"等待线程完成\",{\"1\":{\"249\":1}}],[\"等待和保持\",{\"1\":{\"244\":1}}],[\"等待所有线程到达锁存器\",{\"1\":{\"243\":1}}],[\"等待所有线程到达屏障点\",{\"1\":{\"242\":1}}],[\"等待所有已终止的子进程\",{\"1\":{\"218\":1}}],[\"等待机制\",{\"1\":{\"242\":1,\"243\":1}}],[\"等待操作\",{\"1\":{\"240\":1}}],[\"等待条件变量的通知\",{\"1\":{\"238\":1}}],[\"等待\",{\"1\":{\"238\":2,\"248\":2,\"249\":2,\"319\":1}}],[\"等待子进程终止\",{\"1\":{\"301\":1,\"302\":1}}],[\"等待子进程终止的示例代码\",{\"1\":{\"301\":1}}],[\"等待子进程完成\",{\"1\":{\"226\":1,\"227\":1}}],[\"等待子进程结束并回收资源\",{\"1\":{\"218\":1}}],[\"等待信号\",{\"1\":{\"218\":1}}],[\"等待再次被调度\",{\"1\":{\"214\":1}}],[\"等待资源释放\",{\"1\":{\"240\":1}}],[\"等待资源\",{\"1\":{\"214\":1}}],[\"等待下一次调度\",{\"1\":{\"214\":1}}],[\"等待调度器的调度\",{\"1\":{\"214\":1}}],[\"等待被调度器分配\",{\"1\":{\"213\":1}}],[\"等信号通知\",{\"1\":{\"183\":1}}],[\"等构建而成\",{\"1\":{\"166\":1}}],[\"等语言拥有自动垃圾回收机制\",{\"1\":{\"52\":1}}],[\"等\",{\"1\":{\"18\":1,\"26\":1,\"32\":1,\"34\":1,\"70\":1,\"72\":1,\"163\":1,\"208\":1,\"239\":1,\"241\":1,\"246\":1,\"404\":1,\"409\":2,\"410\":1,\"490\":1,\"503\":1}}],[\"等支持指针的语言中\",{\"1\":{\"16\":1}}],[\"构成了一条责任链\",{\"1\":{\"160\":1}}],[\"构成的输入空间映射到数组所有索引构成的输出空间\",{\"1\":{\"59\":1}}],[\"构建项目\",{\"0\":{\"469\":1}}],[\"构建\",{\"1\":{\"460\":1,\"467\":1,\"469\":2}}],[\"构建目录\",{\"1\":{\"460\":1}}],[\"构建树的方法已在二叉搜索树代码中的\",{\"1\":{\"111\":1}}],[\"构建节点之间的引用\",{\"1\":{\"18\":1,\"80\":1}}],[\"构造方法\",{\"1\":{\"61\":1,\"63\":1}}],[\"构造函数通过\",{\"1\":{\"286\":1}}],[\"构造函数在编译时对字符串进行加密\",{\"1\":{\"285\":1}}],[\"构造函数减少引用计数\",{\"1\":{\"265\":1}}],[\"构造函数初始化队列的容量\",{\"1\":{\"249\":1}}],[\"构造函数不须要是虚函数\",{\"1\":{\"208\":1}}],[\"构造函数本身就是要初始化实例\",{\"1\":{\"208\":1}}],[\"构造函数为什么不能为虚函数\",{\"0\":{\"208\":1}}],[\"构造函数和析构函数调用虚函数时都不使用动态联编\",{\"1\":{\"207\":1}}],[\"构造函数和析构函数可以调用虚函数\",{\"0\":{\"207\":1}}],[\"构造函数\",{\"1\":{\"16\":1,\"24\":1,\"199\":1}}],[\"第二次的destruct是因为临时对象在构造a对象之后就销毁了\",{\"1\":{\"268\":1}}],[\"第二个子进程继续运行\",{\"1\":{\"221\":1}}],[\"第二个子进程\",{\"1\":{\"221\":1}}],[\"第二步是构建节点之间的引用关系\",{\"1\":{\"18\":1}}],[\"第一个参数是创建策略\",{\"1\":{\"262\":1}}],[\"第一个子进程退出\",{\"1\":{\"218\":1,\"220\":1,\"221\":1}}],[\"第一个子进程\",{\"1\":{\"218\":1}}],[\"第一步是初始化各个节点对象\",{\"1\":{\"18\":1}}],[\"第\",{\"1\":{\"86\":1}}],[\"xyz\",{\"1\":{\"404\":2}}],[\"xyz$\",{\"1\":{\"404\":1}}],[\"xss\",{\"0\":{\"340\":1},\"1\":{\"340\":1}}],[\"x86\",{\"1\":{\"316\":2,\"319\":1}}],[\"xvf\",{\"1\":{\"316\":1,\"317\":1}}],[\"xz\",{\"1\":{\"316\":2,\"319\":1}}],[\"xor\",{\"1\":{\"285\":3,\"286\":3}}],[\"x\",{\"1\":{\"16\":2,\"24\":2,\"65\":5,\"73\":2,\"77\":2,\"97\":2,\"234\":1,\"261\":2,\"272\":3,\"316\":1,\"321\":1,\"358\":1,\"484\":4,\"485\":2}}],[\"指定最低\",{\"1\":{\"461\":1}}],[\"指定启动的文件系统\",{\"1\":{\"319\":1}}],[\"指定启用的内核镜像\",{\"1\":{\"319\":1}}],[\"指该操作不会对服务器上的资源进行修改\",{\"1\":{\"331\":1}}],[\"指什么呢\",{\"1\":{\"111\":1}}],[\"指向一个\",{\"1\":{\"298\":1}}],[\"指向该对象的所有智能指针内部的引用计数加1\",{\"1\":{\"265\":1}}],[\"指向下一个元素的位置\",{\"1\":{\"249\":1}}],[\"指向下一节点的指针\",{\"1\":{\"16\":1}}],[\"指向虚函数表\",{\"1\":{\"206\":1}}],[\"指向对象所属类的虚表\",{\"1\":{\"205\":1}}],[\"指向树的根节点\",{\"1\":{\"88\":1}}],[\"指向队尾索引\",{\"1\":{\"42\":1}}],[\"指向队尾元素之后的下一个位置\",{\"1\":{\"42\":1}}],[\"指向队首元素\",{\"1\":{\"42\":1}}],[\"指向队首元素的索引\",{\"1\":{\"42\":1}}],[\"指向哪里都不会对该链表产生影响\",{\"1\":{\"34\":1}}],[\"指向前驱节点的指针\",{\"1\":{\"24\":1}}],[\"指向后继节点的指针\",{\"1\":{\"24\":1}}],[\"指针的问题\",{\"1\":{\"264\":1}}],[\"指针初始化为\",{\"1\":{\"249\":1}}],[\"指针变量占用的内存空间大小根据所使用的操作系统及编译环境而定\",{\"1\":{\"34\":1}}],[\"指针\",{\"1\":{\"16\":2,\"19\":1,\"20\":1,\"24\":1,\"33\":1,\"34\":1,\"77\":1,\"78\":1,\"80\":2}}],[\"节点插入和节点删除操作与链表操作方法类似\",{\"1\":{\"110\":1}}],[\"节点增删操作的平均效率更高\",{\"1\":{\"109\":1}}],[\"节点下方为平衡因子\",{\"1\":{\"100\":1}}],[\"节点平衡因子\",{\"0\":{\"98\":1},\"1\":{\"98\":1}}],[\"节点高度等于最高子树高度\",{\"1\":{\"97\":1}}],[\"节点高度\",{\"0\":{\"97\":1},\"1\":{\"97\":2}}],[\"节点总数为\",{\"1\":{\"86\":1}}],[\"节点总数\",{\"1\":{\"86\":1}}],[\"节点所在的层\",{\"1\":{\"78\":1}}],[\"节点\",{\"1\":{\"77\":5,\"100\":1}}],[\"节点之间通过引用\",{\"1\":{\"34\":1}}],[\"节点值\",{\"1\":{\"16\":1,\"24\":1,\"77\":1,\"97\":1}}],[\"节点的平衡因子\",{\"1\":{\"98\":1}}],[\"节点的高度\",{\"1\":{\"78\":1}}],[\"节点的深度\",{\"1\":{\"78\":1}}],[\"节点的子节点的数量\",{\"1\":{\"78\":1}}],[\"节点的度\",{\"1\":{\"78\":1}}],[\"节点的\",{\"1\":{\"16\":1}}],[\"vmlinux\",{\"1\":{\"316\":3,\"319\":2,\"320\":2}}],[\"v6\",{\"1\":{\"316\":1,\"503\":1}}],[\"var\",{\"1\":{\"484\":5,\"485\":6}}],[\"varchar\",{\"1\":{\"376\":2}}],[\"varnish\",{\"1\":{\"344\":1}}],[\"variable提供等待的同步机制\",{\"1\":{\"262\":1}}],[\"variable相关\",{\"0\":{\"260\":1},\"1\":{\"254\":1}}],[\"variable\",{\"1\":{\"238\":1,\"260\":1,\"470\":2}}],[\"variable>\",{\"1\":{\"238\":1}}],[\"value2\",{\"1\":{\"383\":1,\"384\":1}}],[\"value1\",{\"1\":{\"383\":1,\"384\":1}}],[\"values\",{\"1\":{\"383\":3}}],[\"valueset\",{\"1\":{\"58\":4}}],[\"value\",{\"1\":{\"56\":2,\"57\":3,\"58\":4,\"63\":1,\"71\":1,\"72\":2,\"125\":3,\"237\":2,\"239\":1,\"261\":2,\"310\":3,\"470\":1}}],[\"val\",{\"1\":{\"16\":2,\"24\":2,\"58\":5,\"61\":5,\"63\":5,\"77\":2,\"89\":4,\"97\":2,\"106\":6,\"107\":5,\"227\":2}}],[\"vptr的状态是由被最后调用的构造函数确定的\",{\"1\":{\"208\":1}}],[\"vptr将保持被初始化为指向这个vtable\",{\"1\":{\"208\":1}}],[\"vtable\",{\"1\":{\"208\":1}}],[\"vtable来调用\",{\"1\":{\"208\":1}}],[\"vbtl在构造函数调用后才建立\",{\"1\":{\"208\":1}}],[\"v\",{\"1\":{\"173\":2,\"240\":3,\"269\":3,\"272\":2,\"273\":2,\"420\":1,\"427\":2}}],[\"vue\",{\"0\":{\"173\":1},\"1\":{\"163\":1,\"169\":1,\"173\":5}}],[\"visual\",{\"1\":{\"458\":1,\"460\":1,\"468\":1,\"474\":2}}],[\"virt\",{\"1\":{\"318\":1}}],[\"virtual函数是在不同类型的对象产生不同的动作\",{\"1\":{\"208\":1}}],[\"virtual\",{\"1\":{\"125\":1,\"131\":2,\"137\":3,\"143\":4,\"150\":4,\"153\":7,\"159\":1,\"205\":2,\"308\":3,\"310\":1,\"311\":2}}],[\"vim\",{\"1\":{\"317\":1,\"420\":1}}],[\"videotask\",{\"1\":{\"311\":1}}],[\"viewmodel\",{\"0\":{\"167\":1},\"1\":{\"163\":1,\"164\":1,\"166\":3,\"167\":2,\"168\":8,\"169\":4,\"171\":3,\"173\":1}}],[\"view\",{\"0\":{\"166\":1,\"177\":1,\"178\":1,\"180\":1,\"182\":1,\"184\":1},\"1\":{\"163\":1,\"164\":1,\"166\":1,\"167\":6,\"168\":4,\"169\":8,\"171\":3,\"173\":2,\"174\":1,\"177\":4,\"179\":4,\"180\":10,\"181\":2,\"182\":7,\"183\":3,\"184\":5,\"186\":2},\"2\":{\"188\":1}}],[\"version\",{\"1\":{\"461\":2,\"465\":1}}],[\"vehiclefactory\",{\"1\":{\"150\":3}}],[\"vehicle\",{\"1\":{\"150\":3}}],[\"velsky\",{\"1\":{\"95\":1}}],[\"vector<task\",{\"1\":{\"311\":1}}],[\"vector<preferenceobserver\",{\"1\":{\"310\":1}}],[\"vector<pair\",{\"1\":{\"58\":4,\"63\":3}}],[\"vector<complicated>\",{\"1\":{\"269\":1}}],[\"vector<std\",{\"1\":{\"242\":1,\"243\":1}}],[\"vector<string>\",{\"1\":{\"58\":2}}],[\"vector<vector<pair\",{\"1\":{\"61\":2}}],[\"vector<int>\",{\"1\":{\"28\":2,\"41\":2,\"42\":2,\"47\":2,\"48\":2,\"58\":2,\"237\":1,\"273\":1}}],[\"vector\",{\"1\":{\"26\":1,\"28\":1,\"34\":2,\"41\":1,\"42\":1,\"48\":1,\"111\":1}}],[\"vs\",{\"0\":{\"23\":1}}],[\"void\",{\"1\":{\"9\":1,\"10\":1,\"11\":1,\"19\":1,\"20\":1,\"41\":1,\"42\":1,\"47\":1,\"48\":1,\"58\":3,\"61\":4,\"63\":4,\"90\":1,\"91\":1,\"97\":1,\"125\":4,\"131\":1,\"143\":6,\"150\":3,\"153\":6,\"159\":1,\"181\":1,\"205\":2,\"218\":1,\"220\":1,\"226\":2,\"227\":2,\"228\":1,\"234\":2,\"236\":1,\"237\":2,\"238\":2,\"239\":1,\"240\":1,\"241\":3,\"242\":1,\"243\":1,\"258\":4,\"259\":1,\"260\":2,\"261\":1,\"271\":1,\"308\":11,\"309\":2,\"310\":4,\"311\":8}}],[\"snap\",{\"1\":{\"420\":1}}],[\"smallint\",{\"1\":{\"379\":1}}],[\"sql\",{\"1\":{\"369\":1},\"2\":{\"401\":1}}],[\"square\",{\"1\":{\"143\":3}}],[\"sse\",{\"0\":{\"356\":1},\"1\":{\"356\":1}}],[\"ssl\",{\"1\":{\"337\":1}}],[\"salary\",{\"1\":{\"391\":3,\"397\":3}}],[\"salt\",{\"1\":{\"71\":1}}],[\"samesite\",{\"1\":{\"340\":1}}],[\"script\",{\"1\":{\"311\":5,\"317\":1}}],[\"script>\",{\"1\":{\"173\":2}}],[\"scopeoption\",{\"1\":{\"309\":1}}],[\"scope\",{\"1\":{\"309\":5}}],[\"scoped\",{\"1\":{\"275\":1}}],[\"swordsmanship\",{\"1\":{\"407\":1}}],[\"sword\",{\"1\":{\"407\":1}}],[\"switch\",{\"1\":{\"275\":1}}],[\"swap\",{\"1\":{\"239\":1,\"241\":1,\"246\":1}}],[\"symbols\",{\"1\":{\"500\":1}}],[\"symbol\",{\"1\":{\"500\":1,\"504\":1}}],[\"syn\",{\"1\":{\"290\":2,\"292\":2,\"293\":2}}],[\"sync\",{\"1\":{\"242\":2,\"243\":3}}],[\"synchronize\",{\"1\":{\"234\":1}}],[\"systemctl\",{\"1\":{\"420\":1}}],[\"system\",{\"1\":{\"318\":1,\"319\":1,\"420\":1}}],[\"systemd\",{\"1\":{\"218\":1,\"420\":1}}],[\"sysfs\",{\"1\":{\"317\":1}}],[\"sys\",{\"1\":{\"317\":3,\"503\":4,\"504\":2}}],[\"syslog\",{\"1\":{\"222\":1}}],[\"specific\",{\"1\":{\"452\":1}}],[\"sprites\",{\"1\":{\"351\":1}}],[\"spinlock\",{\"0\":{\"241\":1},\"1\":{\"241\":5}}],[\"spawn\",{\"1\":{\"234\":2}}],[\"spliter\",{\"1\":{\"125\":3}}],[\"splitfile\",{\"1\":{\"125\":2}}],[\"source\",{\"1\":{\"460\":1,\"467\":1}}],[\"soft\",{\"1\":{\"436\":2}}],[\"something\",{\"1\":{\"308\":3,\"309\":2,\"311\":7}}],[\"sockaddr\",{\"1\":{\"229\":4}}],[\"sock\",{\"1\":{\"229\":6}}],[\"socket\",{\"1\":{\"229\":7}}],[\"son2\",{\"1\":{\"205\":2}}],[\"son1\",{\"1\":{\"205\":4}}],[\"sbin\",{\"1\":{\"420\":3}}],[\"sb\",{\"1\":{\"227\":4}}],[\"sh\",{\"1\":{\"317\":2,\"420\":2}}],[\"show\",{\"1\":{\"372\":2,\"377\":2}}],[\"should\",{\"1\":{\"269\":1}}],[\"short\",{\"1\":{\"227\":1}}],[\"shmctl\",{\"1\":{\"226\":1}}],[\"shmdt\",{\"1\":{\"226\":2}}],[\"shmat\",{\"1\":{\"226\":2}}],[\"shmget\",{\"1\":{\"226\":1}}],[\"shmid\",{\"1\":{\"226\":4}}],[\"shmfile\",{\"1\":{\"226\":1}}],[\"shm\",{\"1\":{\"226\":1}}],[\"share\",{\"1\":{\"503\":1}}],[\"sharedlibrary\",{\"1\":{\"488\":2}}],[\"shared<directorhandler>\",{\"1\":{\"159\":1}}],[\"shared<managerhandler>\",{\"1\":{\"159\":1}}],[\"shared<macosfactory>\",{\"1\":{\"153\":1}}],[\"shared<macostextbox>\",{\"1\":{\"153\":1}}],[\"shared<macosbutton>\",{\"1\":{\"153\":1}}],[\"shared<teamleaderhandler>\",{\"1\":{\"159\":1}}],[\"shared<windowsfactory>\",{\"1\":{\"153\":1}}],[\"shared<windowstextbox>\",{\"1\":{\"153\":1}}],[\"shared<windowsbutton>\",{\"1\":{\"153\":1}}],[\"shared<bikefactory>\",{\"1\":{\"150\":1}}],[\"shared<bike>\",{\"1\":{\"150\":1}}],[\"shared<bluecolor>\",{\"1\":{\"143\":1}}],[\"shared<carfactory>\",{\"1\":{\"150\":1}}],[\"shared<car>\",{\"1\":{\"150\":1}}],[\"shared<circle>\",{\"1\":{\"143\":1}}],[\"shared<square>\",{\"1\":{\"143\":1}}],[\"shared<redcolor>\",{\"1\":{\"143\":1}}],[\"shared\",{\"1\":{\"143\":8,\"150\":7,\"153\":11,\"159\":5,\"237\":4,\"261\":1,\"264\":5,\"317\":1}}],[\"shape\",{\"1\":{\"143\":6}}],[\"sha\",{\"1\":{\"70\":13,\"72\":4}}],[\"sleep\",{\"1\":{\"220\":1,\"221\":1,\"227\":2,\"228\":1,\"238\":1,\"240\":1,\"241\":1,\"255\":1,\"301\":1}}],[\"such\",{\"1\":{\"420\":1}}],[\"success\",{\"1\":{\"220\":2}}],[\"sudo\",{\"1\":{\"420\":2,\"459\":1}}],[\"sum\",{\"1\":{\"391\":1,\"397\":1}}],[\"submodules\",{\"1\":{\"448\":2}}],[\"submodule\",{\"0\":{\"446\":1},\"1\":{\"446\":2,\"447\":2,\"448\":2,\"449\":1,\"450\":1,\"451\":1,\"452\":1,\"454\":1}}],[\"subsequent\",{\"1\":{\"420\":1}}],[\"sub\",{\"1\":{\"258\":2}}],[\"subject\",{\"1\":{\"124\":2}}],[\"subtree\",{\"1\":{\"77\":2}}],[\"src\",{\"1\":{\"470\":1}}],[\"src=\",{\"1\":{\"173\":1}}],[\"srp\",{\"1\":{\"118\":1}}],[\"sigcont\",{\"1\":{\"298\":1}}],[\"sigchld\",{\"1\":{\"218\":8}}],[\"sigstop\",{\"1\":{\"298\":1}}],[\"sigint\",{\"1\":{\"228\":2}}],[\"sigterm\",{\"1\":{\"222\":1}}],[\"signaloption\",{\"1\":{\"309\":1}}],[\"signalhandler\",{\"1\":{\"228\":2}}],[\"signal\",{\"1\":{\"218\":1,\"228\":3,\"240\":1,\"301\":2,\"309\":5}}],[\"signum\",{\"1\":{\"218\":1,\"228\":3}}],[\"silverlight\",{\"1\":{\"163\":1}}],[\"size>\",{\"1\":{\"285\":1}}],[\"sizeof\",{\"1\":{\"224\":1,\"225\":2,\"229\":3,\"309\":2}}],[\"size++\",{\"1\":{\"61\":1,\"63\":1}}],[\"size\",{\"1\":{\"8\":3,\"9\":2,\"10\":2,\"11\":2,\"12\":2,\"13\":3,\"31\":1,\"32\":1,\"34\":2,\"39\":2,\"41\":4,\"42\":6,\"45\":2,\"47\":4,\"48\":3,\"61\":6,\"63\":5,\"71\":4,\"111\":1,\"248\":5,\"249\":4,\"285\":5}}],[\"s\",{\"1\":{\"137\":4,\"317\":1,\"319\":4,\"321\":2,\"405\":4,\"502\":1,\"504\":1}}],[\"select\",{\"1\":{\"378\":3,\"387\":4,\"388\":1,\"389\":1,\"390\":2,\"391\":2,\"392\":5,\"393\":3,\"394\":2,\"395\":3,\"396\":1,\"397\":4}}],[\"self\",{\"1\":{\"34\":2}}],[\"serve\",{\"1\":{\"420\":1}}],[\"server\",{\"0\":{\"356\":1},\"1\":{\"229\":8,\"328\":1}}],[\"service\",{\"1\":{\"328\":1,\"420\":3}}],[\"serv\",{\"1\":{\"229\":3}}],[\"send\",{\"1\":{\"229\":1}}],[\"sent状态\",{\"1\":{\"292\":1}}],[\"sent\",{\"0\":{\"356\":1},\"1\":{\"225\":1,\"290\":1,\"292\":1,\"293\":1}}],[\"section\",{\"1\":{\"227\":4}}],[\"seconds\",{\"1\":{\"238\":1,\"240\":1,\"241\":1,\"255\":1,\"317\":1}}],[\"second\",{\"1\":{\"57\":1,\"234\":4}}],[\"semctl\",{\"1\":{\"227\":2}}],[\"semget\",{\"1\":{\"227\":1}}],[\"semfile\",{\"1\":{\"227\":1}}],[\"semaphore<1>\",{\"1\":{\"240\":1}}],[\"semaphoresignal\",{\"1\":{\"227\":3}}],[\"semaphorewait\",{\"1\":{\"227\":3}}],[\"semop\",{\"1\":{\"227\":2}}],[\"sembuf\",{\"1\":{\"227\":2}}],[\"seminfo\",{\"1\":{\"227\":1}}],[\"semid\",{\"1\":{\"227\":12}}],[\"semun\",{\"1\":{\"227\":2}}],[\"sem\",{\"1\":{\"227\":4,\"240\":3}}],[\"session\",{\"1\":{\"220\":1}}],[\"setuidgid\",{\"1\":{\"317\":1}}],[\"settings\",{\"1\":{\"317\":1}}],[\"setbrowser\",{\"1\":{\"311\":1}}],[\"setwavestyle\",{\"1\":{\"308\":1}}],[\"set\",{\"1\":{\"238\":2,\"241\":2,\"261\":1,\"384\":2,\"420\":1,\"470\":1,\"484\":3,\"501\":2,\"504\":2}}],[\"setvalue\",{\"1\":{\"310\":1}}],[\"setval\",{\"1\":{\"227\":1}}],[\"setsid\",{\"1\":{\"220\":1,\"221\":1,\"317\":1}}],[\"setdata\",{\"1\":{\"185\":1}}],[\"setdiscountstrategy\",{\"1\":{\"131\":2}}],[\"setmodel\",{\"1\":{\"182\":1}}],[\"setnexthandler\",{\"1\":{\"159\":1}}],[\"setprogress\",{\"1\":{\"125\":2}}],[\"seasonaldiscount\",{\"1\":{\"131\":2}}],[\"search\",{\"1\":{\"87\":1,\"89\":4,\"96\":1}}],[\"separate\",{\"1\":{\"61\":1}}],[\"studio\",{\"1\":{\"458\":1,\"460\":1,\"468\":1,\"474\":2}}],[\"stuff\",{\"1\":{\"234\":2}}],[\"style\",{\"1\":{\"308\":4}}],[\"stop\",{\"1\":{\"502\":2,\"504\":1}}],[\"stopped\",{\"1\":{\"301\":1,\"502\":1,\"504\":1}}],[\"store\",{\"1\":{\"248\":2,\"249\":4,\"250\":2,\"258\":2,\"342\":1}}],[\"stash\",{\"1\":{\"435\":3}}],[\"staged\",{\"1\":{\"433\":2}}],[\"stage\",{\"1\":{\"429\":1}}],[\"start\",{\"1\":{\"320\":3,\"420\":2}}],[\"status\",{\"1\":{\"298\":2,\"300\":8,\"301\":10,\"302\":5,\"431\":2,\"449\":1}}],[\"state\",{\"1\":{\"289\":1}}],[\"stat\",{\"1\":{\"220\":1}}],[\"static\",{\"0\":{\"198\":1},\"1\":{\"272\":1,\"275\":1,\"309\":2,\"317\":2,\"470\":1}}],[\"stacktop\",{\"1\":{\"47\":10}}],[\"stack<int>\",{\"1\":{\"45\":1}}],[\"stack\",{\"1\":{\"34\":1,\"44\":1,\"45\":10,\"47\":2,\"48\":9}}],[\"step\",{\"1\":{\"320\":1,\"321\":1,\"483\":1}}],[\"step4\",{\"1\":{\"89\":1,\"91\":1,\"100\":1}}],[\"step3\",{\"1\":{\"89\":1,\"91\":1,\"100\":1}}],[\"step2\",{\"1\":{\"89\":1,\"91\":1,\"100\":1}}],[\"stksize++\",{\"1\":{\"47\":1}}],[\"stksize\",{\"1\":{\"47\":4}}],[\"stderr\",{\"1\":{\"220\":2}}],[\"stdout\",{\"1\":{\"220\":2}}],[\"stdin\",{\"1\":{\"220\":2}}],[\"std\",{\"0\":{\"255\":1,\"256\":1,\"257\":1,\"258\":1,\"259\":1,\"260\":1,\"261\":1},\"1\":{\"34\":5,\"71\":1,\"125\":2,\"131\":4,\"137\":20,\"143\":21,\"150\":15,\"153\":25,\"159\":14,\"205\":1,\"220\":8,\"224\":2,\"225\":4,\"226\":2,\"227\":8,\"228\":2,\"229\":2,\"234\":6,\"236\":6,\"237\":11,\"238\":11,\"239\":6,\"240\":7,\"241\":9,\"242\":6,\"243\":6,\"247\":1,\"248\":14,\"249\":18,\"250\":3,\"254\":7,\"255\":15,\"256\":16,\"257\":8,\"258\":6,\"259\":4,\"260\":6,\"261\":18,\"262\":24,\"268\":2,\"269\":6,\"273\":2,\"275\":4,\"285\":4,\"301\":18,\"310\":1,\"311\":1,\"464\":2}}],[\"stl\",{\"1\":{\"34\":1,\"495\":1}}],[\"strcpy\",{\"1\":{\"225\":1,\"226\":1}}],[\"strlen\",{\"1\":{\"224\":1,\"229\":1}}],[\"stream\",{\"1\":{\"137\":10,\"229\":2}}],[\"strategy\",{\"1\":{\"129\":1,\"131\":10}}],[\"str\",{\"1\":{\"71\":2,\"226\":6,\"285\":7,\"286\":2}}],[\"string>\",{\"1\":{\"57\":1}}],[\"string\",{\"1\":{\"34\":1,\"57\":1,\"58\":4,\"61\":2,\"63\":2,\"69\":1,\"71\":1,\"111\":2,\"137\":10,\"269\":3}}],[\"struct\",{\"1\":{\"16\":1,\"24\":1,\"58\":1,\"77\":1,\"97\":1,\"225\":1,\"227\":4,\"229\":2,\"258\":2,\"268\":1,\"269\":1}}],[\"还支持很多高级功能\",{\"1\":{\"474\":1}}],[\"还支持安装可执行文件和库\",{\"1\":{\"473\":1}}],[\"还引入了分块传输编码\",{\"1\":{\"333\":1}}],[\"还可以设置互斥量的超时时间\",{\"1\":{\"262\":1}}],[\"还可以获取线程id等信息\",{\"1\":{\"262\":1}}],[\"还未进入准备就绪队列\",{\"1\":{\"213\":1}}],[\"还需要深入了解各个版本的特性\",{\"1\":{\"366\":1}}],[\"还需要对操作系统有深刻的理解\",{\"1\":{\"195\":1}}],[\"还需额外保存一个引用\",{\"1\":{\"16\":1}}],[\"还处理用户的输入\",{\"1\":{\"167\":1}}],[\"还广泛应用于其他领域中\",{\"1\":{\"68\":1}}],[\"还是通过自定义模型\",{\"1\":{\"186\":1}}],[\"还是数组吗\",{\"1\":{\"34\":1}}],[\"还是和节点值各占一半呢\",{\"1\":{\"34\":1}}],[\"还会缓存其周围的其他数据\",{\"1\":{\"14\":1}}],[\"中定义自定义函数\",{\"1\":{\"502\":1}}],[\"中编写简单的\",{\"1\":{\"464\":1}}],[\"中用于存储表和其他数据库对象的逻辑容器\",{\"1\":{\"370\":1}}],[\"中间证书和服务器证书之间的信任关系\",{\"1\":{\"337\":1}}],[\"中间插入节点\",{\"1\":{\"81\":1}}],[\"中退出\",{\"1\":{\"244\":1}}],[\"中进行操作\",{\"1\":{\"182\":1}}],[\"中获取数据并进行显示\",{\"1\":{\"180\":1}}],[\"中获取数据并提供给\",{\"1\":{\"167\":1}}],[\"中常用的\",{\"1\":{\"179\":1,\"180\":1}}],[\"中应用广泛\",{\"1\":{\"169\":1}}],[\"中呢\",{\"1\":{\"111\":1}}],[\"中序\",{\"1\":{\"110\":1,\"111\":1}}],[\"中序遍历有序\",{\"0\":{\"92\":1}}],[\"中序遍历序列\",{\"1\":{\"91\":1}}],[\"中序遍历的下一个节点\",{\"1\":{\"91\":1}}],[\"中提出了\",{\"1\":{\"95\":1}}],[\"中任意节点的左子树和右子树的高度之差的绝对值不超过\",{\"1\":{\"85\":1}}],[\"中删除\",{\"1\":{\"56\":1}}],[\"中弹出最近的操作\",{\"1\":{\"52\":2}}],[\"中需要手动释放内存\",{\"1\":{\"52\":1}}],[\"中初始化\",{\"1\":{\"34\":1}}],[\"中\",{\"1\":{\"28\":1,\"34\":1,\"59\":1,\"71\":1,\"111\":5,\"160\":1,\"163\":1,\"169\":2,\"184\":1,\"216\":1,\"234\":1,\"249\":1,\"320\":1}}],[\"中的任意一个\",{\"1\":{\"406\":1}}],[\"中的所有列和记录\",{\"1\":{\"387\":1}}],[\"中的原子操作\",{\"0\":{\"247\":1}}],[\"中的属性\",{\"1\":{\"168\":1}}],[\"中的数据渲染为可视化的控件或元素\",{\"1\":{\"181\":1}}],[\"中的数据发生变化时\",{\"1\":{\"168\":2}}],[\"中的数据展示给用户\",{\"1\":{\"166\":1}}],[\"中的数字也被包装为对象\",{\"1\":{\"34\":1}}],[\"中的下一个节点\",{\"1\":{\"91\":1}}],[\"中的相同\",{\"1\":{\"34\":1}}],[\"中的\",{\"0\":{\"184\":1},\"1\":{\"26\":4,\"173\":1,\"239\":1}}],[\"中分别被记为\",{\"1\":{\"16\":1}}],[\"中随机抽取一个数字\",{\"1\":{\"8\":1}}],[\"它演示了如何设置断点\",{\"1\":{\"504\":1}}],[\"它指向另一个\",{\"1\":{\"447\":1}}],[\"它指向一个由shared\",{\"1\":{\"267\":1}}],[\"它包含行和列\",{\"1\":{\"375\":1}}],[\"它使用\",{\"1\":{\"369\":1}}],[\"它使得请求的发送者和接收者之间不再紧耦合\",{\"1\":{\"160\":1}}],[\"它只引用\",{\"1\":{\"267\":1}}],[\"它只是插入\",{\"1\":{\"111\":1}}],[\"它是为了配合shared\",{\"1\":{\"267\":1}}],[\"它是为这个类的构造函数产生代码\",{\"1\":{\"208\":1}}],[\"它是一个基于任务的程序设计\",{\"1\":{\"262\":1}}],[\"它是基于任务的异步操作\",{\"1\":{\"262\":1}}],[\"它可以配置调试环境\",{\"1\":{\"495\":1}}],[\"它可以生成适用于不同编译器和操作系统的构建系统文件\",{\"1\":{\"458\":1}}],[\"它可以阻塞一个线程或者个线程\",{\"1\":{\"260\":1}}],[\"它可以被\",{\"1\":{\"69\":1}}],[\"它需要配合std\",{\"1\":{\"259\":1}}],[\"它需要对一组进程进行循环\",{\"1\":{\"25\":1}}],[\"它检查一个变量是否有特定的值\",{\"1\":{\"246\":1}}],[\"它支持以下操作\",{\"1\":{\"247\":1}}],[\"它支持\",{\"1\":{\"229\":1}}],[\"它仅仅能知道它是\",{\"1\":{\"208\":1}}],[\"它做的首要的事情之中的一个是初始化它的vptr\",{\"1\":{\"208\":1}}],[\"它非常适合需要频繁更新\",{\"1\":{\"174\":1}}],[\"它将仅仅产生通过它自己的vtable的调用\",{\"1\":{\"208\":1}}],[\"它将\",{\"1\":{\"169\":1}}],[\"它将用户界面逻辑和业务逻辑进行分离\",{\"1\":{\"163\":1}}],[\"它从\",{\"1\":{\"167\":1}}],[\"它通常由\",{\"1\":{\"166\":1}}],[\"它通过旋转操作确保在不断插入和删除节点后树仍然保持平衡\",{\"1\":{\"110\":1}}],[\"它通过建立键\",{\"1\":{\"56\":1}}],[\"它负责处理与业务逻辑相关的所有操作\",{\"1\":{\"165\":1}}],[\"它允许父进程挂起执行\",{\"1\":{\"297\":1}}],[\"它允许多个对象都有机会处理请求\",{\"1\":{\"157\":1}}],[\"它允许你通过将对象放入包含行为的特殊封装对象中\",{\"1\":{\"135\":1}}],[\"它允许在两端进行元素的添加和删除操作\",{\"1\":{\"51\":1}}],[\"它定义了一系列算法\",{\"1\":{\"129\":1}}],[\"它体现了\",{\"1\":{\"110\":1}}],[\"它能够在不影响二叉树的中序遍历序列的前提下\",{\"1\":{\"99\":1}}],[\"它的所有资源\",{\"1\":{\"216\":1}}],[\"它的前身c++之父的很多心得经验的博客\",{\"1\":{\"195\":1}}],[\"它的主要目的是将抽象部分与实现部分分离\",{\"1\":{\"141\":1}}],[\"它的哈希值也随之改变\",{\"1\":{\"71\":1}}],[\"它的用途是什么\",{\"1\":{\"52\":1}}],[\"它不直接从哈希表中移除元素\",{\"1\":{\"63\":1}}],[\"它相比数组更加耗费内存空间\",{\"1\":{\"61\":1}}],[\"它保留了数组的优势\",{\"1\":{\"33\":1}}],[\"它继承了数组的各项优点\",{\"1\":{\"26\":1}}],[\"它表现的是栈\",{\"1\":{\"52\":1}}],[\"它表现的特性为先进先出\",{\"1\":{\"25\":1}}],[\"它表现的特性为先进后出\",{\"1\":{\"25\":1}}],[\"它表示元素的有序集合\",{\"1\":{\"26\":1}}],[\"它在每次启动\",{\"1\":{\"496\":1}}],[\"它在字符串搜索\",{\"1\":{\"402\":1}}],[\"它在\",{\"1\":{\"16\":1}}],[\"它们内部都有一个future\",{\"1\":{\"261\":1}}],[\"它们分别用于显示列表\",{\"1\":{\"180\":1}}],[\"它们分别解决的两种失衡情况也是对称的\",{\"1\":{\"101\":1}}],[\"它们分为三大类\",{\"1\":{\"117\":1}}],[\"它们指向同一个对象\",{\"1\":{\"111\":1}}],[\"它们体现了\",{\"1\":{\"110\":1}}],[\"它们可以将任意长度的输入数据映射到恒定长度的哈希值\",{\"1\":{\"70\":1}}],[\"它们都能输出均匀分布的哈希值\",{\"1\":{\"69\":1}}],[\"它们只能保证哈希表可以在发生冲突时正常工作\",{\"1\":{\"67\":1}}],[\"它们被依次存储在该桶以及之下的桶中\",{\"1\":{\"63\":1}}],[\"它们的主要区别在于工厂模式适用于创建单一产品\",{\"1\":{\"147\":1}}],[\"它们的效率对比如下表所示\",{\"1\":{\"56\":1}}],[\"它们的实现比较复杂\",{\"1\":{\"32\":1}}],[\"它们的内存地址无须连续\",{\"1\":{\"16\":1}}],[\"它们之间没有空间再存放任何数据\",{\"1\":{\"9\":1}}],[\"和任务系统\",{\"1\":{\"365\":1}}],[\"和缓存层\",{\"0\":{\"344\":1}}],[\"和右子节点\",{\"1\":{\"77\":1}}],[\"和反撤销\",{\"1\":{\"52\":1}}],[\"和实例对象等\",{\"1\":{\"34\":1}}],[\"和前驱节点\",{\"1\":{\"24\":1}}],[\"和\",{\"0\":{\"268\":1,\"330\":1,\"333\":1,\"352\":1},\"1\":{\"16\":3,\"18\":1,\"19\":1,\"26\":2,\"28\":1,\"34\":3,\"41\":2,\"42\":1,\"52\":2,\"56\":1,\"58\":1,\"59\":2,\"60\":1,\"63\":1,\"69\":1,\"70\":2,\"72\":1,\"77\":1,\"78\":1,\"89\":1,\"91\":1,\"95\":1,\"111\":2,\"163\":1,\"167\":2,\"169\":4,\"171\":2,\"173\":1,\"174\":1,\"177\":1,\"179\":1,\"180\":1,\"181\":1,\"184\":1,\"200\":1,\"229\":1,\"234\":2,\"249\":1,\"250\":1,\"264\":1,\"314\":2,\"321\":1,\"327\":1,\"331\":1,\"342\":1,\"347\":1,\"387\":1,\"388\":1,\"395\":1,\"396\":1,\"397\":1,\"402\":1,\"409\":1,\"454\":1}}],[\"和指向下一节点的\",{\"1\":{\"16\":1}}],[\"和某个元素的索引\",{\"1\":{\"8\":1}}],[\"值得说明的是\",{\"1\":{\"69\":1}}],[\"值得思考的是\",{\"1\":{\"69\":1}}],[\"值得注意的是\",{\"1\":{\"9\":1,\"61\":1,\"63\":1}}],[\"值\",{\"1\":{\"16\":1,\"71\":1}}],[\"每列有特定的数据类型\",{\"1\":{\"376\":1}}],[\"每种通信方式都有其优缺点和适用场景\",{\"1\":{\"230\":1}}],[\"每种哈希算法的最后一步都是对大质数\",{\"1\":{\"69\":1}}],[\"每隔10秒执行一次任务\",{\"1\":{\"220\":1}}],[\"每一个构造函数都已经设置vptr指向它自己的vtable\",{\"1\":{\"208\":1}}],[\"每轮乘以一个常数\",{\"1\":{\"69\":1}}],[\"每轮判断元素值是否匹配\",{\"1\":{\"12\":1}}],[\"每当减少一个智能指针指向对象时\",{\"1\":{\"265\":1}}],[\"每当多一个指针指向该对象时\",{\"1\":{\"265\":1}}],[\"每当一个线程到达屏障点时\",{\"1\":{\"242\":1}}],[\"每当遇到哈希冲突时\",{\"1\":{\"60\":1}}],[\"每当用户执行一个操作\",{\"1\":{\"52\":1}}],[\"每当我们打开新的网页\",{\"1\":{\"50\":1}}],[\"每次创建类的新对象时\",{\"1\":{\"265\":1}}],[\"每次完成任务时\",{\"1\":{\"243\":1}}],[\"每次累积之前都会对哈希值进行旋转操作\",{\"1\":{\"69\":1}}],[\"每次调用函数时\",{\"1\":{\"50\":1}}],[\"每次插入与删除操作都是\",{\"1\":{\"34\":1}}],[\"每个\",{\"1\":{\"460\":1}}],[\"每个请求需要建立单独的\",{\"1\":{\"333\":1}}],[\"每个过滤器负责处理特定类型的请求\",{\"1\":{\"160\":1}}],[\"每个链上的对象都有机会处理请求\",{\"1\":{\"158\":1}}],[\"每个二叉树节点包含一个值以及两个指针\",{\"1\":{\"110\":1}}],[\"每个节点都有两个引用\",{\"1\":{\"77\":1}}],[\"每个节点都包含两项数据\",{\"1\":{\"16\":1}}],[\"每个节点包含值\",{\"1\":{\"77\":1}}],[\"每个元素对应唯一的桶索引\",{\"1\":{\"73\":1}}],[\"每个桶都是一个列表\",{\"1\":{\"61\":1}}],[\"每个桶仅能存储一个键值对\",{\"1\":{\"61\":1}}],[\"每个桶可存储一个键值对\",{\"1\":{\"58\":1}}],[\"每个学生都有\",{\"1\":{\"56\":1}}],[\"每个进程被赋予一个时间片\",{\"1\":{\"25\":1}}],[\"对所有线程执行\",{\"1\":{\"489\":1}}],[\"对结果排序\",{\"1\":{\"397\":1}}],[\"对一个对象进行赋值时\",{\"1\":{\"265\":1}}],[\"对已获得的资源保持不放\",{\"1\":{\"244\":1}}],[\"对该类进行实例化时\",{\"1\":{\"206\":1}}],[\"对第\",{\"1\":{\"186\":1}}],[\"对数据进行排序\",{\"1\":{\"186\":1}}],[\"对比总结\",{\"1\":{\"169\":1}}],[\"对修改封闭\",{\"1\":{\"137\":1}}],[\"对修改关闭\",{\"1\":{\"118\":1}}],[\"对扩展开放\",{\"1\":{\"137\":1}}],[\"对外提供尽可能少的接口\",{\"1\":{\"119\":1}}],[\"对合数取模更容易出现聚集现象\",{\"1\":{\"69\":1}}],[\"对输入的每个字符的\",{\"1\":{\"69\":1}}],[\"对于幂等的操作\",{\"1\":{\"361\":1}}],[\"对于图片或其他资源\",{\"1\":{\"351\":1}}],[\"对于保持系统的稳定性和资源利用率至关重要\",{\"1\":{\"218\":1}}],[\"对于有虚函数或者继承于拥有虚函数的基类\",{\"1\":{\"206\":1}}],[\"对于初学者来说\",{\"1\":{\"172\":1}}],[\"对于引用类型\",{\"1\":{\"111\":1}}],[\"对于基本数据类型\",{\"1\":{\"111\":1}}],[\"对于只有一个节点的二叉树\",{\"1\":{\"111\":1}}],[\"对于二叉树中的某个节点\",{\"1\":{\"110\":1}}],[\"对于上述失衡二叉树的镜像情况\",{\"1\":{\"103\":1}}],[\"对于上述示例中的哈希函数\",{\"1\":{\"59\":1}}],[\"对于下图中的失衡节点\",{\"1\":{\"102\":1}}],[\"对于根节点\",{\"1\":{\"87\":1}}],[\"对于密码学的相关应用\",{\"1\":{\"68\":1}}],[\"对于相同的输入\",{\"1\":{\"68\":1}}],[\"对于链式地址哈希表\",{\"1\":{\"67\":1}}],[\"对于入栈操作\",{\"1\":{\"47\":1}}],[\"对于环形数组\",{\"1\":{\"42\":1}}],[\"对缓存的利用率较低\",{\"1\":{\"34\":1}}],[\"对时间效率和空间效率是否有影响\",{\"1\":{\"34\":1}}],[\"对应的索引也可能发生变化\",{\"1\":{\"73\":1}}],[\"对应的数组索引\",{\"1\":{\"58\":1}}],[\"对应的键值对在数组中的存储位置\",{\"1\":{\"58\":1}}],[\"对应的桶索引\",{\"1\":{\"63\":4}}],[\"对应的桶\",{\"1\":{\"58\":1}}],[\"对应的元素存放在数组中的对应位置\",{\"1\":{\"15\":1}}],[\"对应队列\",{\"1\":{\"25\":1}}],[\"对应栈\",{\"1\":{\"25\":1}}],[\"对象地址的前四个字节存储的指向虚表的指针\",{\"1\":{\"205\":1}}],[\"对象中存储的\",{\"1\":{\"173\":1}}],[\"对象的哈希值计算需要自行实现\",{\"1\":{\"71\":1}}],[\"对象的哈希值基于其内存地址生成\",{\"1\":{\"71\":1}}],[\"对象等\",{\"1\":{\"44\":1}}],[\"对象\",{\"1\":{\"16\":1,\"165\":1,\"249\":1}}],[\"此操作会删除表和表中的所有数据\",{\"1\":{\"381\":1}}],[\"此方法简单粗暴且有效\",{\"1\":{\"60\":1}}],[\"此时线程对象的生命周期结束调用析构函数清理资源\",{\"1\":{\"234\":1,\"255\":1}}],[\"此时子进程的父进程是\",{\"1\":{\"218\":1}}],[\"此时子类部分的数据成员还未初始化\",{\"1\":{\"207\":1}}],[\"此时\",{\"1\":{\"205\":1,\"319\":1,\"320\":1}}],[\"此时需要先对\",{\"1\":{\"102\":1}}],[\"此时可以将链表转换为\",{\"1\":{\"61\":1}}],[\"此时节点\",{\"1\":{\"34\":1}}],[\"此时就不能用以下公式计算偏移量了\",{\"1\":{\"34\":1}}],[\"此时链表的灵活性优势就体现出来了\",{\"1\":{\"16\":1}}],[\"此过程也属于线性查找\",{\"1\":{\"22\":1}}],[\"此外\",{\"1\":{\"1\":1}}],[\"存储方式\",{\"1\":{\"23\":1}}],[\"存储数组的内存空间必须是连续的\",{\"1\":{\"16\":1}}],[\"存储在堆上\",{\"1\":{\"7\":1}}],[\"存储在栈上和堆上的数组都被存储在连续内存空间内\",{\"1\":{\"34\":1}}],[\"存储在栈上\",{\"1\":{\"7\":1}}],[\"空格\",{\"1\":{\"405\":1}}],[\"空值检查\",{\"1\":{\"388\":1}}],[\"空节点平衡因子为\",{\"1\":{\"98\":1}}],[\"空\",{\"1\":{\"16\":1}}],[\"空闲的内存空间可能散落在内存各处\",{\"1\":{\"16\":1}}],[\"空间效率\",{\"1\":{\"49\":1}}],[\"空间效率高\",{\"1\":{\"14\":1}}],[\"空间开销\",{\"1\":{\"34\":1}}],[\"空间浪费\",{\"1\":{\"14\":1}}],[\"图片\",{\"1\":{\"327\":1}}],[\"图\",{\"1\":{\"25\":1,\"34\":1}}],[\"图的邻接矩阵表示实际上是一个二维数组\",{\"1\":{\"15\":1}}],[\"图等数据结构\",{\"1\":{\"15\":1}}],[\"堆的大小一般受限于可用内存\",{\"1\":{\"34\":1}}],[\"堆上的分配和释放操作通常比栈上的慢\",{\"1\":{\"34\":1}}],[\"堆\",{\"1\":{\"15\":1}}],[\"张量之间的线性代数运算\",{\"1\":{\"15\":1}}],[\"矩阵\",{\"1\":{\"15\":1}}],[\"神经网络中大量使用了向量\",{\"1\":{\"15\":1}}],[\"码累积到一个哈希值中\",{\"1\":{\"69\":1}}],[\"码累积到哈希值中\",{\"1\":{\"69\":1}}],[\"码进行相加\",{\"1\":{\"69\":1}}],[\"码值作为索引\",{\"1\":{\"15\":1}}],[\"码的映射\",{\"1\":{\"15\":1}}],[\"则基于\",{\"1\":{\"364\":1}}],[\"则基于资源的最后修改时间\",{\"1\":{\"342\":1}}],[\"则立即返回\",{\"1\":{\"298\":1}}],[\"则删除基础对象\",{\"1\":{\"265\":1}}],[\"则删除对象\",{\"1\":{\"265\":1}}],[\"则删除操作流程如下图所示\",{\"1\":{\"91\":1}}],[\"则在完整表达式结尾\",{\"1\":{\"262\":1}}],[\"则唤醒所有读线程\",{\"1\":{\"237\":1}}],[\"则唤醒一个写线程\",{\"1\":{\"237\":2}}],[\"则唤醒一个线程\",{\"1\":{\"236\":1}}],[\"则锁定成功\",{\"1\":{\"237\":1}}],[\"则线程进入等待队列\",{\"1\":{\"237\":2}}],[\"则线程成功锁定\",{\"1\":{\"236\":1}}],[\"则增加读计数器\",{\"1\":{\"237\":1}}],[\"则该线程进入等待队列并挂起\",{\"1\":{\"236\":1}}],[\"则该进程被挂起并返回到就绪队列中\",{\"1\":{\"214\":1}}],[\"则运行的是为构造函数或析构函数自身类型定义的版本\",{\"1\":{\"207\":1}}],[\"则底层节点数量\",{\"1\":{\"111\":1}}],[\"则一棵\",{\"1\":{\"98\":1}}],[\"则重新指定根节点\",{\"1\":{\"91\":1}}],[\"则直接返回\",{\"1\":{\"91\":1}}],[\"则初始化根节点\",{\"1\":{\"90\":1}}],[\"则不是\",{\"1\":{\"331\":1}}],[\"则不执行插入\",{\"1\":{\"90\":1}}],[\"则不需要释放内存\",{\"1\":{\"52\":1}}],[\"则节点总数为\",{\"1\":{\"83\":1}}],[\"则其左子节点和右子节点分别是\",{\"1\":{\"77\":1}}],[\"则尝试\",{\"1\":{\"65\":1}}],[\"则用删除标记覆盖它\",{\"1\":{\"63\":1}}],[\"则添加该键值对\",{\"1\":{\"63\":1}}],[\"则覆盖\",{\"1\":{\"63\":1}}],[\"则使用相同步长向后进行线性遍历\",{\"1\":{\"63\":1}}],[\"则从冲突位置向后线性遍历\",{\"1\":{\"63\":1}}],[\"则将其更改为新值\",{\"1\":{\"246\":1}}],[\"则将其传递给下一个对象\",{\"1\":{\"158\":1}}],[\"则将互斥量状态设置为未锁定\",{\"1\":{\"236\":1}}],[\"则将中序遍历的下个节点删除\",{\"1\":{\"107\":1}}],[\"则将键值对移动至该索引处\",{\"1\":{\"63\":1}}],[\"则将键值对添加至尾部\",{\"1\":{\"61\":1}}],[\"则将该节点添加到尾节点后\",{\"1\":{\"41\":1}}],[\"则更新对应\",{\"1\":{\"61\":1}}],[\"则返回非零值\",{\"1\":{\"300\":4}}],[\"则返回其状态\",{\"1\":{\"298\":1}}],[\"则返回\",{\"1\":{\"65\":1,\"299\":1}}],[\"则返回添加点的索引\",{\"1\":{\"63\":1}}],[\"则返回空字符串\",{\"1\":{\"61\":1,\"63\":1}}],[\"则返回对应\",{\"1\":{\"61\":1,\"63\":1}}],[\"则返回到数组头部\",{\"1\":{\"42\":1}}],[\"则必然有多个整数映射至同一桶索引\",{\"1\":{\"60\":1}}],[\"则可以采用下图所示的哈希表来实现\",{\"1\":{\"56\":1}}],[\"则可以在\",{\"1\":{\"56\":1}}],[\"则可以将字符的\",{\"1\":{\"15\":1}}],[\"则令头\",{\"1\":{\"41\":1}}],[\"则多次引用了同一个列表\",{\"1\":{\"34\":1}}],[\"则会造成内存空间浪费\",{\"1\":{\"26\":1}}],[\"则很可能无法满足使用需求\",{\"1\":{\"26\":1}}],[\"则得到一个环形链表\",{\"1\":{\"24\":1}}],[\"则只需改变两个节点引用\",{\"1\":{\"19\":1}}],[\"则需重新建立一个更大的数组\",{\"1\":{\"13\":1}}],[\"则需要执行下图所示的\",{\"1\":{\"101\":1}}],[\"则需要先将上面的盘子依次移走\",{\"1\":{\"44\":1}}],[\"则需要先扩容列表再添加\",{\"1\":{\"34\":1}}],[\"则需要进行扩容\",{\"1\":{\"32\":1}}],[\"则需要把索引\",{\"1\":{\"10\":1}}],[\"则需要将该元素之后的所有元素都向后移动一位\",{\"1\":{\"9\":1}}],[\"awatch\",{\"1\":{\"485\":1}}],[\"await\",{\"1\":{\"260\":1}}],[\"amend\",{\"1\":{\"430\":2}}],[\"a>\",{\"1\":{\"411\":1}}],[\"aaa\",{\"1\":{\"409\":2}}],[\"aa\",{\"1\":{\"409\":2}}],[\"aeiou\",{\"1\":{\"404\":1,\"406\":1}}],[\"abc|xyz\",{\"1\":{\"404\":1}}],[\"abc\",{\"1\":{\"404\":4,\"406\":1}}],[\"abstract\",{\"1\":{\"152\":2}}],[\"abstraction\",{\"1\":{\"142\":2}}],[\"a3b\",{\"1\":{\"404\":1}}],[\"a+\",{\"1\":{\"409\":1}}],[\"a+b\",{\"1\":{\"404\":1}}],[\"a+1\",{\"1\":{\"200\":2}}],[\"avg\",{\"1\":{\"391\":2,\"397\":4}}],[\"avltree\",{\"1\":{\"100\":3}}],[\"avl\",{\"0\":{\"95\":1,\"96\":1,\"99\":1,\"105\":1,\"109\":1},\"1\":{\"61\":1,\"95\":5,\"96\":1,\"97\":2,\"98\":1,\"99\":1,\"104\":1,\"106\":2,\"108\":1,\"109\":1,\"110\":3}}],[\"at\",{\"1\":{\"376\":1,\"389\":2,\"502\":1,\"504\":1}}],[\"atomic提供了原子变量\",{\"1\":{\"262\":1}}],[\"atomic相关\",{\"0\":{\"258\":1},\"1\":{\"254\":1}}],[\"atomic<t>\",{\"1\":{\"258\":1}}],[\"atomic<size\",{\"1\":{\"248\":2}}],[\"atomic<int>\",{\"1\":{\"239\":1,\"258\":1}}],[\"atomic\",{\"1\":{\"239\":1,\"241\":2,\"247\":1}}],[\"authorization\",{\"1\":{\"327\":1,\"329\":1}}],[\"auto\",{\"1\":{\"57\":2,\"58\":1,\"61\":4,\"236\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"255\":3,\"256\":4,\"257\":2,\"259\":1,\"262\":2,\"272\":3,\"274\":1,\"308\":2,\"310\":1,\"311\":3,\"376\":1}}],[\"as\",{\"1\":{\"390\":2,\"391\":1,\"395\":2,\"397\":2,\"420\":1}}],[\"astring\",{\"1\":{\"269\":5}}],[\"async更方便的实现了异步调用\",{\"1\":{\"262\":1}}],[\"async策略来调用async\",{\"1\":{\"262\":1}}],[\"async表示任务执行在另一线程\",{\"1\":{\"262\":1}}],[\"async具体语法如下\",{\"1\":{\"262\":1}}],[\"async\",{\"1\":{\"262\":10}}],[\"async是比future\",{\"1\":{\"262\":1}}],[\"async相关\",{\"0\":{\"262\":1},\"1\":{\"254\":1}}],[\"asc\",{\"1\":{\"389\":1}}],[\"ascendingorder\",{\"1\":{\"186\":1}}],[\"ascii\",{\"1\":{\"15\":2,\"69\":3}}],[\"active\",{\"1\":{\"290\":1}}],[\"action\",{\"1\":{\"255\":3}}],[\"ack状态\",{\"1\":{\"292\":1}}],[\"ack\",{\"1\":{\"290\":3,\"292\":2,\"293\":1}}],[\"acquire\",{\"1\":{\"240\":2,\"241\":1,\"246\":1,\"248\":2,\"249\":4,\"250\":3}}],[\"accept\",{\"1\":{\"229\":1,\"327\":1,\"329\":2}}],[\"access\",{\"1\":{\"21\":1,\"273\":1,\"338\":1}}],[\"after=network\",{\"1\":{\"420\":1}}],[\"af\",{\"1\":{\"229\":4}}],[\"arch\",{\"1\":{\"316\":2}}],[\"argument\",{\"1\":{\"271\":1}}],[\"arguments\",{\"1\":{\"271\":2}}],[\"args>\",{\"1\":{\"262\":1}}],[\"args\",{\"1\":{\"262\":2,\"271\":4,\"480\":1,\"487\":1}}],[\"arg\",{\"1\":{\"185\":2}}],[\"arrive\",{\"1\":{\"242\":1}}],[\"arr1\",{\"1\":{\"7\":1}}],[\"arr\",{\"1\":{\"7\":1,\"42\":3}}],[\"arrayhashmap\",{\"1\":{\"58\":2}}],[\"arraystack\",{\"1\":{\"48\":1}}],[\"arrayqueue\",{\"1\":{\"42\":2}}],[\"arraylist\",{\"1\":{\"26\":1}}],[\"array\",{\"1\":{\"5\":1,\"26\":1,\"47\":1,\"48\":2,\"227\":1}}],[\"always\",{\"1\":{\"420\":1}}],[\"alter\",{\"1\":{\"379\":7}}],[\"alias\",{\"1\":{\"499\":3,\"504\":3}}],[\"alice\",{\"1\":{\"383\":2}}],[\"alive\",{\"1\":{\"333\":1}}],[\"aligncenter\",{\"1\":{\"181\":1}}],[\"allow\",{\"1\":{\"338\":1}}],[\"all\",{\"1\":{\"238\":2,\"260\":1,\"395\":1,\"489\":1}}],[\"algorithm\",{\"1\":{\"95\":1}}],[\"age=3600\",{\"1\":{\"329\":1,\"342\":1}}],[\"agent\",{\"1\":{\"327\":1}}],[\"age\",{\"1\":{\"179\":1,\"379\":3,\"388\":4,\"391\":1}}],[\"apt\",{\"1\":{\"318\":1,\"459\":1}}],[\"api\",{\"0\":{\"346\":1},\"1\":{\"165\":1,\"346\":1,\"347\":1,\"364\":2,\"366\":1}}],[\"application\",{\"1\":{\"329\":1}}],[\"apply\",{\"1\":{\"489\":1}}],[\"applying\",{\"1\":{\"143\":2}}],[\"applycolor\",{\"1\":{\"143\":3}}],[\"append\",{\"1\":{\"319\":2}}],[\"app\",{\"1\":{\"173\":2,\"420\":1}}],[\"approved\",{\"1\":{\"159\":6}}],[\"anaconda3\",{\"1\":{\"420\":1}}],[\"anint\",{\"1\":{\"269\":5}}],[\"and\",{\"1\":{\"234\":2,\"239\":2,\"241\":3,\"242\":1,\"244\":1,\"246\":1,\"271\":1,\"388\":1,\"420\":3}}],[\"any\",{\"1\":{\"229\":1}}],[\"anonymous\",{\"1\":{\"224\":1}}],[\"angular\",{\"1\":{\"163\":1,\"169\":1}}],[\"an\",{\"1\":{\"95\":1}}],[\"addobserver\",{\"1\":{\"310\":1}}],[\"add\",{\"1\":{\"239\":1,\"258\":2,\"379\":2,\"420\":1,\"427\":2,\"429\":3,\"430\":1,\"447\":2,\"450\":1,\"452\":1,\"454\":1,\"461\":2,\"465\":1,\"470\":2}}],[\"addr\",{\"1\":{\"229\":4}}],[\"address\",{\"1\":{\"229\":3}}],[\"addressing\",{\"1\":{\"62\":1}}],[\"adelson\",{\"1\":{\"95\":1}}],[\"a\",{\"0\":{\"34\":1,\"52\":1,\"73\":1,\"111\":1,\"200\":4},\"1\":{\"52\":4,\"59\":1,\"111\":2,\"143\":2,\"150\":2,\"200\":6,\"255\":2,\"268\":14,\"269\":3,\"404\":1,\"405\":1,\"406\":5,\"409\":3,\"412\":4,\"420\":3}}],[\"归并排序\",{\"1\":{\"15\":1}}],[\"开头的字符串\",{\"1\":{\"404\":1}}],[\"开发\",{\"1\":{\"366\":1}}],[\"开发和调用\",{\"0\":{\"346\":1}}],[\"开发者都能够以更清晰的方式管理复杂的数据展示和用户交互\",{\"1\":{\"186\":1}}],[\"开发者可以大大提高调试效率\",{\"1\":{\"505\":1}}],[\"开发者可以大大提升调试效率\",{\"1\":{\"490\":1}}],[\"开发者可以自定义\",{\"1\":{\"494\":1}}],[\"开发者可以更自由地定制数据的显示和交互行为\",{\"1\":{\"184\":1}}],[\"开发者可以控制单元格的外观和编辑方式\",{\"1\":{\"181\":1}}],[\"开发者也可以通过继承\",{\"1\":{\"179\":1}}],[\"开始的\",{\"1\":{\"484\":2}}],[\"开始数据传输\",{\"1\":{\"292\":1}}],[\"开始计数会更自然\",{\"1\":{\"8\":1}}],[\"开闭原则\",{\"1\":{\"118\":1}}],[\"开放寻址法都有不能直接删除元素的缺陷\",{\"1\":{\"73\":1}}],[\"开放寻址通过多次探测来处理哈希冲突\",{\"1\":{\"72\":1}}],[\"开放寻址哈希表\",{\"1\":{\"63\":1}}],[\"开放寻址\",{\"0\":{\"62\":1},\"1\":{\"60\":1,\"62\":1,\"63\":1,\"65\":1}}],[\"开销很大\",{\"1\":{\"14\":1}}],[\"当变量\",{\"1\":{\"485\":1}}],[\"当你更新子模块后\",{\"1\":{\"454\":1}}],[\"当你克隆包含子模块的仓库时\",{\"1\":{\"448\":1}}],[\"当特定事件发生时\",{\"1\":{\"355\":1}}],[\"当内核运行到\",{\"1\":{\"320\":1}}],[\"当所有shared\",{\"1\":{\"267\":1}}],[\"当对象作为另一对象的副本而创建时\",{\"1\":{\"265\":1}}],[\"当计数为0的时候会自动的释放动态分配的资源\",{\"1\":{\"265\":1}}],[\"当计数器减为零时\",{\"1\":{\"243\":1}}],[\"当计数器达到零时\",{\"1\":{\"242\":1}}],[\"当需要获取线程函数返回值\",{\"1\":{\"261\":1}}],[\"当需要获取线程中的某个值\",{\"1\":{\"261\":1}}],[\"当需要快速查找一个元素或其对应关系时\",{\"1\":{\"15\":1}}],[\"当持有锁的线程释放自旋锁时\",{\"1\":{\"241\":1}}],[\"当写线程解锁时\",{\"1\":{\"237\":1}}],[\"当读线程解锁时\",{\"1\":{\"237\":1}}],[\"当子进程结束时\",{\"1\":{\"218\":1}}],[\"当子节点数量\",{\"1\":{\"91\":1}}],[\"当父进程调用\",{\"1\":{\"216\":1}}],[\"当一个子进程停止\",{\"1\":{\"298\":1}}],[\"当一个子进程结束时\",{\"1\":{\"216\":1}}],[\"当一个线程尝试获取自旋锁时\",{\"1\":{\"241\":1}}],[\"当一个线程尝试锁定互斥量时\",{\"1\":{\"236\":1}}],[\"当一个线程执行\",{\"1\":{\"240\":2}}],[\"当一个线程修改条件状态并调用\",{\"1\":{\"238\":1}}],[\"当一个线程请求写锁定时\",{\"1\":{\"237\":1}}],[\"当一个线程请求读锁定时\",{\"1\":{\"237\":1}}],[\"当一个线程解锁互斥量时\",{\"1\":{\"236\":1}}],[\"当一个构造函数被调用时\",{\"1\":{\"208\":1}}],[\"当等待的事件发生\",{\"1\":{\"214\":1}}],[\"当进程完成其任务或被强制终止时\",{\"1\":{\"214\":1}}],[\"当进程执行\",{\"1\":{\"214\":1}}],[\"当进程创建完成\",{\"1\":{\"214\":1}}],[\"当删除基类指针指向的派生类对象时就不会触发动态绑定\",{\"1\":{\"208\":1}}],[\"当这一系列构造函数调用正发生时\",{\"1\":{\"208\":1}}],[\"当编译器为这个构造函数产生代码时\",{\"1\":{\"208\":1}}],[\"当前目录中的\",{\"1\":{\"496\":1}}],[\"当前目录下的\",{\"1\":{\"496\":1}}],[\"当前目录文件\",{\"1\":{\"319\":1}}],[\"当前cpu个数\",{\"1\":{\"255\":1}}],[\"当前线程id\",{\"1\":{\"255\":1}}],[\"当前\",{\"1\":{\"208\":1}}],[\"当派生类中有自己的虚函数时\",{\"1\":{\"205\":1}}],[\"当派生类对基类的虚函数重写时\",{\"1\":{\"205\":1}}],[\"当派生类对基类的虚函数没有重写时\",{\"1\":{\"205\":1}}],[\"当调用子类的构造函数时\",{\"1\":{\"205\":1}}],[\"当模型的布局发生变化时发出\",{\"1\":{\"183\":1}}],[\"当模型中的某个数据项发生变化时发出\",{\"1\":{\"183\":1}}],[\"当系统中出现新的功能需求时\",{\"1\":{\"135\":1}}],[\"当有新的策略出现时\",{\"1\":{\"131\":1}}],[\"当状态改变时\",{\"1\":{\"124\":1}}],[\"当主题状态改变时\",{\"1\":{\"124\":1,\"125\":1}}],[\"当主题对象的状态发生变化时\",{\"1\":{\"123\":1}}],[\"当二叉搜索树退化为链表时\",{\"1\":{\"110\":1}}],[\"当二叉树平衡时\",{\"1\":{\"89\":1}}],[\"当二叉树的每层节点都被填满时\",{\"1\":{\"86\":1}}],[\"当节点\",{\"1\":{\"100\":1,\"101\":1}}],[\"当待删除节点的度为\",{\"1\":{\"91\":3}}],[\"当给定一个二叉树的节点时\",{\"1\":{\"77\":1}}],[\"当将新元素插入哈希表\",{\"1\":{\"73\":1}}],[\"当哈希函数设计得比较好\",{\"1\":{\"73\":1}}],[\"当哈希冲突比较严重时\",{\"1\":{\"73\":1}}],[\"当哈希表容量\",{\"1\":{\"67\":1}}],[\"当列表的内容发生变化时\",{\"1\":{\"71\":1}}],[\"当溢出桶过多时\",{\"1\":{\"66\":1}}],[\"当\",{\"1\":{\"66\":1,\"168\":1,\"182\":1}}],[\"当发生冲突时\",{\"1\":{\"64\":1}}],[\"当遇到空桶时跳出\",{\"1\":{\"63\":1}}],[\"当越过数组尾部时\",{\"1\":{\"63\":1}}],[\"当链表很长时\",{\"1\":{\"61\":1}}],[\"当负载因子超过阈值时\",{\"1\":{\"61\":1,\"63\":1}}],[\"当负载因子超过\",{\"1\":{\"59\":1,\"61\":1}}],[\"当输入的\",{\"1\":{\"59\":1}}],[\"当用户在输入框中输入数据时\",{\"1\":{\"173\":1}}],[\"当用户输入密码时\",{\"1\":{\"68\":1}}],[\"当用户执行\",{\"1\":{\"52\":2}}],[\"当用户点击后退按钮时\",{\"1\":{\"52\":1}}],[\"当用户点击前进或后退按钮时\",{\"1\":{\"25\":1}}],[\"当用户访问一个新页面时\",{\"1\":{\"52\":1}}],[\"当入栈与出栈操作的元素是基本数据类型时\",{\"1\":{\"49\":1}}],[\"当作栈来使用\",{\"1\":{\"45\":1}}],[\"当它们到达数组尾部时就无法继续移动了\",{\"1\":{\"42\":1}}],[\"当使用数组实现列表时\",{\"1\":{\"26\":1}}],[\"当时间片用完时\",{\"1\":{\"25\":1}}],[\"当插入或删除行时发出\",{\"1\":{\"183\":1}}],[\"当插入操作在链表的一端进行\",{\"1\":{\"25\":1}}],[\"当插入和删除操作都在链表的一端进行时\",{\"1\":{\"25\":1}}],[\"当数组中元素较多时\",{\"1\":{\"14\":1}}],[\"当访问数组元素时\",{\"1\":{\"14\":1}}],[\"插入符号\",{\"1\":{\"404\":1}}],[\"插入和删除操作的时间复杂度均为\",{\"1\":{\"110\":1}}],[\"插入\",{\"1\":{\"94\":1,\"398\":1}}],[\"插入位置在\",{\"1\":{\"90\":2}}],[\"插入操作流程如下图所示\",{\"1\":{\"90\":1}}],[\"插入节点使用\",{\"1\":{\"90\":1}}],[\"插入节点可能会改变二叉树的原有逻辑结构\",{\"1\":{\"81\":1}}],[\"插入节点\",{\"0\":{\"19\":1,\"90\":1,\"106\":1},\"1\":{\"90\":2}}],[\"插入与删除通常是由一套操作配合完成的\",{\"1\":{\"81\":1}}],[\"插入与删除节点所需的旋转操作更少\",{\"1\":{\"109\":1}}],[\"插入与删除节点\",{\"0\":{\"81\":1},\"1\":{\"81\":1}}],[\"插入与删除元素\",{\"0\":{\"30\":1}}],[\"插入与删除操作需要移动大量的元素\",{\"1\":{\"14\":1}}],[\"插入与删除效率低\",{\"1\":{\"14\":1}}],[\"插入元素\",{\"0\":{\"9\":1},\"1\":{\"63\":1,\"65\":1,\"93\":1}}],[\"etc\",{\"1\":{\"420\":1,\"496\":1}}],[\"etag\",{\"1\":{\"342\":2,\"343\":1}}],[\"email\",{\"1\":{\"376\":1,\"383\":2,\"384\":2,\"387\":2,\"388\":2,\"395\":3}}],[\"employees\",{\"1\":{\"390\":2,\"391\":2,\"397\":1}}],[\"employee\",{\"1\":{\"390\":3,\"397\":2}}],[\"emplace\",{\"1\":{\"242\":1,\"243\":1,\"269\":6}}],[\"empty\",{\"1\":{\"39\":2,\"45\":2}}],[\"events\",{\"0\":{\"356\":1}}],[\"echo\",{\"1\":{\"317\":2}}],[\"established\",{\"1\":{\"290\":1,\"292\":1,\"293\":1}}],[\"errno\",{\"1\":{\"299\":1}}],[\"error\",{\"1\":{\"275\":1,\"328\":1}}],[\"erase\",{\"1\":{\"30\":1,\"57\":1,\"61\":1}}],[\"easier\",{\"1\":{\"269\":1}}],[\"effective\",{\"1\":{\"195\":1}}],[\"elide\",{\"1\":{\"268\":2}}],[\"el\",{\"1\":{\"173\":1}}],[\"else\",{\"1\":{\"41\":1,\"63\":2,\"89\":2,\"90\":2,\"91\":4,\"104\":2,\"106\":2,\"107\":4,\"159\":6,\"218\":4,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"255\":1,\"260\":1,\"301\":6,\"311\":1}}],[\"equals\",{\"1\":{\"111\":3}}],[\"executable\",{\"1\":{\"461\":2,\"465\":1,\"500\":1,\"504\":2}}],[\"execute\",{\"1\":{\"234\":1}}],[\"execstart=\",{\"1\":{\"420\":1}}],[\"expression\",{\"1\":{\"402\":1}}],[\"explicit\",{\"1\":{\"97\":1,\"260\":1}}],[\"exists\",{\"1\":{\"394\":2}}],[\"exited\",{\"1\":{\"301\":1}}],[\"exit\",{\"1\":{\"218\":5,\"220\":12,\"228\":1}}],[\"exclusion\",{\"1\":{\"244\":1}}],[\"example\",{\"1\":{\"234\":1,\"330\":1,\"383\":3,\"384\":1,\"388\":1,\"411\":1,\"447\":1}}],[\"extern\",{\"0\":{\"202\":1},\"1\":{\"202\":1}}],[\"extendratio\",{\"1\":{\"61\":3,\"63\":2}}],[\"extend\",{\"1\":{\"13\":1,\"61\":2,\"63\":2}}],[\"e\",{\"1\":{\"95\":1,\"285\":2,\"317\":1}}],[\"edge\",{\"1\":{\"78\":1}}],[\"ensure\",{\"1\":{\"420\":1}}],[\"environment=\",{\"1\":{\"420\":3}}],[\"encoding\",{\"1\":{\"333\":1,\"359\":1}}],[\"encryptstring<sizeof\",{\"1\":{\"285\":1}}],[\"encryptstring\",{\"1\":{\"285\":2,\"286\":1}}],[\"enum\",{\"1\":{\"255\":1,\"275\":2}}],[\"enqueue\",{\"1\":{\"248\":2,\"249\":5}}],[\"enter\",{\"1\":{\"173\":1}}],[\"enddraw\",{\"1\":{\"308\":2}}],[\"end\",{\"1\":{\"57\":1,\"502\":1,\"503\":2,\"504\":2}}],[\"endl\",{\"1\":{\"42\":1,\"57\":2,\"58\":1,\"63\":3,\"125\":1,\"131\":2,\"137\":5,\"143\":2,\"150\":2,\"153\":4,\"159\":3,\"220\":4,\"224\":1,\"225\":2,\"226\":1,\"227\":4,\"229\":1,\"236\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":2,\"243\":2,\"248\":2,\"249\":2,\"255\":5,\"256\":2,\"257\":1,\"259\":1,\"261\":2,\"262\":1,\"285\":2,\"301\":9,\"464\":1}}],[\"enlarge\",{\"1\":{\"13\":2}}],[\"扩展状态码和方法\",{\"1\":{\"358\":1}}],[\"扩展机制\",{\"0\":{\"358\":1}}],[\"扩展性和负载分担能力\",{\"1\":{\"354\":1}}],[\"扩展抽象类\",{\"1\":{\"142\":1}}],[\"扩展数组长度\",{\"1\":{\"13\":1}}],[\"扩容哈希表\",{\"1\":{\"61\":1,\"63\":1}}],[\"扩容后冲突消失\",{\"1\":{\"59\":1}}],[\"扩容后的容量也可能超出实际需求\",{\"1\":{\"49\":1}}],[\"扩容前键值对\",{\"1\":{\"59\":1}}],[\"扩容一般会乘以一个系数\",{\"1\":{\"34\":1}}],[\"扩容倍数\",{\"1\":{\"61\":1,\"63\":1}}],[\"扩容倍数所占的内存吗\",{\"1\":{\"34\":1}}],[\"扩容倍数等\",{\"1\":{\"32\":1}}],[\"扩容机制通常是按照特定倍率\",{\"1\":{\"49\":1}}],[\"扩容机制\",{\"1\":{\"32\":1}}],[\"扩容数组需要将所有数据复制到新数组\",{\"1\":{\"14\":1}}],[\"扩容数组\",{\"0\":{\"13\":1}}],[\"tbreak\",{\"1\":{\"482\":1}}],[\"txt\",{\"1\":{\"429\":1,\"434\":1,\"460\":2,\"461\":1,\"463\":1,\"465\":1}}],[\"tls\",{\"1\":{\"337\":2}}],[\"two\",{\"1\":{\"271\":1}}],[\"timestamp\",{\"1\":{\"376\":2}}],[\"time\",{\"1\":{\"260\":3,\"290\":1,\"292\":1,\"293\":1,\"420\":1}}],[\"timed\",{\"1\":{\"256\":8}}],[\"tt\",{\"1\":{\"255\":3}}],[\"t>\",{\"1\":{\"248\":3,\"249\":1}}],[\"t4\",{\"1\":{\"237\":2}}],[\"t3\",{\"1\":{\"237\":2}}],[\"t2\",{\"1\":{\"237\":2}}],[\"t1\",{\"1\":{\"237\":2}}],[\"tcp连接状态图详细展示了从连接建立到数据传输\",{\"1\":{\"294\":1}}],[\"tcp连接的状态图\",{\"1\":{\"289\":1}}],[\"tcp状态图解释\",{\"0\":{\"290\":1}}],[\"tcp\",{\"0\":{\"289\":1},\"1\":{\"229\":2,\"289\":1,\"333\":1,\"334\":1,\"335\":1},\"2\":{\"296\":1}}],[\"typing\",{\"1\":{\"153\":2}}],[\"typename\",{\"1\":{\"262\":1}}],[\"types>\",{\"1\":{\"271\":1}}],[\"types\",{\"1\":{\"220\":1,\"271\":1}}],[\"type\",{\"1\":{\"153\":3,\"225\":2,\"272\":4,\"327\":1,\"329\":3}}],[\"terminating\",{\"1\":{\"301\":1}}],[\"terminated\",{\"1\":{\"213\":1,\"301\":1}}],[\"test\",{\"1\":{\"241\":2,\"268\":3}}],[\"text\",{\"1\":{\"225\":5,\"329\":2}}],[\"textbox\",{\"1\":{\"153\":5}}],[\"teamleader\",{\"1\":{\"159\":5}}],[\"teamleaderhandler\",{\"1\":{\"159\":1}}],[\"team\",{\"1\":{\"159\":4}}],[\"template<unsigned\",{\"1\":{\"285\":1}}],[\"template<class\",{\"1\":{\"271\":1}}],[\"template\",{\"1\":{\"248\":1,\"249\":1,\"262\":1}}],[\"tempval\",{\"1\":{\"107\":2}}],[\"temp\",{\"1\":{\"107\":6}}],[\"transfer\",{\"1\":{\"333\":1,\"359\":1}}],[\"traverse\",{\"1\":{\"11\":1}}],[\"try\",{\"1\":{\"256\":1}}],[\"treenode\",{\"1\":{\"77\":4,\"80\":10,\"81\":2,\"89\":2,\"90\":4,\"91\":3,\"97\":6,\"98\":1,\"100\":4,\"101\":4,\"104\":2,\"106\":3,\"107\":4}}],[\"tree\",{\"1\":{\"77\":1,\"83\":1,\"84\":1,\"85\":1,\"87\":1,\"96\":1,\"111\":1}}],[\"true\",{\"1\":{\"71\":1,\"159\":3,\"220\":1,\"228\":1,\"238\":2,\"248\":2,\"249\":2}}],[\"t\",{\"1\":{\"71\":4,\"218\":5,\"220\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"238\":2,\"248\":9,\"249\":8,\"255\":15,\"260\":4,\"261\":2,\"298\":2,\"301\":2,\"317\":4}}],[\"th\",{\"1\":{\"236\":2,\"238\":2,\"239\":2,\"240\":2,\"241\":2,\"242\":2,\"243\":2,\"256\":4,\"257\":2,\"259\":2}}],[\"that\",{\"1\":{\"234\":2}}],[\"thread使线程的创建变得非常简单\",{\"1\":{\"262\":1}}],[\"thread高级些\",{\"1\":{\"261\":1}}],[\"threadguard\",{\"1\":{\"255\":8}}],[\"thread相关\",{\"0\":{\"255\":1},\"1\":{\"254\":1}}],[\"thread>\",{\"1\":{\"242\":1,\"243\":1}}],[\"threads\",{\"1\":{\"234\":1,\"236\":3,\"238\":3,\"239\":3,\"240\":3,\"241\":3,\"242\":3,\"243\":3,\"256\":6,\"257\":3,\"259\":3,\"489\":2}}],[\"thread\",{\"1\":{\"234\":6,\"236\":5,\"237\":4,\"238\":5,\"239\":2,\"240\":4,\"241\":4,\"242\":2,\"243\":2,\"248\":2,\"249\":2,\"255\":10,\"256\":4,\"257\":2,\"259\":2,\"261\":2,\"489\":3}}],[\"thread来创建线程\",{\"1\":{\"234\":1,\"255\":1}}],[\"throw\",{\"1\":{\"41\":1,\"42\":1,\"47\":1,\"48\":1}}],[\"then\",{\"1\":{\"420\":2}}],[\"the\",{\"1\":{\"95\":1,\"243\":1,\"269\":1,\"420\":3}}],[\"this\",{\"1\":{\"58\":2,\"238\":1,\"240\":1,\"241\":1,\"255\":1,\"264\":1}}],[\"tar\",{\"1\":{\"316\":3,\"317\":3,\"319\":2}}],[\"targets\",{\"1\":{\"473\":1}}],[\"target\",{\"1\":{\"12\":2,\"22\":4,\"320\":2,\"420\":2,\"470\":2,\"471\":1,\"472\":2}}],[\"taskmanager\",{\"1\":{\"311\":1}}],[\"task和promise那么麻烦\",{\"1\":{\"262\":1}}],[\"task包装的是一个函数\",{\"1\":{\"261\":1}}],[\"task在future高一层\",{\"1\":{\"261\":1}}],[\"task<int\",{\"1\":{\"261\":1}}],[\"task与std\",{\"1\":{\"261\":1}}],[\"task则用来包装一个调用对象\",{\"1\":{\"261\":1}}],[\"task\",{\"1\":{\"261\":5,\"262\":1,\"311\":8}}],[\"tail\",{\"1\":{\"248\":5,\"249\":11,\"250\":2}}],[\"table\",{\"1\":{\"56\":1,\"376\":4,\"377\":2,\"378\":1,\"379\":10,\"380\":5,\"381\":4,\"383\":1,\"384\":1,\"385\":1,\"387\":1}}],[\"token\",{\"1\":{\"339\":1,\"340\":1}}],[\"took\",{\"1\":{\"317\":1}}],[\"to\",{\"1\":{\"220\":3,\"275\":1,\"330\":1,\"380\":2,\"420\":2,\"452\":1,\"500\":2,\"503\":1}}],[\"tostring\",{\"1\":{\"181\":1}}],[\"tombstone\",{\"1\":{\"63\":19}}],[\"top\",{\"1\":{\"45\":2,\"47\":2,\"48\":2}}],[\"tovector\",{\"1\":{\"41\":1,\"42\":1,\"47\":1,\"48\":1}}],[\"tmpfs\",{\"1\":{\"317\":1}}],[\"tmpval\",{\"1\":{\"91\":2}}],[\"tmp\",{\"1\":{\"41\":2,\"47\":2,\"61\":2,\"91\":11,\"317\":2}}],[\"feature\",{\"1\":{\"430\":1,\"434\":1,\"438\":2,\"439\":2,\"440\":1}}],[\"fetch\",{\"1\":{\"239\":1,\"443\":1,\"445\":2}}],[\"f1\",{\"1\":{\"317\":1}}],[\"f1​\",{\"1\":{\"65\":2}}],[\"fno\",{\"1\":{\"268\":2}}],[\"full\",{\"1\":{\"392\":2}}],[\"fut\",{\"1\":{\"261\":6}}],[\"future用于异步调用的包装和返回值\",{\"1\":{\"262\":1}}],[\"future用于访问异步操作的结果\",{\"1\":{\"261\":1}}],[\"future的析构函数将阻塞直至异步计算完成\",{\"1\":{\"262\":1}}],[\"future<int>\",{\"1\":{\"261\":3}}],[\"future配合使用\",{\"1\":{\"261\":2}}],[\"future是不可以复制的\",{\"1\":{\"261\":1}}],[\"future作为异步结果的传输通道\",{\"1\":{\"261\":1}}],[\"future比std\",{\"1\":{\"261\":1}}],[\"future\",{\"1\":{\"261\":4,\"262\":1}}],[\"future相关\",{\"0\":{\"261\":1},\"1\":{\"254\":1}}],[\"func1\",{\"1\":{\"255\":2,\"256\":4,\"257\":2}}],[\"func\",{\"1\":{\"205\":4,\"255\":3,\"261\":4,\"262\":3}}],[\"function主要是为了再不完全了解细节的情况下也能正确处理对象\",{\"1\":{\"208\":1}}],[\"function\",{\"1\":{\"58\":1,\"504\":1}}],[\"fun\",{\"1\":{\"205\":2}}],[\"flag使用\",{\"1\":{\"259\":1}}],[\"flag\",{\"1\":{\"241\":5,\"259\":1}}],[\"float\",{\"1\":{\"125\":2,\"310\":1}}],[\"ftok\",{\"1\":{\"225\":1,\"226\":1,\"227\":1}}],[\"fd\",{\"1\":{\"224\":8,\"229\":5}}],[\"found\",{\"1\":{\"328\":2,\"511\":1}}],[\"foundation\",{\"1\":{\"163\":1}}],[\"foo\",{\"1\":{\"202\":2,\"234\":6,\"482\":4,\"485\":2,\"489\":2}}],[\"fortran\",{\"1\":{\"478\":1}}],[\"forward<args>\",{\"1\":{\"262\":1}}],[\"forward<f>\",{\"1\":{\"262\":1}}],[\"fork第二个子进程\",{\"1\":{\"220\":1}}],[\"fork子进程并退出父进程\",{\"1\":{\"220\":1}}],[\"fork\",{\"1\":{\"218\":10,\"220\":4,\"221\":4,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"301\":2,\"302\":1}}],[\"format=newc\",{\"1\":{\"317\":1}}],[\"form\",{\"1\":{\"125\":2}}],[\"for\",{\"1\":{\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"13\":1,\"21\":1,\"31\":2,\"41\":1,\"42\":1,\"47\":1,\"57\":2,\"58\":5,\"61\":9,\"63\":3,\"69\":1,\"95\":1,\"125\":1,\"228\":1,\"236\":2,\"237\":1,\"238\":3,\"239\":3,\"240\":3,\"241\":3,\"242\":2,\"243\":2,\"248\":2,\"249\":2,\"255\":4,\"256\":7,\"257\":3,\"259\":2,\"260\":1,\"269\":1,\"273\":1,\"285\":2,\"308\":1,\"310\":1,\"311\":1}}],[\"failure\",{\"1\":{\"220\":4}}],[\"failed\",{\"1\":{\"220\":4,\"301\":2}}],[\"false\",{\"1\":{\"159\":3,\"238\":1,\"248\":2,\"249\":2}}],[\"factory\",{\"1\":{\"152\":2,\"153\":7}}],[\"factor\",{\"1\":{\"59\":1,\"98\":1}}],[\"fssl\",{\"1\":{\"420\":1}}],[\"fs\",{\"1\":{\"137\":3}}],[\"f\",{\"1\":{\"73\":2,\"98\":1,\"262\":7,\"271\":4,\"274\":2,\"451\":1}}],[\"f3​\",{\"1\":{\"65\":1}}],[\"f2​\",{\"1\":{\"65\":2}}],[\"fiddler\",{\"1\":{\"347\":1}}],[\"finish\",{\"1\":{\"483\":1}}],[\"finishes\",{\"1\":{\"234\":2}}],[\"fin\",{\"1\":{\"290\":2,\"292\":1,\"293\":2}}],[\"final\",{\"1\":{\"239\":1}}],[\"findbucket\",{\"1\":{\"63\":4}}],[\"find\",{\"1\":{\"12\":1,\"22\":1,\"317\":1,\"471\":2}}],[\"fifo\",{\"1\":{\"224\":1}}],[\"file\",{\"1\":{\"429\":1,\"434\":1,\"482\":4,\"500\":2,\"504\":2}}],[\"fileno\",{\"1\":{\"220\":6}}],[\"filestream\",{\"1\":{\"137\":4}}],[\"filespliter\",{\"1\":{\"125\":2}}],[\"filter\",{\"1\":{\"160\":1}}],[\"firsttombstone\",{\"1\":{\"63\":8}}],[\"first\",{\"1\":{\"57\":1,\"234\":4,\"420\":2}}],[\"frame\",{\"1\":{\"484\":2,\"487\":1}}],[\"from\",{\"1\":{\"224\":1,\"225\":2,\"226\":1,\"229\":2,\"275\":1,\"377\":1,\"378\":2,\"385\":3,\"387\":3,\"388\":1,\"389\":1,\"390\":2,\"391\":2,\"392\":5,\"393\":3,\"394\":2,\"395\":2,\"396\":1,\"397\":2,\"503\":2,\"504\":1}}],[\"front\",{\"1\":{\"39\":2,\"41\":11,\"42\":13}}],[\"free\",{\"1\":{\"199\":1,\"245\":1}}],[\"freememorylinkedlist\",{\"1\":{\"41\":1,\"47\":1}}],[\"若从\",{\"1\":{\"262\":1}}],[\"若删除节点为根节点\",{\"1\":{\"91\":1}}],[\"若无待删除节点\",{\"1\":{\"91\":1}}],[\"若无该\",{\"1\":{\"61\":1}}],[\"若树为空\",{\"1\":{\"90\":1,\"91\":1}}],[\"若树的高度为\",{\"1\":{\"83\":1}}],[\"若待插入节点在树中已存在\",{\"1\":{\"90\":1}}],[\"若哈希函数\",{\"1\":{\"65\":1}}],[\"若键值对不存在\",{\"1\":{\"63\":2}}],[\"若\",{\"1\":{\"63\":1,\"89\":3}}],[\"若之前遇到了删除标记\",{\"1\":{\"63\":1}}],[\"若之后不需要用到\",{\"1\":{\"52\":1}}],[\"若遇到空位或已尝试所有哈希函数\",{\"1\":{\"65\":1}}],[\"若遇到\",{\"1\":{\"63\":1}}],[\"若遇到指定\",{\"1\":{\"61\":1}}],[\"若发现哈希冲突\",{\"1\":{\"63\":1}}],[\"若发现桶内已有元素\",{\"1\":{\"63\":1}}],[\"若未找到\",{\"1\":{\"61\":1}}],[\"若找到键值对\",{\"1\":{\"63\":3}}],[\"若找到\",{\"1\":{\"61\":1}}],[\"若越过尾部\",{\"1\":{\"42\":1}}],[\"若插入元素时列表容量已满\",{\"1\":{\"32\":1}}],[\"若长度过大\",{\"1\":{\"26\":1}}],[\"若长度过小\",{\"1\":{\"26\":1}}],[\"若匹配则输出对应索引\",{\"1\":{\"12\":1}}],[\"若想删除索引\",{\"1\":{\"10\":1}}],[\"但保留工作目录更改\",{\"1\":{\"436\":1}}],[\"但尽量少匹配\",{\"1\":{\"411\":4}}],[\"但会匹配像\",{\"1\":{\"407\":1}}],[\"但只返回响应头\",{\"1\":{\"327\":1}}],[\"但只能使用一次\",{\"1\":{\"243\":1}}],[\"但需要特别注意初始化和更新嵌套结构时可能出现的复杂性\",{\"1\":{\"453\":1}}],[\"但需要进程间同步机制\",{\"1\":{\"226\":1}}],[\"但需要注意的是\",{\"1\":{\"51\":1}}],[\"但假设接着另一个更晚派生的构造函数被调用\",{\"1\":{\"208\":1}}],[\"但在写入时只允许一个线程操作\",{\"1\":{\"237\":1}}],[\"但在实际应用中\",{\"1\":{\"185\":1}}],[\"但在扩容过程中\",{\"1\":{\"51\":1}}],[\"但也带来了性能和调试方面的挑战\",{\"1\":{\"174\":1}}],[\"但也需要注意链条过长带来的性能问题\",{\"1\":{\"160\":1}}],[\"但不会自动合并\",{\"1\":{\"445\":1}}],[\"但不合并到本地分支\",{\"1\":{\"445\":1}}],[\"但不匹配空字符串\",{\"1\":{\"409\":1}}],[\"但不匹配\",{\"1\":{\"407\":1}}],[\"但不提供具体实现\",{\"1\":{\"142\":1}}],[\"但不同的是\",{\"1\":{\"63\":1}}],[\"但有些题目或教材可能会将其定义为\",{\"1\":{\"78\":1}}],[\"但空间效率变低了\",{\"1\":{\"73\":1}}],[\"但为什么效率可以比它们更高呢\",{\"1\":{\"73\":1}}],[\"但多个哈希函数增加了计算量\",{\"1\":{\"72\":1}}],[\"但多个哈希函数会带来额外的计算量\",{\"1\":{\"65\":1}}],[\"但它会占用一个进程表项\",{\"1\":{\"217\":1}}],[\"但它的进程描述符\",{\"1\":{\"216\":1}}],[\"但它的内存地址不变\",{\"1\":{\"71\":1}}],[\"但它没有显式的\",{\"1\":{\"184\":1}}],[\"但它是可哈希的\",{\"1\":{\"71\":1}}],[\"但目前使用覆盖度不如\",{\"1\":{\"70\":1}}],[\"但效率太低\",{\"1\":{\"60\":1}}],[\"但由于扩容是低频操作\",{\"1\":{\"49\":1}}],[\"但由于其长度不可变\",{\"1\":{\"26\":1}}],[\"但这已超出了栈的定义范畴\",{\"1\":{\"49\":1}}],[\"但这样做会造成部分内存空间浪费\",{\"1\":{\"10\":1}}],[\"但二维数组会有这个问题\",{\"1\":{\"34\":1}}],[\"但好像一些算法书上不怎么直接使用它\",{\"1\":{\"34\":1}}],[\"但是某些步骤的细节部分由子类实现\",{\"1\":{\"308\":1}}],[\"但是在实际应用中使用智能指针有一些需要注意的地方\",{\"1\":{\"264\":1}}],[\"但是我平时只存放整形\",{\"1\":{\"258\":1}}],[\"但是对象还没有实例化\",{\"1\":{\"208\":1}}],[\"但是这个指向vtable的指针事实上是存储在对象的内存空间的\",{\"1\":{\"208\":1}}],[\"但是\",{\"1\":{\"49\":1}}],[\"但是初始化\",{\"1\":{\"34\":1}}],[\"但是增删之前都需要\",{\"1\":{\"34\":1}}],[\"但可能导致部分内存空间浪费\",{\"1\":{\"33\":1,\"34\":1}}],[\"但可能浪费空间\",{\"1\":{\"23\":1}}],[\"但节点访问效率低\",{\"1\":{\"33\":1}}],[\"但插入和删除元素效率低\",{\"1\":{\"33\":1}}],[\"但插入和删除元素的效率仍与数组相同\",{\"1\":{\"30\":1}}],[\"但相应地也需要占用更多的内存空间\",{\"1\":{\"24\":1}}],[\"但实际上遍历此链表已经无法访问到\",{\"1\":{\"20\":1}}],[\"但从地址计算公式的角度看\",{\"1\":{\"8\":1}}],[\"的一个强大工具\",{\"1\":{\"505\":1}}],[\"的一端已经发送了连接请求\",{\"1\":{\"290\":1}}],[\"的函数\",{\"1\":{\"502\":1}}],[\"的文件是全局的\",{\"1\":{\"496\":1}}],[\"的显示风格\",{\"1\":{\"495\":1}}],[\"的行为\",{\"1\":{\"494\":1}}],[\"的初始化文件\",{\"1\":{\"494\":1}}],[\"的配置文件\",{\"0\":{\"494\":1}}],[\"的基本用法和高级功能\",{\"1\":{\"490\":1}}],[\"的基本用法\",{\"1\":{\"478\":1}}],[\"的基本教程\",{\"1\":{\"458\":1}}],[\"的基本使用\",{\"0\":{\"369\":1}}],[\"的前\",{\"1\":{\"397\":1}}],[\"的用户名\",{\"1\":{\"393\":1}}],[\"的用户操作\",{\"1\":{\"167\":1}}],[\"的掌握程度\",{\"1\":{\"366\":1}}],[\"的错误处理\",{\"0\":{\"360\":1}}],[\"的扩展和定制\",{\"0\":{\"357\":1}}],[\"的事件回调机制\",{\"1\":{\"355\":1}}],[\"的图形化工具\",{\"1\":{\"347\":1}}],[\"的队头阻塞问题\",{\"1\":{\"334\":1}}],[\"的组成部分\",{\"1\":{\"330\":1}}],[\"的连接\",{\"1\":{\"319\":1}}],[\"的流程基本固定\",{\"1\":{\"308\":1}}],[\"的常见应用\",{\"0\":{\"303\":1}}],[\"的返回值\",{\"0\":{\"299\":1}}],[\"的任何子进程\",{\"1\":{\"298\":1}}],[\"的特定子进程\",{\"1\":{\"298\":1}}],[\"的语法\",{\"0\":{\"298\":1}}],[\"的助手\",{\"1\":{\"264\":1}}],[\"的值\",{\"1\":{\"249\":2,\"484\":2,\"502\":1}}],[\"的值覆盖待删除节点的值\",{\"1\":{\"91\":1}}],[\"的进程\",{\"1\":{\"218\":1}}],[\"的表现力更强\",{\"1\":{\"186\":1}}],[\"的职责分散到\",{\"1\":{\"184\":1}}],[\"的设计将\",{\"1\":{\"184\":1}}],[\"的设计上\",{\"1\":{\"67\":1}}],[\"的主要职责\",{\"1\":{\"179\":1,\"180\":1,\"181\":1}}],[\"的应用\",{\"1\":{\"174\":1}}],[\"的代码\",{\"1\":{\"171\":1}}],[\"的解耦程度\",{\"1\":{\"169\":1}}],[\"的核心文件\",{\"1\":{\"460\":1}}],[\"的核心是\",{\"1\":{\"169\":1}}],[\"的核心概念\",{\"0\":{\"164\":1}}],[\"的控制器承担了较多的业务逻辑处理工作\",{\"1\":{\"169\":1}}],[\"的对比\",{\"0\":{\"169\":1}}],[\"的数据流\",{\"0\":{\"182\":1}}],[\"的数据流动也同步\",{\"1\":{\"168\":1}}],[\"的数据流动\",{\"1\":{\"168\":1}}],[\"的数据\",{\"1\":{\"180\":1}}],[\"的数据绑定和交互\",{\"1\":{\"173\":1}}],[\"的数据绑定和通信机制可能有一定的难度\",{\"1\":{\"172\":1}}],[\"的数量\",{\"1\":{\"97\":1}}],[\"的工作原理是通过数据绑定实现视图和模型的同步\",{\"1\":{\"168\":1}}],[\"的工作原理\",{\"0\":{\"168\":1},\"1\":{\"173\":1}}],[\"的变化\",{\"1\":{\"166\":1,\"485\":1}}],[\"的展现层\",{\"1\":{\"166\":1}}],[\"的风险\",{\"1\":{\"118\":1}}],[\"的满二叉树\",{\"1\":{\"111\":1}}],[\"的父节点和\",{\"1\":{\"111\":1}}],[\"的优缺点\",{\"0\":{\"170\":1}}],[\"的优先级遍历树\",{\"1\":{\"111\":1}}],[\"的优势\",{\"1\":{\"86\":1}}],[\"的遍历方式\",{\"1\":{\"110\":1}}],[\"的遍历顺序\",{\"1\":{\"92\":1}}],[\"的逐层遍历方式\",{\"1\":{\"110\":1}}],[\"的平衡因子\",{\"1\":{\"104\":1}}],[\"的左旋操作\",{\"1\":{\"101\":1}}],[\"的左子节点\",{\"1\":{\"100\":1}}],[\"的左子树中\",{\"1\":{\"89\":2,\"90\":1,\"91\":1}}],[\"的右子节点\",{\"1\":{\"101\":1}}],[\"的右子树中\",{\"1\":{\"89\":2,\"90\":1,\"91\":1}}],[\"的右旋操作\",{\"1\":{\"100\":1}}],[\"的大小关系\",{\"1\":{\"92\":1}}],[\"的大小关系循环向下搜索\",{\"1\":{\"90\":1}}],[\"的下一个节点\",{\"1\":{\"91\":1}}],[\"的位置\",{\"1\":{\"90\":1}}],[\"的性能优势\",{\"0\":{\"352\":1}}],[\"的性能会更好\",{\"1\":{\"34\":1}}],[\"的性质仍然满足\",{\"1\":{\"91\":1}}],[\"的性质\",{\"1\":{\"90\":1,\"91\":1,\"99\":1}}],[\"的树的高度\",{\"1\":{\"86\":1}}],[\"的树的节点总数\",{\"1\":{\"86\":1}}],[\"的树的叶节点数量\",{\"1\":{\"86\":1}}],[\"的分离\",{\"1\":{\"182\":1}}],[\"的分治逻辑\",{\"1\":{\"77\":1,\"110\":1}}],[\"的分布存在某种周期性时\",{\"1\":{\"69\":1}}],[\"的查询效率\",{\"1\":{\"73\":1}}],[\"的查询功能\",{\"1\":{\"56\":1}}],[\"的成员变量是可变的\",{\"1\":{\"71\":1}}],[\"的哈希值为\",{\"1\":{\"71\":4}}],[\"的哈希表数据结构\",{\"1\":{\"68\":1}}],[\"的实现开销更低\",{\"1\":{\"70\":1}}],[\"的输出都相同\",{\"1\":{\"68\":1}}],[\"的问题\",{\"1\":{\"65\":1}}],[\"的步数\",{\"1\":{\"64\":1}}],[\"的索引\",{\"1\":{\"63\":1}}],[\"的增加\",{\"1\":{\"63\":1}}],[\"的两个学生时\",{\"1\":{\"59\":1}}],[\"的情况\",{\"1\":{\"59\":1}}],[\"的尾部即可\",{\"1\":{\"56\":1}}],[\"的体现\",{\"1\":{\"52\":1}}],[\"的每个元素引用相同的地址吗\",{\"1\":{\"34\":1}}],[\"的时间查找元素\",{\"1\":{\"34\":1}}],[\"的角度看\",{\"1\":{\"34\":1}}],[\"的引用\",{\"1\":{\"24\":1}}],[\"的首个节点\",{\"1\":{\"22\":1}}],[\"的节点称为\",{\"1\":{\"99\":1}}],[\"的节点\",{\"1\":{\"21\":1,\"22\":1}}],[\"的操作\",{\"1\":{\"13\":1}}],[\"的\",{\"1\":{\"10\":1,\"72\":2,\"93\":1,\"177\":2,\"183\":1,\"184\":2,\"186\":1,\"319\":1,\"321\":1,\"352\":1,\"411\":1,\"503\":1}}],[\"的个人博客程序员的白粥馆记录分享编程知识\",{\"1\":{\"3\":1}}],[\"其他资料2\",{\"1\":{\"322\":1}}],[\"其他资料1\",{\"1\":{\"322\":1}}],[\"其他\",{\"0\":{\"416\":1},\"2\":{\"287\":1,\"295\":1,\"305\":1,\"312\":1,\"323\":1,\"367\":1,\"400\":1,\"414\":1,\"417\":1}}],[\"其他线程能正确地看到更新的头部指针\",{\"1\":{\"249\":1}}],[\"其他线程能正确地看到更新的尾部指针\",{\"1\":{\"249\":1}}],[\"其他线程可以成功获取锁并继续执行\",{\"1\":{\"241\":1}}],[\"其他所有节点都包含子节点和非空子树\",{\"1\":{\"77\":1}}],[\"其实现原理如下\",{\"1\":{\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1}}],[\"其父进程没有及时调用\",{\"1\":{\"216\":1}}],[\"其底层的原理是什么\",{\"1\":{\"205\":1}}],[\"其节点总数\",{\"1\":{\"111\":1}}],[\"其查找\",{\"1\":{\"110\":1}}],[\"其左\",{\"1\":{\"110\":1}}],[\"其左子节点记为\",{\"1\":{\"100\":1}}],[\"其余所有节点的度都为\",{\"1\":{\"83\":1}}],[\"其两个指针均指向\",{\"1\":{\"78\":1}}],[\"其次\",{\"1\":{\"73\":1}}],[\"其操作方法与普通哈希表有所不同\",{\"1\":{\"63\":1}}],[\"其定义为哈希表的元素数量除以桶数量\",{\"1\":{\"59\":1}}],[\"其长度不可变\",{\"1\":{\"42\":1}}],[\"其支持元素增删查改操作\",{\"1\":{\"26\":1}}],[\"其存在以下局限性\",{\"1\":{\"14\":1}}],[\"其中的函数为虚函数\",{\"1\":{\"205\":1}}],[\"其中的每个元素都是一个节点对象\",{\"1\":{\"16\":1}}],[\"其中a\",{\"1\":{\"200\":1}}],[\"其中某个维度的扩展是可以叠加的\",{\"1\":{\"137\":1}}],[\"其中每种情况都需要进行多个步骤的节点操作\",{\"1\":{\"111\":1}}],[\"其中查找待删除节点需要\",{\"1\":{\"91\":1}}],[\"其中图的每个顶点都与一个链表相关联\",{\"1\":{\"25\":1}}],[\"其中\",{\"1\":{\"10\":1,\"58\":1,\"319\":1}}],[\"其将相同类型的元素存储在连续的内存空间中\",{\"1\":{\"5\":1}}],[\"+>\",{\"1\":{\"412\":1}}],[\"+x\",{\"1\":{\"317\":1}}],[\"++count\",{\"1\":{\"258\":3}}],[\"++counter\",{\"1\":{\"239\":1}}],[\"++i\",{\"1\":{\"236\":1,\"238\":1,\"239\":2,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"248\":2,\"249\":2,\"255\":3,\"256\":4,\"257\":2,\"259\":1,\"285\":2}}],[\"+1\",{\"1\":{\"200\":1}}],[\"+=\",{\"1\":{\"11\":1,\"31\":2}}],[\"+\",{\"0\":{\"309\":1},\"1\":{\"10\":1,\"13\":1,\"30\":2,\"34\":1,\"42\":4,\"52\":1,\"61\":1,\"63\":1,\"97\":2,\"199\":2,\"224\":1,\"248\":2,\"249\":4,\"261\":1,\"262\":1,\"268\":1,\"404\":1,\"409\":1,\"411\":1,\"412\":3}}],[\"<location>\",{\"1\":{\"482\":1,\"483\":1}}],[\"<latch>\",{\"1\":{\"243\":1}}],[\"<breakpoint\",{\"1\":{\"482\":1}}],[\"<barrier>\",{\"1\":{\"242\":1}}],[\"<program>\",{\"1\":{\"480\":3,\"490\":1}}],[\"<path>\",{\"1\":{\"447\":1}}],[\"<p>hello\",{\"1\":{\"173\":1}}],[\"<repository\",{\"1\":{\"447\":1,\"448\":1}}],[\"<>\",{\"1\":{\"388\":2}}],[\"<n>\",{\"1\":{\"321\":1,\"484\":2,\"487\":1,\"489\":1}}],[\"<netinet\",{\"1\":{\"229\":1}}],[\"<variable>\",{\"1\":{\"321\":1}}],[\"<vector>\",{\"1\":{\"237\":1,\"242\":1,\"243\":1,\"248\":1,\"269\":1}}],[\"<function>\",{\"1\":{\"321\":1}}],[\"<functional>\",{\"1\":{\"261\":2,\"262\":1}}],[\"<future>\",{\"1\":{\"261\":2,\"262\":1}}],[\"<fcntl\",{\"1\":{\"220\":1}}],[\"<typename\",{\"1\":{\"248\":1,\"249\":1,\"262\":1}}],[\"<thread>\",{\"1\":{\"234\":1,\"236\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"248\":1,\"255\":1,\"256\":2,\"257\":1,\"261\":2,\"262\":1}}],[\"<args>\",{\"1\":{\"480\":1,\"481\":1}}],[\"<arpa\",{\"1\":{\"229\":1}}],[\"<a\",{\"1\":{\"411\":1}}],[\"<address>\",{\"1\":{\"321\":2,\"484\":5}}],[\"<atomic>\",{\"1\":{\"239\":1,\"241\":1,\"248\":1}}],[\"<core>\",{\"1\":{\"480\":1,\"490\":1}}],[\"<commit\",{\"1\":{\"452\":1}}],[\"<condition\",{\"1\":{\"238\":1}}],[\"<chrono>\",{\"1\":{\"256\":1,\"257\":1}}],[\"<csignal>\",{\"1\":{\"228\":1}}],[\"<cstring>\",{\"1\":{\"225\":1,\"226\":1}}],[\"<map>\",{\"1\":{\"269\":1}}],[\"<mutex>\",{\"1\":{\"236\":1,\"238\":1,\"256\":2,\"257\":1}}],[\"<memory>\",{\"1\":{\"143\":1,\"150\":1,\"159\":1}}],[\"<unistd\",{\"1\":{\"218\":1,\"220\":1,\"224\":1,\"228\":1,\"229\":2,\"301\":1}}],[\"<semaphore>\",{\"1\":{\"240\":1}}],[\"<shared\",{\"1\":{\"237\":1}}],[\"<stdlib\",{\"1\":{\"220\":1}}],[\"<string>\",{\"1\":{\"137\":1,\"269\":1}}],[\"<signal\",{\"1\":{\"218\":1,\"220\":1}}],[\"<sys\",{\"1\":{\"218\":1,\"220\":2,\"225\":2,\"226\":2,\"227\":2,\"229\":2,\"301\":1}}],[\"<script>\",{\"1\":{\"173\":1}}],[\"<script\",{\"1\":{\"173\":1}}],[\"<input\",{\"1\":{\"173\":1}}],[\"<iostream>\",{\"1\":{\"125\":1,\"137\":1,\"143\":1,\"150\":1,\"159\":1,\"205\":1,\"218\":1,\"220\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":2,\"234\":1,\"236\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"248\":1,\"255\":1,\"256\":2,\"257\":1,\"261\":2,\"262\":1,\"268\":1,\"269\":1,\"275\":1,\"285\":1,\"301\":1,\"464\":1}}],[\"<div\",{\"1\":{\"173\":1}}],[\"<=\",{\"1\":{\"104\":1,\"159\":2,\"388\":1}}],[\"<−1\",{\"1\":{\"104\":2}}],[\"<0\",{\"1\":{\"104\":1}}],[\"<<endl\",{\"1\":{\"205\":2,\"268\":3,\"269\":6}}],[\"<<\",{\"1\":{\"42\":2,\"57\":8,\"58\":4,\"61\":6,\"63\":8,\"69\":1,\"125\":2,\"131\":4,\"137\":10,\"143\":6,\"150\":4,\"153\":8,\"159\":12,\"205\":2,\"220\":8,\"224\":3,\"225\":5,\"226\":3,\"227\":8,\"228\":4,\"229\":3,\"234\":2,\"236\":3,\"237\":3,\"238\":3,\"239\":3,\"240\":4,\"241\":4,\"242\":8,\"243\":8,\"248\":6,\"249\":6,\"255\":16,\"256\":6,\"257\":3,\"259\":2,\"261\":6,\"262\":2,\"273\":2,\"275\":5,\"285\":4,\"301\":24,\"464\":2}}],[\"<\",{\"1\":{\"10\":1,\"11\":1,\"12\":1,\"13\":1,\"21\":1,\"31\":1,\"41\":1,\"42\":1,\"61\":1,\"87\":2,\"89\":2,\"90\":4,\"91\":5,\"92\":2,\"104\":1,\"106\":1,\"107\":1,\"111\":2,\"125\":1,\"173\":3,\"220\":4,\"236\":1,\"238\":1,\"239\":2,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"248\":2,\"249\":2,\"255\":3,\"256\":4,\"257\":2,\"259\":1,\"285\":2,\"298\":1,\"388\":1,\"411\":2,\"412\":1}}],[\"删除指定位置的所有断点\",{\"1\":{\"482\":1}}],[\"删除指定的断点\",{\"1\":{\"482\":1}}],[\"删除指定资源\",{\"1\":{\"327\":1}}],[\"删除断点\",{\"1\":{\"482\":1}}],[\"删除子模块目录\",{\"1\":{\"451\":1}}],[\"删除子模块配置\",{\"1\":{\"451\":1}}],[\"删除子模块的条目\",{\"1\":{\"451\":1}}],[\"删除分支\",{\"1\":{\"439\":2}}],[\"删除远程仓库\",{\"1\":{\"427\":1}}],[\"删除所有数据\",{\"1\":{\"385\":1}}],[\"删除表\",{\"1\":{\"381\":1}}],[\"删除列\",{\"1\":{\"379\":1}}],[\"删除或修改列\",{\"1\":{\"379\":1}}],[\"删除一个现有的数据库\",{\"1\":{\"374\":1}}],[\"删除信号量\",{\"1\":{\"227\":1}}],[\"删除消息队列\",{\"1\":{\"225\":1}}],[\"删除键值对和遍历哈希表等\",{\"1\":{\"72\":1}}],[\"删除标记\",{\"1\":{\"63\":1}}],[\"删除操作中的一步\",{\"1\":{\"111\":1}}],[\"删除操作\",{\"1\":{\"57\":1,\"58\":1,\"61\":1,\"63\":1,\"94\":1}}],[\"删除操作在链表的另一端进行\",{\"1\":{\"25\":1}}],[\"删除栈顶元素的操作叫作\",{\"1\":{\"44\":1}}],[\"删除头节点\",{\"1\":{\"41\":1}}],[\"删除队首元素的操作称为\",{\"1\":{\"38\":1}}],[\"删除和遍历等操作\",{\"1\":{\"26\":1}}],[\"删除链表的节点\",{\"1\":{\"20\":1}}],[\"删除节点操作要分三种情况处理\",{\"1\":{\"111\":1}}],[\"删除节点操作同样使用\",{\"1\":{\"91\":1}}],[\"删除节点\",{\"0\":{\"20\":1,\"91\":1,\"107\":1},\"1\":{\"34\":1,\"81\":1,\"91\":2}}],[\"删除索引\",{\"1\":{\"10\":1,\"30\":1}}],[\"删除元素完成后\",{\"1\":{\"10\":1}}],[\"删除元素\",{\"0\":{\"10\":1},\"1\":{\"23\":1,\"30\":1,\"56\":2,\"61\":1,\"93\":1}}],[\"了解这些状态对于网络调试\",{\"1\":{\"289\":1}}],[\"了解更多技术分享\",{\"1\":{\"3\":1}}],[\"了\",{\"1\":{\"10\":1,\"34\":1,\"71\":1}}],[\"无锁编程主要依赖于原子操作和内存序列模型\",{\"1\":{\"245\":1}}],[\"无锁编程\",{\"0\":{\"245\":1},\"1\":{\"245\":1}}],[\"无法多个进程\",{\"1\":{\"244\":1}}],[\"无法通过哈希值反推出关于输入数据的任何信息\",{\"1\":{\"68\":1}}],[\"无需锁定\",{\"1\":{\"239\":1}}],[\"无名管道\",{\"1\":{\"224\":2}}],[\"无论是使用现成的模型类\",{\"1\":{\"186\":1}}],[\"无序数组\",{\"1\":{\"93\":1}}],[\"无返回值\",{\"1\":{\"45\":1}}],[\"无须旋转\",{\"1\":{\"104\":1}}],[\"无须进行额外的排序操作\",{\"1\":{\"92\":1}}],[\"无须使用者考虑容量限制的问题\",{\"1\":{\"26\":1}}],[\"无须额外的结构开销\",{\"1\":{\"14\":1}}],[\"无意义\",{\"1\":{\"10\":2}}],[\"无初始值\",{\"1\":{\"7\":1,\"28\":2}}],[\"处理客户端请求\",{\"1\":{\"354\":1}}],[\"处理子进程的终止状态\",{\"1\":{\"304\":1}}],[\"处理特定子进程\",{\"1\":{\"303\":1}}],[\"处理用户的输入\",{\"1\":{\"180\":1}}],[\"处理用户事件\",{\"1\":{\"169\":1}}],[\"处理业务逻辑\",{\"1\":{\"165\":1}}],[\"处理请求的各个过滤器\",{\"1\":{\"160\":1}}],[\"处理请假请求的虚函数\",{\"1\":{\"159\":1}}],[\"处理\",{\"1\":{\"159\":3,\"218\":1}}],[\"处理类\",{\"1\":{\"159\":3}}],[\"处理者\",{\"1\":{\"158\":1}}],[\"处插入数字\",{\"1\":{\"30\":1}}],[\"处插入元素\",{\"1\":{\"9\":1}}],[\"处的元素更新为\",{\"1\":{\"29\":1}}],[\"处的元素\",{\"1\":{\"9\":1,\"10\":2,\"29\":1,\"30\":1}}],[\"将变量\",{\"1\":{\"484\":1}}],[\"将目录添加到编译器的包含路径中\",{\"1\":{\"470\":1}}],[\"将指针的变化保存到主仓库\",{\"1\":{\"454\":1}}],[\"将指定分支的更改合并到当前分支\",{\"1\":{\"440\":1}}],[\"将更改推送到远程分支\",{\"1\":{\"444\":1}}],[\"将本地分支的提交推送到远程仓库\",{\"1\":{\"444\":1}}],[\"将当前分支的更改应用到另一分支的顶端\",{\"1\":{\"441\":1}}],[\"将当前工作目录更改为根目录\",{\"1\":{\"221\":1}}],[\"将文件添加到暂存区\",{\"1\":{\"429\":1}}],[\"将其转换为\",{\"1\":{\"411\":1}}],[\"将其隔离到相同的模块\",{\"1\":{\"119\":1}}],[\"将客户端提供的资源完整替换\",{\"1\":{\"327\":1}}],[\"将任务逻辑和浏览器实现进行分离\",{\"0\":{\"311\":1}}],[\"将波形绘制配置的初始化逻辑抽象出来\",{\"1\":{\"308\":1}}],[\"将返回导致子进程终止的信号编号\",{\"1\":{\"302\":1}}],[\"将返回子进程的退出状态码\",{\"1\":{\"302\":1}}],[\"将函数和future绑定起来\",{\"1\":{\"261\":1}}],[\"将数据和future绑定起来\",{\"1\":{\"261\":1}}],[\"将数组转化为\",{\"1\":{\"42\":1}}],[\"将头部指针所指向的元素存储到\",{\"1\":{\"249\":1}}],[\"将头节点作为栈顶\",{\"1\":{\"47\":1}}],[\"将新的尾部指针存储到\",{\"1\":{\"249\":1}}],[\"将元素存储在当前尾部指针所指向的位置\",{\"1\":{\"249\":1}}],[\"将元素插入其中\",{\"1\":{\"63\":1}}],[\"将线程和线程对象分离\",{\"1\":{\"234\":1,\"255\":1}}],[\"将标准文件描述符重定向到\",{\"1\":{\"220\":1,\"221\":1}}],[\"将子进程的父进程设置为\",{\"1\":{\"218\":1}}],[\"将重载函数重新命名成唯一的标识符\",{\"1\":{\"202\":1}}],[\"将事件沿着组件树传递\",{\"1\":{\"160\":1}}],[\"将对象的实例化过程封装在工厂类中\",{\"1\":{\"153\":1}}],[\"将调用模块与实现模块进行隔离\",{\"1\":{\"119\":1}}],[\"将该节点记为\",{\"1\":{\"100\":1}}],[\"将该节点置于\",{\"1\":{\"90\":1}}],[\"将待删除节点替换为其子节点即可\",{\"1\":{\"91\":1}}],[\"将所有构建文件放到单独的目录中\",{\"1\":{\"467\":1}}],[\"将所有的\",{\"1\":{\"101\":1}}],[\"将所有冲突元素存储在同一个链表中\",{\"1\":{\"72\":1}}],[\"将所有发生冲突的键值对都存储在同一链表中\",{\"1\":{\"61\":1}}],[\"将每个字符的\",{\"1\":{\"69\":1}}],[\"将输入数据的每个元素通过异或操作累积到一个哈希值中\",{\"1\":{\"69\":1}}],[\"将输入元素赋值给\",{\"1\":{\"42\":1}}],[\"将各个字符的\",{\"1\":{\"69\":1}}],[\"将得到的总和作为哈希值\",{\"1\":{\"69\":1}}],[\"将键值对从原哈希表搬运至新哈希表\",{\"1\":{\"61\":1,\"63\":1}}],[\"将键值对作为链表节点\",{\"1\":{\"61\":1}}],[\"将单个元素转换为链表\",{\"1\":{\"61\":1}}],[\"将哈希值对桶数量\",{\"1\":{\"58\":1}}],[\"将这个操作压入栈\",{\"1\":{\"52\":1}}],[\"将把元素添加到栈顶的操作叫作\",{\"1\":{\"44\":1}}],[\"将把元素加入队尾的操作称为\",{\"1\":{\"38\":1}}],[\"将链表转化为\",{\"1\":{\"41\":1}}],[\"将索引\",{\"1\":{\"29\":1}}],[\"将切换到下一个进程\",{\"1\":{\"25\":1}}],[\"将最后一个节点称为尾节点\",{\"1\":{\"24\":1}}],[\"将原数组中的所有元素复制到新数组\",{\"1\":{\"13\":1}}],[\"将\",{\"1\":{\"9\":1,\"42\":1,\"47\":1,\"100\":2,\"101\":2,\"174\":1,\"395\":1}}],[\">example<\",{\"1\":{\"411\":1}}],[\">play\",{\"1\":{\"311\":2}}],[\">update\",{\"1\":{\"310\":1}}],[\">malloc\",{\"1\":{\"309\":2}}],[\">initdrawoption\",{\"1\":{\"308\":1}}],[\">void\",{\"1\":{\"274\":1}}],[\">value\",{\"1\":{\"57\":2}}],[\">val\",{\"1\":{\"22\":1,\"41\":2,\"47\":2,\"58\":4,\"61\":4,\"63\":4,\"89\":2,\"90\":3,\"91\":5,\"106\":2,\"107\":5}}],[\">fun\",{\"1\":{\"205\":2}}],[\">first\",{\"1\":{\"57\":1}}],[\">sort\",{\"1\":{\"186\":1}}],[\">save\",{\"1\":{\"181\":1}}],[\">show\",{\"1\":{\"180\":1}}],[\">setbrower\",{\"1\":{\"311\":2}}],[\">setsourcemodel\",{\"1\":{\"186\":1}}],[\">setitemdelegate\",{\"1\":{\"181\":1}}],[\">setmodel\",{\"1\":{\"180\":1,\"186\":1}}],[\">sethorizontalheaderlabels\",{\"1\":{\"179\":1}}],[\">setnexthandler\",{\"1\":{\"159\":2}}],[\">second\",{\"1\":{\"57\":1}}],[\">appendrow\",{\"1\":{\"179\":1}}],[\">applycolor\",{\"1\":{\"143\":2}}],[\"><\",{\"1\":{\"173\":1}}],[\">handlerequest\",{\"1\":{\"159\":6}}],[\">height\",{\"1\":{\"97\":1}}],[\">type\",{\"1\":{\"153\":2}}],[\">click\",{\"1\":{\"153\":2}}],[\">createtextbox\",{\"1\":{\"153\":2}}],[\">createbutton\",{\"1\":{\"153\":2}}],[\">createvehicle\",{\"1\":{\"150\":2}}],[\">calculate\",{\"1\":{\"131\":1}}],[\">drive\",{\"1\":{\"150\":2}}],[\">drawtext\",{\"1\":{\"181\":1}}],[\">draw\",{\"1\":{\"143\":2,\"308\":1}}],[\">doprogress\",{\"1\":{\"125\":1}}],[\">run\",{\"1\":{\"311\":1}}],[\">restore\",{\"1\":{\"181\":1}}],[\">read\",{\"1\":{\"137\":5}}],[\">right\",{\"1\":{\"80\":2,\"89\":1,\"90\":2,\"91\":5,\"97\":1,\"98\":1,\"100\":2,\"101\":2,\"104\":3,\"106\":2,\"107\":7}}],[\">0\",{\"1\":{\"104\":1}}],[\">1\",{\"1\":{\"99\":1,\"104\":2}}],[\">left\",{\"1\":{\"80\":2,\"81\":3,\"89\":1,\"90\":2,\"91\":8,\"97\":1,\"98\":1,\"100\":2,\"101\":2,\"104\":3,\"106\":2,\"107\":7}}],[\">>\",{\"1\":{\"61\":2,\"69\":1}}],[\">key\",{\"1\":{\"58\":3,\"61\":5,\"63\":3}}],[\">=\",{\"1\":{\"47\":1,\"104\":1,\"388\":1}}],[\">next\",{\"1\":{\"18\":4,\"19\":3,\"20\":4,\"21\":1,\"22\":1,\"41\":3,\"47\":3}}],[\">\",{\"1\":{\"9\":1,\"18\":4,\"20\":2,\"57\":2,\"58\":5,\"61\":2,\"63\":5,\"81\":1,\"89\":2,\"104\":1,\"106\":1,\"107\":1,\"159\":2,\"173\":2,\"218\":2,\"220\":2,\"260\":2,\"261\":1,\"285\":1,\"298\":1,\"301\":1,\"310\":1,\"311\":1,\"317\":2,\"388\":2,\"390\":1,\"391\":1,\"397\":1,\"411\":2}}],[\"io\",{\"1\":{\"420\":1}}],[\"it\",{\"1\":{\"420\":1}}],[\"item\",{\"1\":{\"248\":7,\"249\":11}}],[\"item2\",{\"1\":{\"179\":2}}],[\"item1\",{\"1\":{\"179\":2}}],[\"iter++\",{\"1\":{\"57\":1}}],[\"iter\",{\"1\":{\"57\":4}}],[\"import\",{\"1\":{\"503\":4,\"504\":2}}],[\"implicit\",{\"1\":{\"275\":1}}],[\"implementor\",{\"1\":{\"142\":2}}],[\"img\",{\"1\":{\"317\":1,\"319\":4}}],[\"iebrowser\",{\"1\":{\"311\":1}}],[\"iebrower\",{\"1\":{\"311\":1}}],[\"ipc\",{\"1\":{\"223\":2,\"224\":1,\"225\":3,\"226\":3,\"227\":3,\"230\":1}}],[\"iprogress\",{\"1\":{\"125\":4}}],[\"i+1\",{\"1\":{\"125\":1}}],[\"i++\",{\"1\":{\"10\":1,\"11\":1,\"12\":1,\"13\":1,\"21\":1,\"31\":1,\"41\":1,\"42\":1,\"61\":1,\"125\":1}}],[\"is\",{\"1\":{\"227\":2,\"240\":1,\"241\":1,\"242\":2,\"243\":1,\"269\":11,\"388\":3,\"420\":1}}],[\"isp\",{\"1\":{\"118\":1}}],[\"isempty\",{\"1\":{\"41\":1,\"42\":2,\"47\":2,\"48\":2}}],[\"id=\",{\"1\":{\"173\":1}}],[\"id\",{\"1\":{\"34\":2,\"236\":4,\"238\":4,\"240\":2,\"241\":2,\"242\":3,\"243\":3,\"255\":1,\"298\":3,\"376\":1,\"384\":1,\"385\":1,\"388\":1,\"392\":15,\"393\":4,\"394\":2}}],[\"i−1\",{\"1\":{\"21\":1}}],[\"if\",{\"1\":{\"12\":1,\"20\":1,\"21\":1,\"22\":1,\"41\":2,\"42\":2,\"47\":1,\"48\":1,\"58\":4,\"61\":4,\"63\":11,\"89\":2,\"90\":4,\"91\":7,\"98\":1,\"104\":4,\"106\":3,\"107\":5,\"125\":1,\"159\":6,\"185\":1,\"218\":5,\"220\":6,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"248\":2,\"249\":4,\"255\":4,\"260\":2,\"301\":7,\"310\":1,\"311\":1,\"420\":1,\"485\":1}}],[\"i\",{\"1\":{\"9\":5,\"10\":6,\"11\":3,\"12\":4,\"13\":4,\"21\":3,\"31\":3,\"41\":3,\"42\":3,\"47\":4,\"61\":5,\"86\":1,\"125\":2,\"213\":1,\"214\":2,\"236\":4,\"238\":4,\"239\":5,\"240\":4,\"241\":4,\"242\":3,\"243\":3,\"248\":6,\"249\":7,\"255\":9,\"256\":12,\"257\":6,\"259\":3,\"273\":2,\"285\":10,\"430\":1}}],[\"inner\",{\"1\":{\"392\":2}}],[\"info=y\",{\"1\":{\"321\":1}}],[\"info\",{\"1\":{\"321\":1,\"482\":1,\"484\":2,\"487\":2,\"489\":2}}],[\"information\",{\"1\":{\"95\":1}}],[\"installed\",{\"1\":{\"420\":2}}],[\"install\",{\"1\":{\"317\":4,\"318\":1,\"420\":3,\"459\":2,\"473\":2}}],[\"inserthelper\",{\"1\":{\"106\":3}}],[\"insert\",{\"1\":{\"9\":1,\"19\":1,\"30\":1,\"90\":1,\"269\":3,\"383\":4,\"503\":2,\"504\":1}}],[\"inline\",{\"1\":{\"262\":1}}],[\"increment\",{\"1\":{\"239\":2,\"376\":1}}],[\"include\",{\"1\":{\"125\":1,\"137\":2,\"143\":2,\"150\":2,\"159\":2,\"205\":1,\"218\":4,\"220\":7,\"224\":2,\"225\":4,\"226\":4,\"227\":3,\"228\":3,\"229\":8,\"234\":2,\"236\":3,\"237\":4,\"238\":4,\"239\":3,\"240\":3,\"241\":3,\"242\":4,\"243\":4,\"248\":4,\"255\":2,\"256\":7,\"257\":4,\"261\":8,\"262\":4,\"268\":1,\"269\":4,\"275\":1,\"285\":1,\"301\":3,\"464\":1,\"470\":3,\"471\":2}}],[\"inaddr\",{\"1\":{\"229\":1}}],[\"inet\",{\"1\":{\"229\":6}}],[\"initrd\",{\"1\":{\"319\":2}}],[\"initdrawoption\",{\"1\":{\"308\":3}}],[\"init\",{\"1\":{\"218\":7,\"241\":1,\"317\":5,\"425\":2,\"448\":1}}],[\"input\",{\"1\":{\"173\":1}}],[\"in\",{\"1\":{\"153\":2,\"227\":2,\"229\":3,\"261\":2,\"262\":2,\"388\":2,\"397\":1,\"420\":1}}],[\"into\",{\"1\":{\"383\":4}}],[\"interact\",{\"1\":{\"420\":1}}],[\"internal\",{\"1\":{\"328\":1,\"420\":1}}],[\"interrupt\",{\"1\":{\"228\":1}}],[\"inter\",{\"1\":{\"223\":1}}],[\"int\",{\"0\":{\"200\":1},\"1\":{\"7\":6,\"8\":5,\"9\":5,\"10\":4,\"11\":4,\"12\":5,\"13\":7,\"16\":2,\"21\":2,\"22\":3,\"24\":2,\"29\":1,\"31\":3,\"34\":3,\"39\":2,\"41\":7,\"42\":14,\"45\":2,\"47\":7,\"48\":5,\"49\":1,\"58\":11,\"61\":12,\"63\":15,\"69\":4,\"71\":1,\"77\":2,\"89\":1,\"90\":1,\"91\":2,\"97\":3,\"98\":1,\"104\":1,\"106\":1,\"107\":2,\"125\":2,\"131\":1,\"137\":1,\"143\":1,\"150\":1,\"153\":1,\"159\":8,\"185\":3,\"200\":2,\"202\":1,\"205\":1,\"218\":2,\"220\":1,\"224\":2,\"225\":2,\"226\":2,\"227\":5,\"228\":2,\"229\":5,\"234\":2,\"236\":3,\"237\":2,\"238\":3,\"239\":3,\"240\":3,\"241\":3,\"242\":3,\"243\":3,\"248\":4,\"249\":4,\"255\":6,\"256\":8,\"257\":4,\"258\":3,\"259\":2,\"261\":6,\"262\":3,\"268\":1,\"269\":4,\"271\":2,\"272\":3,\"273\":1,\"274\":1,\"275\":4,\"285\":1,\"298\":3,\"301\":2,\"310\":1,\"376\":1,\"379\":1,\"464\":1}}],[\"index++\",{\"1\":{\"22\":1}}],[\"index\",{\"1\":{\"5\":1,\"9\":6,\"10\":4,\"21\":3,\"22\":2,\"58\":12,\"61\":7,\"63\":25,\"67\":1,\"181\":2,\"185\":3}}],[\"把索引\",{\"1\":{\"9\":1,\"10\":1}}],[\"如自动运行程序\",{\"1\":{\"495\":1}}],[\"如开启或关闭不同的输出模式\",{\"1\":{\"495\":1}}],[\"如测试\",{\"1\":{\"474\":1}}],[\"如可执行文件或库\",{\"1\":{\"470\":1}}],[\"如提取电子邮件地址\",{\"1\":{\"412\":1}}],[\"如将\",{\"1\":{\"412\":1}}],[\"如密码复杂度\",{\"1\":{\"412\":1}}],[\"如电话号码或电子邮件地址\",{\"1\":{\"412\":1}}],[\"如表单数据\",{\"1\":{\"327\":1}}],[\"如互斥锁\",{\"1\":{\"245\":1}}],[\"如计数器\",{\"1\":{\"239\":1}}],[\"如管道\",{\"1\":{\"230\":1}}],[\"如信号量\",{\"1\":{\"226\":1}}],[\"如父子进程\",{\"1\":{\"224\":1}}],[\"如处理信号\",{\"1\":{\"222\":1}}],[\"如内存\",{\"1\":{\"216\":1}}],[\"如等待信号\",{\"1\":{\"214\":1}}],[\"如void\",{\"1\":{\"202\":1}}],[\"如点击\",{\"1\":{\"180\":1,\"182\":1}}],[\"如按钮点击\",{\"1\":{\"166\":1}}],[\"如增删改查等\",{\"1\":{\"165\":1}}],[\"如数据的获取\",{\"1\":{\"165\":1}}],[\"如控制台日志\",{\"1\":{\"160\":1}}],[\"如gui事件处理\",{\"1\":{\"123\":1}}],[\"如\",{\"1\":{\"118\":1,\"163\":1,\"165\":1,\"169\":1,\"173\":1,\"179\":1,\"182\":1,\"213\":1,\"214\":1,\"216\":1,\"222\":2,\"239\":1,\"241\":1,\"246\":1,\"250\":3,\"327\":4,\"329\":5,\"330\":5,\"331\":1,\"339\":1,\"340\":1,\"342\":1,\"344\":1,\"346\":2,\"354\":1,\"358\":1,\"361\":1,\"365\":2,\"410\":3,\"458\":1,\"460\":1,\"468\":1,\"490\":1,\"503\":1}}],[\"如观察者模式\",{\"1\":{\"117\":1}}],[\"如装饰器模式\",{\"1\":{\"117\":1}}],[\"如单例模式\",{\"1\":{\"117\":1}}],[\"如何创建线程\",{\"0\":{\"234\":1}}],[\"如何避免产生僵尸进程\",{\"0\":{\"218\":1}}],[\"如何使用virtual函数来完成你想完成的动作\",{\"1\":{\"208\":1}}],[\"如何从一组输入数据构建一棵二叉搜索树\",{\"1\":{\"111\":1}}],[\"如何基于\",{\"1\":{\"58\":1}}],[\"如下所示\",{\"1\":{\"465\":1}}],[\"如下\",{\"1\":{\"257\":1}}],[\"如下表所示\",{\"1\":{\"86\":1,\"104\":1}}],[\"如下图所示\",{\"1\":{\"9\":1,\"10\":1,\"19\":1,\"20\":1,\"24\":1,\"38\":1,\"41\":1,\"44\":1,\"47\":1,\"48\":1,\"56\":1,\"59\":2,\"63\":1,\"67\":1,\"77\":1,\"83\":1,\"84\":1,\"85\":1,\"87\":1,\"89\":1,\"91\":2,\"92\":1,\"95\":1,\"100\":2,\"101\":1,\"103\":1}}],[\"如整数\",{\"1\":{\"44\":1}}],[\"如上一节所述\",{\"1\":{\"21\":1}}],[\"如以下代码所示\",{\"1\":{\"16\":1}}],[\"如果你不希望加载当前目录中的\",{\"1\":{\"505\":1}}],[\"如果你拷贝一个unique\",{\"1\":{\"266\":1}}],[\"如果使用\",{\"1\":{\"469\":1}}],[\"如果子模块的上游仓库有新的提交\",{\"1\":{\"450\":1}}],[\"如果子进程已继续执行\",{\"1\":{\"300\":1}}],[\"如果子进程处于停止状态\",{\"1\":{\"300\":2}}],[\"如果子进程因信号终止\",{\"1\":{\"300\":2}}],[\"如果子进程正常终止\",{\"1\":{\"300\":2}}],[\"如果子进程在接收到\",{\"1\":{\"298\":1}}],[\"如果设置了\",{\"1\":{\"299\":1}}],[\"如果一块内存被shared\",{\"1\":{\"267\":1}}],[\"如果一个功能能够在相同的时间复杂度下使用数组或链表实现\",{\"1\":{\"73\":1}}],[\"如果引用计数减至0\",{\"1\":{\"265\":1}}],[\"如果引用计数为减至0\",{\"1\":{\"265\":1}}],[\"如果希望多个智能指针管理同一个资源\",{\"1\":{\"264\":1}}],[\"如果希望只有一个智能指针管理资源或者管理数组\",{\"1\":{\"264\":1}}],[\"如果需要复制放到容器中可以使用std\",{\"1\":{\"261\":1}}],[\"如果\",{\"1\":{\"249\":2}}],[\"如果是\",{\"1\":{\"246\":1,\"302\":2}}],[\"如果是先查找元素\",{\"1\":{\"34\":1}}],[\"如果锁已经被其他线程持有\",{\"1\":{\"241\":1}}],[\"如果计数器值为零或负\",{\"1\":{\"240\":1}}],[\"如果计数器值为正\",{\"1\":{\"240\":1}}],[\"如果条件不满足\",{\"1\":{\"238\":1}}],[\"如果条件满足\",{\"1\":{\"238\":1}}],[\"如果读计数器为0且有写线程在等待\",{\"1\":{\"237\":1}}],[\"如果有线程在等待队列中\",{\"1\":{\"240\":1}}],[\"如果有写线程在等待\",{\"1\":{\"237\":1}}],[\"如果有写锁存在\",{\"1\":{\"237\":1}}],[\"如果有读线程在等待\",{\"1\":{\"237\":1}}],[\"如果有读锁或写锁存在\",{\"1\":{\"237\":1}}],[\"如果有大量僵尸进程存在\",{\"1\":{\"217\":1}}],[\"如果没有子进程退出或状态变化\",{\"1\":{\"298\":1}}],[\"如果没有读锁和写锁存在\",{\"1\":{\"237\":1}}],[\"如果没有写锁存在\",{\"1\":{\"237\":1}}],[\"如果没有线程在等待\",{\"1\":{\"236\":1}}],[\"如果没有调用join或者detach函数\",{\"1\":{\"255\":1}}],[\"如果没有调用\",{\"1\":{\"234\":1}}],[\"如果等待队列中有其他线程\",{\"1\":{\"236\":1}}],[\"如果互斥量已锁定\",{\"1\":{\"236\":1}}],[\"如果互斥量未锁定\",{\"1\":{\"236\":1}}],[\"如果线程已经和对象分离\",{\"1\":{\"234\":1,\"255\":1}}],[\"如果不明确指定创建策略\",{\"1\":{\"262\":1}}],[\"如果不希望线程被阻塞执行\",{\"1\":{\"234\":1,\"255\":1}}],[\"如果不断开\",{\"1\":{\"34\":1}}],[\"如果父进程在子进程结束前退出\",{\"1\":{\"218\":1}}],[\"如果运行中的进程的时间片耗尽\",{\"1\":{\"214\":1}}],[\"如果派生类中申请了内存空间\",{\"1\":{\"208\":1}}],[\"如果在构造函数或析构函数中调用虚函数\",{\"1\":{\"207\":1}}],[\"如果对象类型是基类\",{\"1\":{\"205\":1}}],[\"如果对象类型是派生类\",{\"1\":{\"205\":1}}],[\"如果c++98的朋友想进阶到c++11\",{\"1\":{\"195\":1}}],[\"如果当前对象无法处理该请求\",{\"1\":{\"158\":1}}],[\"如果要对比值\",{\"1\":{\"111\":1}}],[\"如果要同时支持后退和前进\",{\"1\":{\"50\":1}}],[\"如果方法只在类内部使用\",{\"1\":{\"111\":1}}],[\"如果考虑上述失衡二叉树的\",{\"1\":{\"101\":1}}],[\"如果将\",{\"1\":{\"77\":1}}],[\"如果能够保证\",{\"1\":{\"69\":1}}],[\"如果输入\",{\"1\":{\"69\":1}}],[\"如果两者匹配\",{\"1\":{\"68\":2}}],[\"如果哈希冲突过于频繁\",{\"1\":{\"67\":1}}],[\"如果遇到空桶\",{\"1\":{\"63\":1}}],[\"如果后续仍需要使用弹出节点\",{\"1\":{\"52\":1}}],[\"如果入栈元素本身就是节点对象\",{\"1\":{\"49\":1}}],[\"如果入栈时超出数组容量\",{\"1\":{\"49\":1}}],[\"如果想取出底部的盘子\",{\"1\":{\"44\":1}}],[\"如果想在数组中间插入一个元素\",{\"1\":{\"9\":1}}],[\"如果队列已满\",{\"1\":{\"248\":1,\"249\":2}}],[\"如果队列不为空\",{\"1\":{\"41\":1}}],[\"如果队列为空\",{\"1\":{\"41\":1,\"248\":1,\"249\":2}}],[\"如果添加元素时超出列表长度\",{\"1\":{\"34\":1}}],[\"如果我们在二叉搜索树中不断地插入和删除节点\",{\"1\":{\"93\":1}}],[\"如果我们令单向链表的尾节点指向头节点\",{\"1\":{\"24\":1}}],[\"如果我们想随机抽取一些样本\",{\"1\":{\"15\":1}}],[\"如果我们希望扩容数组\",{\"1\":{\"13\":1}}],[\"如果数组分配的大小超过实际所需\",{\"1\":{\"14\":1}}],[\"紧挨着的\",{\"1\":{\"9\":1}}],[\"rbt\",{\"1\":{\"499\":1,\"504\":1}}],[\"rm\",{\"1\":{\"451\":1}}],[\"rmid\",{\"1\":{\"225\":1,\"226\":1,\"227\":1}}],[\"rdbms\",{\"1\":{\"369\":1}}],[\"rdwr\",{\"1\":{\"220\":1}}],[\"r\",{\"1\":{\"275\":4,\"409\":1}}],[\"rwatch\",{\"1\":{\"485\":1}}],[\"rw\",{\"1\":{\"237\":3}}],[\"runs\",{\"1\":{\"420\":1}}],[\"runtasks\",{\"1\":{\"311\":1}}],[\"run\",{\"1\":{\"311\":3,\"420\":4,\"481\":3,\"499\":1,\"504\":1}}],[\"running\",{\"1\":{\"213\":1,\"301\":1,\"420\":2}}],[\"rust\",{\"1\":{\"16\":1}}],[\"rabbitmq\",{\"1\":{\"365\":1}}],[\"raw\",{\"1\":{\"285\":2}}],[\"raii\",{\"1\":{\"199\":1}}],[\"range\",{\"1\":{\"41\":1,\"42\":1,\"47\":1,\"48\":1,\"333\":1}}],[\"rand\",{\"1\":{\"8\":1}}],[\"randomnum\",{\"1\":{\"8\":2}}],[\"randomindex\",{\"1\":{\"8\":2}}],[\"randomaccess\",{\"1\":{\"8\":1}}],[\"riding\",{\"1\":{\"150\":1}}],[\"rightrotate\",{\"1\":{\"100\":1,\"104\":3}}],[\"right\",{\"1\":{\"77\":4,\"89\":1,\"97\":1,\"100\":3,\"101\":2,\"111\":1,\"392\":3}}],[\"rocess\",{\"1\":{\"223\":1}}],[\"rodata\",{\"1\":{\"206\":1}}],[\"role\",{\"1\":{\"185\":2}}],[\"row\",{\"1\":{\"185\":2}}],[\"rowsremoved\",{\"1\":{\"183\":1}}],[\"rowsinserted\",{\"1\":{\"183\":1}}],[\"rowcount\",{\"1\":{\"182\":1,\"185\":2}}],[\"rotate\",{\"1\":{\"100\":3,\"104\":1,\"106\":1,\"107\":1,\"111\":1}}],[\"rothash\",{\"1\":{\"69\":1}}],[\"rootfs\",{\"1\":{\"317\":1,\"319\":4}}],[\"root\",{\"1\":{\"78\":1,\"88\":1,\"89\":2,\"90\":3,\"91\":4,\"111\":1,\"222\":1,\"268\":6,\"269\":1}}],[\"required\",{\"1\":{\"461\":2,\"465\":1,\"471\":1}}],[\"request\",{\"1\":{\"328\":1}}],[\"rebase\",{\"1\":{\"430\":2,\"441\":2}}],[\"repo\",{\"1\":{\"427\":2,\"447\":4,\"450\":2,\"451\":1,\"452\":2}}],[\"repository\",{\"0\":{\"424\":1},\"1\":{\"426\":1}}],[\"register\",{\"1\":{\"503\":4,\"504\":2}}],[\"regex\",{\"1\":{\"402\":1}}],[\"regular\",{\"1\":{\"402\":1}}],[\"rename\",{\"1\":{\"380\":3}}],[\"remote\",{\"1\":{\"320\":2,\"427\":5}}],[\"removehelper\",{\"1\":{\"107\":4}}],[\"remove\",{\"1\":{\"10\":1,\"20\":1,\"58\":1,\"61\":1,\"63\":1,\"91\":5,\"427\":1,\"451\":1}}],[\"reference\",{\"1\":{\"273\":1}}],[\"ref\",{\"1\":{\"261\":1}}],[\"refined\",{\"1\":{\"142\":1}}],[\"relaxed\",{\"1\":{\"246\":1,\"248\":2,\"249\":5,\"250\":2}}],[\"release\",{\"1\":{\"240\":2,\"241\":1,\"246\":1,\"248\":3,\"249\":6,\"250\":3}}],[\"recurse\",{\"1\":{\"448\":2}}],[\"recursive\",{\"1\":{\"256\":2}}],[\"received状态\",{\"1\":{\"292\":1}}],[\"received\",{\"1\":{\"224\":1,\"225\":1,\"226\":1,\"228\":1,\"290\":1,\"292\":1,\"293\":1}}],[\"rect\",{\"1\":{\"181\":1}}],[\"redcircle\",{\"1\":{\"143\":2}}],[\"redcolor\",{\"1\":{\"143\":1}}],[\"red\",{\"1\":{\"143\":3,\"275\":3}}],[\"redo\",{\"1\":{\"52\":1}}],[\"reallyasync\",{\"1\":{\"262\":1}}],[\"reached\",{\"1\":{\"243\":1}}],[\"react+redux\",{\"1\":{\"163\":1}}],[\"reader\",{\"1\":{\"237\":3}}],[\"ready\",{\"1\":{\"213\":1,\"238\":6}}],[\"read\",{\"1\":{\"137\":9,\"224\":1,\"229\":1,\"237\":1}}],[\"rear\",{\"1\":{\"41\":6,\"42\":9}}],[\"reset\",{\"1\":{\"436\":4}}],[\"restartsec=3\",{\"1\":{\"420\":1}}],[\"restart=always\",{\"1\":{\"420\":1}}],[\"restart\",{\"1\":{\"420\":2}}],[\"rest\",{\"1\":{\"364\":1}}],[\"restful\",{\"1\":{\"346\":1,\"364\":1}}],[\"resource\",{\"1\":{\"330\":1}}],[\"result\",{\"1\":{\"261\":1,\"301\":3}}],[\"responsibility\",{\"1\":{\"157\":1}}],[\"resize\",{\"1\":{\"61\":2}}],[\"res\",{\"1\":{\"13\":3,\"34\":3,\"41\":4,\"47\":4,\"262\":3}}],[\"return\",{\"1\":{\"8\":1,\"12\":2,\"13\":1,\"20\":1,\"21\":2,\"22\":2,\"41\":5,\"42\":7,\"47\":5,\"48\":5,\"58\":6,\"61\":6,\"63\":8,\"69\":1,\"89\":1,\"90\":2,\"91\":2,\"98\":2,\"100\":1,\"101\":1,\"104\":5,\"106\":3,\"107\":3,\"111\":1,\"131\":4,\"137\":7,\"143\":1,\"150\":3,\"153\":5,\"159\":8,\"185\":4,\"205\":1,\"218\":1,\"220\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":2,\"234\":1,\"236\":1,\"237\":1,\"238\":2,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"248\":5,\"249\":5,\"255\":3,\"256\":2,\"257\":1,\"258\":2,\"259\":1,\"260\":1,\"261\":3,\"262\":3,\"268\":2,\"269\":1,\"285\":3,\"301\":2,\"309\":2,\"464\":1}}],[\"ollama\",{\"1\":{\"420\":9}}],[\"old\",{\"1\":{\"380\":1}}],[\"over\",{\"1\":{\"337\":1,\"420\":1}}],[\"override\",{\"1\":{\"125\":1,\"131\":2,\"137\":3,\"143\":4,\"150\":4,\"153\":8,\"159\":3,\"181\":1,\"185\":3,\"205\":1,\"308\":4,\"311\":4}}],[\"ok\",{\"1\":{\"271\":3,\"272\":3,\"275\":1,\"327\":1,\"328\":1}}],[\"online\",{\"1\":{\"420\":1}}],[\"on\",{\"1\":{\"392\":5,\"501\":1,\"504\":1}}],[\"once保证函数在多线程环境下只调用一次\",{\"1\":{\"262\":1}}],[\"onceflag\",{\"1\":{\"259\":2}}],[\"once\",{\"1\":{\"259\":4,\"420\":1}}],[\"once来保证某一函数在多线程环境中只调用一次\",{\"1\":{\"259\":1}}],[\"once相关\",{\"0\":{\"259\":1},\"1\":{\"254\":1}}],[\"oneline\",{\"1\":{\"432\":3}}],[\"one\",{\"1\":{\"238\":1,\"271\":1}}],[\"op\",{\"1\":{\"308\":12,\"309\":4}}],[\"optimizer\",{\"1\":{\"269\":1}}],[\"options\",{\"1\":{\"298\":2,\"317\":1,\"472\":2}}],[\"option\",{\"1\":{\"181\":2,\"311\":3}}],[\"operator=\",{\"1\":{\"255\":1}}],[\"open\",{\"1\":{\"62\":1,\"220\":1,\"290\":2,\"420\":7}}],[\"other\",{\"1\":{\"131\":1,\"269\":3}}],[\"objfile\",{\"1\":{\"503\":2,\"504\":1}}],[\"object\",{\"1\":{\"34\":1,\"181\":1,\"185\":1}}],[\"observer\",{\"1\":{\"123\":1,\"124\":2,\"310\":4}}],[\"ocp\",{\"1\":{\"118\":1}}],[\"origins=\",{\"1\":{\"420\":1}}],[\"origin\",{\"1\":{\"338\":1,\"427\":3,\"443\":1,\"444\":1,\"445\":1,\"450\":1}}],[\"origincounter\",{\"1\":{\"258\":1}}],[\"org\",{\"1\":{\"316\":1}}],[\"organization\",{\"1\":{\"95\":1}}],[\"orders\",{\"1\":{\"392\":15,\"393\":1,\"394\":2}}],[\"order\",{\"1\":{\"131\":7,\"241\":2,\"246\":3,\"248\":7,\"249\":15,\"250\":6,\"389\":2,\"392\":5,\"393\":2,\"397\":2}}],[\"or\",{\"1\":{\"91\":1}}],[\"off\",{\"1\":{\"501\":1,\"504\":1}}],[\"offset\",{\"1\":{\"396\":2,\"397\":1}}],[\"of\",{\"1\":{\"41\":1,\"42\":1,\"47\":1,\"48\":1,\"95\":1,\"157\":1,\"460\":1,\"467\":1}}],[\"out\",{\"1\":{\"41\":1,\"42\":1,\"47\":1,\"48\":1,\"268\":3,\"269\":1,\"460\":1,\"467\":1}}],[\"o\",{\"1\":{\"8\":1,\"10\":1,\"13\":1,\"14\":1,\"19\":2,\"21\":2,\"23\":6,\"29\":1,\"30\":2,\"34\":9,\"39\":3,\"42\":2,\"45\":3,\"48\":1,\"49\":1,\"51\":1,\"56\":14,\"61\":2,\"67\":1,\"72\":1,\"73\":6,\"86\":1,\"89\":1,\"90\":1,\"91\":3,\"92\":1,\"93\":7,\"95\":3,\"110\":2,\"213\":1,\"214\":2,\"220\":1,\"317\":1}}],[\"o操作\",{\"1\":{\"1\":1}}],[\"在调试大型项目或频繁进行调试的场景下\",{\"1\":{\"505\":1}}],[\"在调试大型项目时\",{\"1\":{\"500\":1}}],[\"在调试会话开始时自动设置断点\",{\"1\":{\"495\":1}}],[\"在调用构造函数时还不能确定对象的真实类型\",{\"1\":{\"208\":1}}],[\"在动态库的源文件中设置断点\",{\"1\":{\"488\":1}}],[\"在断点上添加条件\",{\"1\":{\"485\":1}}],[\"在每次程序暂停时显示变量的值\",{\"1\":{\"484\":1}}],[\"在类的某个方法上设置断点\",{\"1\":{\"482\":1}}],[\"在源文件的第\",{\"1\":{\"482\":1}}],[\"在函数\",{\"1\":{\"482\":1}}],[\"在函数入口处设置断点\",{\"1\":{\"321\":1}}],[\"在主函数处设置断点\",{\"1\":{\"482\":1}}],[\"在构建目录中运行\",{\"1\":{\"468\":1}}],[\"在构造函数执行时会对虚表指针进行初始化\",{\"1\":{\"206\":1}}],[\"在构造函数中创建虚表并对虚表初始化\",{\"1\":{\"205\":1}}],[\"在构造子类对象时\",{\"1\":{\"205\":1}}],[\"在构造时\",{\"1\":{\"205\":1}}],[\"在线程间设置断点等\",{\"1\":{\"489\":1}}],[\"在线文档\",{\"1\":{\"455\":1}}],[\"在线学习git\",{\"1\":{\"455\":1}}],[\"在线工具\",{\"0\":{\"421\":1}}],[\"在你的项目中添加一个子模块\",{\"1\":{\"447\":1}}],[\"在一个空目录中运行\",{\"1\":{\"425\":1}}],[\"在一个正则表达式中\",{\"1\":{\"402\":1}}],[\"在一个查询中嵌套另一个查询\",{\"1\":{\"397\":1}}],[\"在一个复杂的系统运行环境下\",{\"1\":{\"16\":1}}],[\"在执行与某个数据库相关的操作之前\",{\"1\":{\"373\":1}}],[\"在高并发或长时间任务处理中\",{\"1\":{\"365\":1}}],[\"在请求失败时可以安全地进行重试\",{\"1\":{\"361\":1}}],[\"在请求头中传递令牌来验证身份\",{\"1\":{\"339\":1}}],[\"在压缩效率上优于\",{\"1\":{\"350\":1}}],[\"在缓存有效期过后\",{\"1\":{\"343\":1}}],[\"在缓存有效期内不会与服务器通信\",{\"1\":{\"343\":1}}],[\"在缓存淘汰\",{\"1\":{\"25\":1}}],[\"在同一个\",{\"1\":{\"334\":1}}],[\"在特定内存地址设置断点\",{\"1\":{\"321\":1}}],[\"在另一个终端中启动\",{\"1\":{\"320\":1}}],[\"在当前目录linux\",{\"1\":{\"316\":1}}],[\"在子进程中执行特定代码\",{\"1\":{\"302\":1}}],[\"在极少见的情况下\",{\"1\":{\"290\":1}}],[\"在tcp连接的生命周期中\",{\"1\":{\"290\":1}}],[\"在运行时对加密的字符串进行解密并返回\",{\"1\":{\"286\":1}}],[\"在我们的例子中\",{\"1\":{\"283\":1}}],[\"在没有返回值优化的情况下\",{\"1\":{\"268\":1}}],[\"在使用之前使用函数lock\",{\"1\":{\"267\":1}}],[\"在多任务操作系统中\",{\"1\":{\"223\":1}}],[\"在多次插入和删除操作后\",{\"1\":{\"95\":1}}],[\"在守护进程的主循环中执行具体任务\",{\"1\":{\"221\":1}}],[\"在实际开发中的应用\",{\"0\":{\"345\":1}}],[\"在实际开发中\",{\"1\":{\"218\":1}}],[\"在实际中\",{\"1\":{\"70\":1}}],[\"在系统中\",{\"1\":{\"217\":1}}],[\"在对象生命期仅仅运行一次\",{\"1\":{\"208\":1}}],[\"在销毁一个对象时\",{\"1\":{\"207\":1}}],[\"在c++中\",{\"1\":{\"207\":1}}],[\"在class中用于声明类成员或函数\",{\"1\":{\"198\":1}}],[\"在编译时就构造完成\",{\"1\":{\"206\":1}}],[\"在自己的虚表中将此虚函数地址添加在后面\",{\"1\":{\"205\":1}}],[\"在派生类定义对象时\",{\"1\":{\"205\":1}}],[\"在派生类中重写该函数\",{\"1\":{\"205\":1}}],[\"在含有虚函数的类实例化对象时\",{\"1\":{\"205\":1}}],[\"在预编译时期会被完整替换\",{\"1\":{\"201\":1}}],[\"在申请\",{\"1\":{\"199\":1}}],[\"在视图中使用自定义委托\",{\"1\":{\"181\":1}}],[\"在这个示例中\",{\"1\":{\"173\":1}}],[\"在这种情况下\",{\"1\":{\"78\":1,\"95\":1}}],[\"在这种设定下\",{\"1\":{\"61\":1}}],[\"在复杂的场景下\",{\"1\":{\"172\":1}}],[\"在复杂的系统环境中\",{\"1\":{\"13\":1}}],[\"在代码的分离和维护性方面优于\",{\"1\":{\"169\":1}}],[\"在代码实现中\",{\"1\":{\"90\":1}}],[\"在某些场景下\",{\"1\":{\"452\":1}}],[\"在某些需要链式处理请求的场景中\",{\"1\":{\"160\":1}}],[\"在某些数据缓冲区的实现中\",{\"1\":{\"25\":1}}],[\"在日志框架中\",{\"1\":{\"160\":1}}],[\"在图形用户界面\",{\"1\":{\"160\":1}}],[\"在基类的函数前加上virtual关键字\",{\"1\":{\"205\":1}}],[\"在基础类上存在多维度功能的扩展\",{\"1\":{\"137\":1}}],[\"在基于链表的实现中\",{\"1\":{\"49\":1}}],[\"在基于数组的实现中\",{\"1\":{\"49\":1}}],[\"在插入或删除节点后\",{\"1\":{\"110\":1}}],[\"在需要频繁进行增删查改操作的场景中\",{\"1\":{\"95\":1}}],[\"在论文\",{\"1\":{\"95\":1}}],[\"在下图所示的完美二叉树中插入两个节点后\",{\"1\":{\"95\":1}}],[\"在理想情况下\",{\"1\":{\"93\":1}}],[\"在二叉搜索树的删除节点方法的基础上\",{\"1\":{\"107\":1}}],[\"在二叉搜索树中删除节点\",{\"1\":{\"91\":3}}],[\"在二叉搜索树中插入节点\",{\"1\":{\"90\":1}}],[\"在二叉树中插入与删除节点\",{\"1\":{\"81\":1}}],[\"在二叉树中插入与删除节点可以通过修改指针来实现\",{\"1\":{\"81\":1}}],[\"在二叉树中\",{\"1\":{\"77\":1,\"78\":1,\"81\":1}}],[\"在最佳结构和最差结构下\",{\"1\":{\"86\":1}}],[\"在中文社区中\",{\"1\":{\"83\":1}}],[\"在中间插入元素\",{\"1\":{\"30\":1}}],[\"在完美二叉树中\",{\"1\":{\"83\":1}}],[\"在扩容后可能会被分配到多个桶中\",{\"1\":{\"73\":1}}],[\"在扩容后\",{\"1\":{\"73\":1}}],[\"在密码学中\",{\"1\":{\"72\":1}}],[\"在许多编程语言中\",{\"1\":{\"71\":1}}],[\"在随机输入\",{\"1\":{\"68\":1}}],[\"在相同的哈希函数顺序下进行查找\",{\"1\":{\"65\":1}}],[\"在该位置插入节点\",{\"1\":{\"90\":1}}],[\"在该机制下\",{\"1\":{\"63\":1}}],[\"在该方案中\",{\"1\":{\"25\":1}}],[\"在开放寻址中删除元素导致的查询问题\",{\"1\":{\"63\":1}}],[\"在原始哈希表中\",{\"1\":{\"61\":1}}],[\"在哈希表中访问对应的桶\",{\"1\":{\"58\":1}}],[\"在哈希表中\",{\"1\":{\"58\":2,\"72\":1}}],[\"在哈希表中删除键值对\",{\"1\":{\"57\":1}}],[\"在哈希表中添加键值对\",{\"1\":{\"57\":1}}],[\"在哈希表中进行增删查改的时间复杂度都是\",{\"1\":{\"56\":1}}],[\"在出栈后\",{\"1\":{\"52\":1}}],[\"在时间效率和空间效率的对比上\",{\"1\":{\"51\":1}}],[\"在时间效率方面\",{\"1\":{\"51\":1}}],[\"在空间效率方面\",{\"1\":{\"51\":1}}],[\"在递归函数中\",{\"1\":{\"50\":1}}],[\"在初始化列表时\",{\"1\":{\"49\":1}}],[\"在此基础上\",{\"1\":{\"474\":1}}],[\"在此处执行需要守护的任务\",{\"1\":{\"218\":1}}],[\"在此\",{\"1\":{\"45\":1}}],[\"在此不再赘述\",{\"1\":{\"42\":1,\"108\":1}}],[\"在双十一期间\",{\"1\":{\"43\":1}}],[\"在越过数组尾部时\",{\"1\":{\"42\":1}}],[\"在不断进行入队和出队的过程中\",{\"1\":{\"42\":1}}],[\"在尾节点后添加\",{\"1\":{\"41\":1}}],[\"在尾部添加元素\",{\"1\":{\"30\":1}}],[\"在列表末尾添加元素是否时时刻刻都为\",{\"1\":{\"34\":1}}],[\"在列表尾部添加元素的时间复杂度为\",{\"1\":{\"30\":1}}],[\"在选择数据结构时\",{\"1\":{\"33\":1}}],[\"在本示例中\",{\"1\":{\"32\":2}}],[\"在索引\",{\"1\":{\"30\":1}}],[\"在接下来的讨论中\",{\"1\":{\"26\":1}}],[\"在操作系统中\",{\"1\":{\"25\":1}}],[\"在网页浏览器中\",{\"1\":{\"25\":1}}],[\"在环形链表中\",{\"1\":{\"24\":1}}],[\"在链表中插入和删除操作的时间复杂度是\",{\"1\":{\"34\":1}}],[\"在链表中插入节点非常容易\",{\"1\":{\"19\":1}}],[\"在链表中查找值为\",{\"1\":{\"22\":1}}],[\"在链表中访问节点的效率较低\",{\"1\":{\"21\":1}}],[\"在链表中删除节点也非常方便\",{\"1\":{\"20\":1}}],[\"在链表的节点\",{\"1\":{\"19\":1}}],[\"在大数据量下的效率较低\",{\"1\":{\"19\":1}}],[\"在大多数编程语言中\",{\"1\":{\"11\":1}}],[\"在\",{\"1\":{\"16\":1,\"34\":1,\"52\":1,\"71\":1,\"73\":1,\"81\":1,\"95\":1,\"106\":1,\"111\":3,\"183\":1,\"219\":1,\"249\":1,\"320\":1,\"348\":1,\"464\":1,\"481\":1,\"482\":2,\"485\":1}}],[\"在数组很大的情况下非常耗时\",{\"1\":{\"13\":1}}],[\"在数组中删除首元素的时间复杂度为\",{\"1\":{\"42\":1}}],[\"在数组中插入元素的时间复杂度为\",{\"1\":{\"19\":1}}],[\"在数组中查找指定元素\",{\"1\":{\"12\":1}}],[\"在数组中查找指定元素需要遍历数组\",{\"1\":{\"12\":1}}],[\"在数组中访问元素非常高效\",{\"1\":{\"8\":1}}],[\"在数组的索引\",{\"1\":{\"9\":1}}],[\"在区间\",{\"1\":{\"8\":1}}],[\"在未指定初始值的情况下\",{\"1\":{\"7\":1}}],[\"是最常用的版本控制工具之一\",{\"1\":{\"423\":1}}],[\"是最安全的哈希算法之一\",{\"1\":{\"70\":1}}],[\"是正则表达式中的基础元素\",{\"1\":{\"412\":1}}],[\"是资源的唯一标识符\",{\"1\":{\"342\":1}}],[\"是幂等的\",{\"1\":{\"331\":1}}],[\"是因为我们不需要同步其他内存操作\",{\"1\":{\"249\":1}}],[\"是操作系统提供的功能\",{\"1\":{\"223\":1}}],[\"是在程序崩溃时生成的内存映像文件\",{\"1\":{\"490\":1}}],[\"是在大型项目或多仓库项目中非常有用的功能\",{\"1\":{\"454\":1}}],[\"是在\",{\"1\":{\"216\":1}}],[\"是内存地址偏移一个元素的位置\",{\"1\":{\"200\":1}}],[\"是c++\",{\"1\":{\"199\":1}}],[\"是c语言标准库提供的一组用于动态申请释放内存的api\",{\"1\":{\"199\":1}}],[\"是\",{\"1\":{\"181\":1,\"264\":1,\"283\":1,\"297\":1,\"494\":1}}],[\"是用户与数据进行交互的界面部分\",{\"1\":{\"180\":1}}],[\"是用户界面\",{\"1\":{\"166\":1}}],[\"是数据的抽象表示\",{\"1\":{\"179\":1}}],[\"是负责视图与模型之间通信的中介\",{\"1\":{\"169\":1}}],[\"是关于如何解决某些问题的指导方针\",{\"1\":{\"117\":1}}],[\"是访问节点高度\",{\"1\":{\"111\":1}}],[\"是没有意义的\",{\"1\":{\"111\":1}}],[\"是的\",{\"1\":{\"111\":3}}],[\"是指从该节点到它的最远叶节点的距离\",{\"1\":{\"97\":1}}],[\"是随机均匀分布的\",{\"1\":{\"69\":1}}],[\"是两个独立的概念\",{\"1\":{\"68\":1}}],[\"是哈希表的一个重要概念\",{\"1\":{\"59\":1}}],[\"是乱序的\",{\"1\":{\"56\":1}}],[\"是否需要释放出栈节点的内存\",{\"1\":{\"52\":1}}],[\"是否需要把\",{\"1\":{\"34\":1}}],[\"是不是因为有什么局限性呢\",{\"1\":{\"34\":1}}],[\"是一个功能强大的调试工具\",{\"1\":{\"478\":1,\"490\":1}}],[\"是一个非常灵活和强大的构建工具\",{\"1\":{\"474\":1}}],[\"是一个非常有用的功能\",{\"1\":{\"446\":1}}],[\"是一个跨平台的构建系统生成工具\",{\"1\":{\"458\":1}}],[\"是一个广泛使用的关系型数据库管理系统\",{\"1\":{\"369\":1}}],[\"是一个强大的系统调用\",{\"1\":{\"304\":1}}],[\"是一个抽象的数据结构概念\",{\"1\":{\"26\":1}}],[\"是一种用来匹配字符串的模式描述语言\",{\"1\":{\"402\":1}}],[\"是一种在多线程环境中实现并发访问的技术\",{\"1\":{\"245\":1}}],[\"是一种在后台运行的进程\",{\"1\":{\"219\":1}}],[\"是一种典型的\",{\"1\":{\"173\":1}}],[\"是一种常用于前端开发中的架构模式\",{\"1\":{\"163\":1}}],[\"是一种行为设计模式\",{\"1\":{\"157\":1}}],[\"是一种行为型设计模式\",{\"1\":{\"123\":1,\"129\":1}}],[\"是一种结构型设计模式\",{\"1\":{\"135\":1,\"141\":1}}],[\"是一种形象化的说法\",{\"1\":{\"100\":1}}],[\"是一种非线性数据结构\",{\"1\":{\"77\":1}}],[\"是一种遵循先入后出逻辑的线性数据结构\",{\"1\":{\"44\":1}}],[\"是一种遵循先入先出规则的线性数据结构\",{\"1\":{\"38\":1}}],[\"是一种线性数据结构\",{\"1\":{\"5\":1,\"16\":1}}],[\"是合理的\",{\"1\":{\"8\":1}}],[\"因请求资源阻塞时\",{\"1\":{\"244\":1}}],[\"因而只会调用基类的析构函数\",{\"1\":{\"208\":1}}],[\"因而构造函数不可能成为虚函数从实际含义上看\",{\"1\":{\"208\":1}}],[\"因为它可能执行未经信任的命令\",{\"1\":{\"505\":1}}],[\"因为编译器知道要返回的对象将要被销毁\",{\"1\":{\"266\":1}}],[\"因为不是本文的主题\",{\"1\":{\"260\":1}}],[\"因为条件变量在wait时需要有手动释放锁的能力\",{\"1\":{\"257\":1}}],[\"因为构造函数本来就是为了明确初始化对象成员才产生的\",{\"1\":{\"208\":1}}],[\"因为父类对象会在子类之前进行构造\",{\"1\":{\"207\":1}}],[\"因为高度和深度通常定义为\",{\"1\":{\"111\":1}}],[\"因为质数不与其他数字存在公约数\",{\"1\":{\"69\":1}}],[\"因为线性探测可能需要跳过多个\",{\"1\":{\"63\":1}}],[\"因为其之下可能还存在键值对\",{\"1\":{\"63\":1}}],[\"因为需要线性遍历链表来查找对应元素\",{\"1\":{\"61\":1}}],[\"因为哈希表扩容需要进行大量的数据搬运与哈希值计算\",{\"1\":{\"60\":1}}],[\"因为数组中包含了两种\",{\"1\":{\"34\":1}}],[\"因为数组是线性数据结构\",{\"1\":{\"12\":1}}],[\"因为从\",{\"1\":{\"8\":1}}],[\"因此需要谨慎操作\",{\"1\":{\"374\":1}}],[\"因此需要遍历其中的所有元素\",{\"1\":{\"56\":1}}],[\"因此也就规定构造函数不能是虚函数\",{\"1\":{\"208\":1}}],[\"因此也可以用\",{\"1\":{\"111\":1}}],[\"因此调用子类的虚函数时不安全的\",{\"1\":{\"207\":1}}],[\"因此最有可能存在全局数据区\",{\"1\":{\"206\":1}}],[\"因此设置成\",{\"1\":{\"111\":1}}],[\"因此是一种平衡二叉搜索树\",{\"1\":{\"96\":1}}],[\"因此这个节点可以是右子树的最小节点或左子树的最大节点\",{\"1\":{\"91\":1}}],[\"因此执行\",{\"1\":{\"89\":2}}],[\"因此哈希函数的最后一步往往是对数组长度取模\",{\"1\":{\"73\":1}}],[\"因此常用在各类安全应用与协议中\",{\"1\":{\"70\":1}}],[\"因此加法哈希和异或哈希无法区分内容相同但顺序不同的字符串\",{\"1\":{\"70\":1}}],[\"因此输出的哈希值的均匀性会明显提升\",{\"1\":{\"69\":1}}],[\"因此理论上哈希冲突是不可避免的\",{\"1\":{\"60\":1}}],[\"因此可以通过扩容哈希表来缓解哈希冲突\",{\"1\":{\"72\":1}}],[\"因此可以实现栈与队列的所有应用\",{\"1\":{\"52\":1}}],[\"因此可以在\",{\"1\":{\"29\":1}}],[\"因此不需要手动释放内存\",{\"1\":{\"52\":1}}],[\"因此链表节点占用的空间相对较大\",{\"1\":{\"49\":1}}],[\"因此平均效率更高\",{\"1\":{\"49\":1}}],[\"因此效率相对较低\",{\"1\":{\"49\":1}}],[\"因此效率较高\",{\"1\":{\"49\":1}}],[\"因此一般不会用到\",{\"1\":{\"49\":1}}],[\"因此我们只要按照\",{\"1\":{\"111\":1}}],[\"因此我们只能在栈顶添加或删除元素\",{\"1\":{\"46\":1}}],[\"因此我们需要为节点类添加\",{\"1\":{\"97\":1}}],[\"因此我们可以很容易地从哈希值反推出可用的\",{\"1\":{\"68\":1}}],[\"因此我们可以使用动态数组\",{\"1\":{\"48\":1}}],[\"因此栈可以视为一种受限制的数组或链表\",{\"1\":{\"46\":1}}],[\"因此堆更加适合存储大型数组\",{\"1\":{\"34\":1}}],[\"因此\",{\"1\":{\"34\":3,\"49\":1,\"58\":1,\"59\":2,\"73\":1,\"81\":1,\"90\":1,\"91\":1,\"106\":1,\"111\":1,\"208\":1,\"223\":1}}],[\"因此它们被各类安全应用弃用\",{\"1\":{\"70\":1}}],[\"因此它通常比链表更高效\",{\"1\":{\"33\":1}}],[\"因此它的索引为\",{\"1\":{\"8\":1}}],[\"因此只能看作一个具有长度限制的列表\",{\"1\":{\"26\":1}}],[\"因此各种性质和操作效率也呈现对立的特点\",{\"1\":{\"23\":1}}],[\"因此在高并发场景下具有更好的性能\",{\"1\":{\"239\":1}}],[\"因此在应用时需要根据具体情况权衡\",{\"1\":{\"174\":1}}],[\"因此在该空桶之下的元素都无法再被访问到\",{\"1\":{\"63\":1}}],[\"因此在相同数据量下\",{\"1\":{\"16\":1}}],[\"因此在大多数编程语言中\",{\"1\":{\"13\":1}}],[\"因此在插入元素后\",{\"1\":{\"10\":1}}],[\"因此插入一个元素必定会导致数组尾部元素\",{\"1\":{\"9\":1}}],[\"首先整理一下虚函数表的特征\",{\"1\":{\"206\":1}}],[\"首先初始化节点\",{\"1\":{\"80\":1}}],[\"首先\",{\"1\":{\"73\":1}}],[\"首先通过哈希函数访问链表头节点\",{\"1\":{\"61\":1}}],[\"首尾相接\",{\"1\":{\"24\":1}}],[\"首个元素的地址偏移量是\",{\"1\":{\"8\":1}}],[\"首元素内存地址\",{\"1\":{\"8\":1,\"34\":1}}],[\"这会生成一个适合当前平台的构建系统文件\",{\"1\":{\"468\":1}}],[\"这会将\",{\"1\":{\"447\":1}}],[\"这会导致出队操作效率较低\",{\"1\":{\"42\":1}}],[\"这对于需要将多个项目组合在一起的场景非常实用\",{\"1\":{\"446\":1}}],[\"这将返回表\",{\"1\":{\"387\":1}}],[\"这将删除数据库及其所有数据\",{\"1\":{\"374\":1}}],[\"这两个unique\",{\"1\":{\"266\":1}}],[\"这两种模式都可以提高代码的灵活性和可维护性\",{\"1\":{\"153\":1}}],[\"这两种初始化方法\",{\"1\":{\"28\":1}}],[\"这就是为什么构造函数调用是从基类到更加派生类顺序的还有一个理由\",{\"1\":{\"208\":1}}],[\"这就代表有哈希冲突\",{\"1\":{\"73\":1}}],[\"这大家都知道\",{\"1\":{\"208\":1}}],[\"这与微软的编译器将虚函数表存放在常量段存在一些差别\",{\"1\":{\"206\":1}}],[\"这与数组等价\",{\"1\":{\"73\":1}}],[\"这里会以cppreference为主\",{\"1\":{\"262\":1}}],[\"这里暂不介绍\",{\"1\":{\"260\":1}}],[\"这里使用条件变量实现一个countdownlatch\",{\"1\":{\"260\":1}}],[\"这里主要介绍两种raii方式的锁封装\",{\"1\":{\"257\":1}}],[\"这里可以对thread进行封装\",{\"1\":{\"255\":1}}],[\"这里按照如下顺序介绍\",{\"1\":{\"254\":1}}],[\"这里需要注意\",{\"1\":{\"234\":1,\"255\":1}}],[\"这里需要引出虚表和虚基表指针的概念\",{\"1\":{\"205\":1}}],[\"这里有两种解决办法\",{\"1\":{\"234\":1,\"255\":1}}],[\"这里的锁就是上面介绍的std\",{\"1\":{\"260\":1}}],[\"这里的\",{\"1\":{\"111\":1}}],[\"这里的空间浪费主要有两方面含义\",{\"1\":{\"34\":1}}],[\"这里的空间浪费是指额外增加的变量如容量\",{\"1\":{\"34\":1}}],[\"这3者的区别\",{\"0\":{\"200\":1}}],[\"这使得\",{\"1\":{\"169\":1}}],[\"这三部分通过数据绑定\",{\"1\":{\"164\":1}}],[\"这三个哈希值\",{\"1\":{\"69\":1}}],[\"这方面有什么考量吗\",{\"1\":{\"111\":1}}],[\"这棵二叉搜索树便会退化为链表\",{\"1\":{\"95\":1}}],[\"这可以通过以下步骤实现\",{\"1\":{\"488\":1}}],[\"这可以通过在节点中保存一个指向父节点的引用来实现\",{\"1\":{\"25\":1}}],[\"这可能会加剧哈希冲突\",{\"1\":{\"70\":1}}],[\"这进一步增加了扩容过程的计算开销\",{\"1\":{\"59\":1}}],[\"这显然是不对的\",{\"1\":{\"59\":1}}],[\"这时可能会发生错误\",{\"1\":{\"255\":1}}],[\"这时可能会发生crash\",{\"1\":{\"234\":1}}],[\"这时需要特别注意权限管理\",{\"1\":{\"222\":1}}],[\"这时各种操作的时间复杂度也会退化为\",{\"1\":{\"93\":1}}],[\"这时我们可以将该语言的\",{\"1\":{\"45\":1}}],[\"这时候假设析构函数不是虚函数\",{\"1\":{\"208\":1}}],[\"这时候时间复杂度就会是\",{\"1\":{\"34\":1}}],[\"这时候使用双向链表就非常合适\",{\"1\":{\"25\":1}}],[\"这个\",{\"1\":{\"504\":1}}],[\"这个例子展示了如何加载一个自定义的\",{\"1\":{\"503\":1}}],[\"这个示例定义了一个名为\",{\"1\":{\"502\":1}}],[\"这个示例模拟了请假请求根据天数由不同级别的领导审批的场景\",{\"1\":{\"159\":1}}],[\"这个示例模拟了不同折扣率下商品价格的计算\",{\"1\":{\"131\":1}}],[\"这个文件常用于为特定项目或代码库定制调试环境\",{\"1\":{\"496\":1}}],[\"这个是正常的数据传输状态\",{\"1\":{\"290\":1}}],[\"这个状态通常由服务器处于被动打开\",{\"1\":{\"290\":1}}],[\"这个操作是原子的\",{\"1\":{\"246\":1}}],[\"这个构造函数又将设置vptr指向它的\",{\"1\":{\"208\":1}}],[\"这个时候再调用子类的虚函数没有任何意义\",{\"1\":{\"207\":1}}],[\"这个模式主要包括以下几个部分\",{\"1\":{\"158\":1}}],[\"这个类是装饰器模式的核心\",{\"1\":{\"136\":1}}],[\"这个在\",{\"1\":{\"52\":1}}],[\"这个问题不难解决\",{\"1\":{\"42\":1}}],[\"这个公式计算出的\",{\"1\":{\"42\":1}}],[\"这些子模块的操作与普通子模块类似\",{\"1\":{\"453\":1}}],[\"这些字符具有特定的功能\",{\"1\":{\"403\":1}}],[\"这些指令能够确保在多个线程操作同一数据时不会产生竞争条件\",{\"1\":{\"239\":1}}],[\"这些操作会通过委托发送到\",{\"1\":{\"182\":1}}],[\"这些连续位置发生哈希冲突的可能性越大\",{\"1\":{\"63\":1}}],[\"这些元素的地址不连续\",{\"1\":{\"34\":1}}],[\"这些数据都是以数组的形式构建的\",{\"1\":{\"15\":1}}],[\"这\",{\"1\":{\"34\":1}}],[\"这样单词中间的部分\",{\"1\":{\"407\":1}}],[\"这样会导致\",{\"1\":{\"319\":1}}],[\"这样两个指针指向的内存都无法释放\",{\"1\":{\"267\":1}}],[\"这样指向派生类的基类指针在运行时\",{\"1\":{\"205\":1}}],[\"这样\",{\"1\":{\"202\":1,\"284\":1}}],[\"这样当\",{\"1\":{\"168\":1}}],[\"这样在遍历至\",{\"1\":{\"90\":1}}],[\"这样在插入数据时\",{\"1\":{\"10\":1}}],[\"这样做可以最大程度保证树的平衡性\",{\"1\":{\"111\":1}}],[\"这样做既能保持哈希表的探测序列不变\",{\"1\":{\"73\":1}}],[\"这样做的好处是当每次查询或添加元素时\",{\"1\":{\"63\":1}}],[\"这样就可以解决c代码调用c++\",{\"1\":{\"202\":1}}],[\"这样就可以在\",{\"1\":{\"93\":1}}],[\"这样就不会有冲突了\",{\"1\":{\"73\":1}}],[\"这样就无须自行处理数组扩容问题\",{\"1\":{\"48\":1}}],[\"这样才能确保哈希表是可靠的\",{\"1\":{\"68\":1}}],[\"这样才能通过计算偏移量来获取对应元素位置\",{\"1\":{\"34\":1}}],[\"这样我们就可以通过后退操作回到上一个网页\",{\"1\":{\"50\":1}}],[\"这样一来\",{\"1\":{\"34\":1}}],[\"这是无锁编程的核心操作之一\",{\"1\":{\"246\":1}}],[\"这是为了允许父进程能够获取子进程的退出状态\",{\"1\":{\"216\":1}}],[\"这是通过哈希函数\",{\"1\":{\"58\":1}}],[\"这是因为哈希函数计算需要开销\",{\"1\":{\"73\":1}}],[\"这是因为\",{\"1\":{\"71\":1}}],[\"这是因为对象的哈希值通常是基于内存地址生成的\",{\"1\":{\"71\":1}}],[\"这是因为每次删除操作都会产生一个删除标记\",{\"1\":{\"63\":1}}],[\"这是因为删除元素会在数组内产生一个空桶\",{\"1\":{\"63\":1}}],[\"这是因为数组中存储的是节点的引用\",{\"1\":{\"34\":1}}],[\"这是因为我们通常无法事先确定需要存储多少数据\",{\"1\":{\"26\":1}}],[\"这是一个有趣的问题\",{\"1\":{\"69\":1}}],[\"这是一个\",{\"1\":{\"13\":1}}],[\"这种方式也可以\",{\"1\":{\"258\":1}}],[\"这种模式使得我们可以在不改变原始类代码的情况下\",{\"1\":{\"135\":1}}],[\"这种现象被称为哈希冲突\",{\"1\":{\"72\":1}}],[\"这种做法可以有效防止\",{\"1\":{\"71\":1}}],[\"这种做法包含丰富的先验信息\",{\"1\":{\"14\":1}}],[\"这种节点插入方法被称为\",{\"1\":{\"47\":1}}],[\"这种周期性规律可以通过\",{\"1\":{\"42\":1}}],[\"这种循环操作可以通过环形链表来实现\",{\"1\":{\"25\":1}}],[\"这意味着它们会匹配尽可能多的字符\",{\"1\":{\"411\":1}}],[\"这意味着某些计算可以在编译时完成\",{\"1\":{\"283\":1}}],[\"这意味着在二叉搜索树中进行中序遍历时\",{\"1\":{\"92\":1}}],[\"这意味着即使哈希表中有空桶\",{\"1\":{\"64\":1}}],[\"这意味着节点\",{\"1\":{\"34\":1}}],[\"这意味着\",{\"1\":{\"20\":1,\"67\":1}}],[\"这意味着计算数组元素的内存地址非常容易\",{\"1\":{\"8\":1}}],[\"这似乎有些反直觉\",{\"1\":{\"8\":1}}],[\"给定一组数据\",{\"1\":{\"93\":1}}],[\"给定一个待插入元素\",{\"1\":{\"90\":1}}],[\"给定一个列表索引\",{\"1\":{\"34\":1}}],[\"给定目标节点值\",{\"1\":{\"89\":1}}],[\"给定\",{\"1\":{\"56\":1}}],[\"给定数组内存地址\",{\"1\":{\"8\":1}}],[\"给定初始值\",{\"1\":{\"7\":1}}],[\"nh\",{\"1\":{\"505\":1}}],[\"ni\",{\"1\":{\"499\":1,\"504\":1}}],[\"ninja\",{\"1\":{\"458\":1,\"460\":1,\"469\":3,\"474\":2}}],[\"nx\",{\"1\":{\"496\":2,\"505\":1}}],[\"nginx\",{\"1\":{\"354\":1}}],[\"nproc\",{\"1\":{\"316\":1}}],[\"npm\",{\"1\":{\"173\":1}}],[\"native\",{\"1\":{\"255\":2}}],[\"named\",{\"1\":{\"224\":1}}],[\"namespace\",{\"1\":{\"205\":1,\"255\":1,\"256\":2,\"257\":1,\"261\":2,\"262\":1,\"268\":1,\"269\":1}}],[\"name\",{\"1\":{\"57\":1,\"173\":7,\"179\":1,\"269\":4,\"371\":1,\"373\":1,\"374\":1,\"376\":1,\"377\":2,\"378\":1,\"379\":6,\"380\":2,\"381\":1,\"383\":1,\"384\":1,\"385\":1,\"387\":1,\"395\":1,\"420\":1,\"439\":2}}],[\"n=7\",{\"1\":{\"111\":1}}],[\"n−1\",{\"1\":{\"86\":1}}],[\"n+1\",{\"1\":{\"86\":1,\"111\":1}}],[\"n5\",{\"1\":{\"34\":1,\"80\":2}}],[\"n4\",{\"1\":{\"18\":2,\"34\":1,\"80\":2}}],[\"n3\",{\"1\":{\"18\":3,\"34\":1,\"80\":2}}],[\"n2\",{\"1\":{\"18\":3,\"34\":1,\"80\":4,\"81\":3}}],[\"n1\",{\"1\":{\"18\":3,\"19\":3,\"20\":4,\"34\":1,\"80\":3,\"81\":3}}],[\"n0\",{\"1\":{\"18\":3,\"19\":5,\"20\":6}}],[\"net\",{\"1\":{\"173\":1,\"317\":1}}],[\"networkstream\",{\"1\":{\"137\":2}}],[\"nexti\",{\"1\":{\"499\":1,\"504\":1}}],[\"nexttail\",{\"1\":{\"248\":3,\"249\":7,\"250\":1}}],[\"nexthandler\",{\"1\":{\"159\":8}}],[\"next\",{\"1\":{\"16\":2,\"18\":1,\"24\":2,\"34\":2,\"320\":1,\"321\":1,\"483\":1}}],[\"newcounter\",{\"1\":{\"258\":1}}],[\"new的区别\",{\"0\":{\"199\":1}}],[\"new\",{\"0\":{\"199\":1},\"1\":{\"7\":2,\"13\":1,\"18\":5,\"41\":1,\"42\":1,\"47\":1,\"58\":1,\"61\":1,\"63\":2,\"80\":5,\"81\":1,\"90\":2,\"106\":1,\"131\":2,\"137\":4,\"173\":1,\"179\":3,\"180\":1,\"181\":1,\"186\":1,\"199\":3,\"205\":2,\"213\":1,\"220\":1,\"229\":3,\"234\":2,\"248\":1,\"249\":1,\"309\":2,\"311\":2,\"380\":1,\"384\":1,\"397\":1,\"430\":1}}],[\"not\",{\"1\":{\"328\":1,\"376\":1,\"388\":2,\"511\":1}}],[\"notifyobservers\",{\"1\":{\"310\":2}}],[\"notify\",{\"1\":{\"238\":4,\"260\":1}}],[\"nographic\",{\"1\":{\"319\":2}}],[\"nokaslr\",{\"1\":{\"319\":3}}],[\"normal\",{\"1\":{\"317\":1}}],[\"no\",{\"1\":{\"244\":1,\"271\":1,\"275\":1,\"317\":1,\"329\":1,\"342\":2}}],[\"now\",{\"1\":{\"234\":1}}],[\"nodiscount\",{\"1\":{\"131\":2}}],[\"node\",{\"1\":{\"16\":1,\"41\":9,\"47\":7,\"77\":3,\"78\":2,\"90\":3,\"97\":4,\"98\":4,\"100\":8,\"101\":7,\"102\":1,\"103\":1,\"104\":14,\"106\":13,\"107\":26,\"111\":3}}],[\"none\",{\"1\":{\"16\":1,\"24\":1,\"34\":1,\"63\":3,\"65\":1,\"78\":1,\"90\":3,\"317\":4}}],[\"nullptr\",{\"1\":{\"16\":2,\"20\":1,\"21\":2,\"22\":1,\"24\":2,\"41\":3,\"47\":1,\"58\":6,\"63\":10,\"77\":2,\"89\":1,\"90\":3,\"91\":9,\"98\":1,\"106\":1,\"107\":8,\"125\":1,\"137\":2,\"159\":3,\"181\":1,\"185\":1,\"308\":1,\"311\":1}}],[\"null\",{\"1\":{\"16\":1,\"205\":1,\"218\":3,\"220\":2,\"221\":1,\"225\":1,\"226\":2,\"227\":1,\"229\":2,\"376\":1,\"388\":3}}],[\"number>\",{\"1\":{\"482\":1}}],[\"num\",{\"1\":{\"9\":4,\"29\":1,\"31\":2,\"41\":5,\"42\":5,\"47\":4,\"48\":4,\"71\":2,\"89\":8,\"90\":9,\"91\":3}}],[\"nums1\",{\"1\":{\"7\":1,\"28\":1}}],[\"nums\",{\"1\":{\"7\":1,\"8\":2,\"9\":4,\"10\":3,\"11\":2,\"12\":2,\"13\":3,\"18\":3,\"28\":2,\"29\":2,\"30\":10,\"31\":3,\"42\":6}}],[\"n\",{\"1\":{\"10\":2,\"13\":1,\"19\":1,\"21\":1,\"23\":3,\"30\":1,\"34\":7,\"42\":1,\"49\":1,\"51\":1,\"56\":7,\"59\":1,\"61\":2,\"67\":1,\"73\":5,\"86\":2,\"92\":1,\"93\":3,\"95\":1,\"110\":1,\"228\":2,\"234\":2,\"275\":8,\"410\":6,\"411\":2,\"484\":1,\"487\":1,\"489\":1,\"496\":2,\"502\":1,\"504\":1}}],[\"443\",{\"1\":{\"330\":1}}],[\"404\",{\"1\":{\"328\":1,\"511\":1}}],[\"401\",{\"1\":{\"328\":1}}],[\"400\",{\"1\":{\"328\":1}}],[\"4xx\",{\"1\":{\"328\":1}}],[\"42\",{\"1\":{\"301\":1,\"482\":4,\"488\":1}}],[\"4=2h=\",{\"1\":{\"111\":1}}],[\"4614256650576692846\",{\"1\":{\"71\":1}}],[\"4\",{\"0\":{\"201\":1,\"227\":1,\"249\":1,\"432\":1,\"441\":1,\"450\":1},\"1\":{\"7\":2,\"18\":2,\"28\":1,\"30\":1,\"34\":2,\"39\":1,\"45\":1,\"61\":1,\"63\":1,\"64\":1,\"69\":2,\"77\":2,\"80\":1,\"205\":1,\"208\":1,\"220\":1,\"269\":3,\"273\":1,\"315\":2,\"410\":2,\"412\":1}}],[\"2部分组成\",{\"1\":{\"402\":1}}],[\"2xx\",{\"1\":{\"328\":1}}],[\"22\",{\"1\":{\"315\":1}}],[\"224\",{\"1\":{\"70\":1}}],[\"25\",{\"1\":{\"179\":1,\"388\":2}}],[\"256\",{\"1\":{\"70\":3}}],[\"2h\",{\"1\":{\"86\":1,\"111\":1}}],[\"2h+1−1\",{\"1\":{\"83\":1,\"86\":1}}],[\"2i−1\",{\"1\":{\"86\":1}}],[\"2023\",{\"1\":{\"410\":1}}],[\"204\",{\"1\":{\"346\":1}}],[\"201\",{\"1\":{\"328\":1,\"346\":1}}],[\"20\",{\"1\":{\"248\":2,\"249\":2,\"255\":1,\"275\":1,\"388\":1,\"396\":1}}],[\"200\",{\"1\":{\"256\":3,\"257\":1,\"327\":1,\"328\":1}}],[\"2005\",{\"1\":{\"163\":1}}],[\"2008\",{\"1\":{\"70\":1}}],[\"2002\",{\"1\":{\"70\":1}}],[\"20336\",{\"1\":{\"59\":2}}],[\"27\",{\"1\":{\"69\":2}}],[\"24\",{\"1\":{\"69\":2}}],[\"21\",{\"1\":{\"69\":2,\"275\":2,\"396\":1}}],[\"28\",{\"1\":{\"69\":1}}],[\"236\",{\"1\":{\"59\":1}}],[\"2\",{\"0\":{\"166\":1,\"199\":1,\"225\":1,\"247\":1,\"334\":1,\"352\":1,\"426\":1,\"430\":1,\"439\":1,\"444\":1,\"448\":1,\"468\":1},\"1\":{\"7\":2,\"18\":2,\"28\":1,\"30\":1,\"32\":1,\"34\":2,\"39\":1,\"45\":1,\"49\":1,\"59\":1,\"61\":3,\"63\":2,\"69\":1,\"70\":6,\"72\":2,\"77\":1,\"78\":1,\"80\":1,\"83\":1,\"91\":4,\"106\":1,\"107\":2,\"111\":1,\"159\":2,\"173\":1,\"185\":1,\"205\":1,\"208\":1,\"220\":2,\"224\":1,\"227\":2,\"237\":1,\"244\":1,\"271\":1,\"273\":1,\"290\":1,\"293\":1,\"301\":1,\"315\":1,\"352\":1,\"364\":1,\"388\":1,\"410\":2,\"412\":1,\"489\":2}}],[\"3xx\",{\"1\":{\"328\":1}}],[\"384\",{\"1\":{\"70\":1}}],[\"33\",{\"1\":{\"69\":2}}],[\"3000\",{\"1\":{\"420\":2}}],[\"302\",{\"1\":{\"328\":1}}],[\"301\",{\"1\":{\"328\":1}}],[\"30\",{\"1\":{\"69\":2,\"388\":1,\"391\":1}}],[\"32​\",{\"1\":{\"61\":1}}],[\"3600\",{\"1\":{\"342\":1}}],[\"36\",{\"1\":{\"59\":2,\"317\":4,\"319\":2}}],[\"3\",{\"0\":{\"167\":1,\"200\":1,\"226\":1,\"248\":1,\"335\":1,\"352\":1,\"427\":1,\"431\":1,\"440\":1,\"445\":1,\"449\":1,\"469\":1},\"1\":{\"7\":2,\"18\":2,\"28\":1,\"30\":5,\"34\":3,\"39\":1,\"45\":1,\"61\":1,\"63\":1,\"69\":10,\"70\":3,\"71\":5,\"72\":1,\"80\":1,\"100\":1,\"102\":1,\"159\":2,\"185\":2,\"205\":1,\"208\":1,\"220\":1,\"229\":1,\"273\":1,\"315\":1,\"352\":1,\"388\":1,\"405\":1,\"412\":2,\"461\":1,\"465\":1}}],[\"1xx\",{\"1\":{\"328\":1}}],[\"1ubuntu1~22\",{\"1\":{\"315\":1}}],[\"1状态\",{\"1\":{\"292\":1}}],[\"144\",{\"1\":{\"261\":1}}],[\"14159\",{\"1\":{\"71\":2}}],[\"1962\",{\"1\":{\"95\":1}}],[\"1995\",{\"1\":{\"70\":1}}],[\"1992\",{\"1\":{\"70\":1}}],[\"160\",{\"1\":{\"70\":1}}],[\"16750\",{\"1\":{\"57\":1}}],[\"11434\",{\"1\":{\"420\":1}}],[\"11\",{\"1\":{\"69\":1,\"315\":2}}],[\"18\",{\"1\":{\"69\":2,\"388\":1}}],[\"15466937326284535026\",{\"1\":{\"71\":1}}],[\"15\",{\"1\":{\"69\":2}}],[\"15937\",{\"1\":{\"57\":2}}],[\"123\",{\"1\":{\"410\":2}}],[\"1234\",{\"1\":{\"319\":1,\"320\":1,\"410\":1}}],[\"127\",{\"1\":{\"229\":1}}],[\"128\",{\"1\":{\"70\":1,\"224\":1}}],[\"12836\",{\"1\":{\"57\":1,\"59\":2}}],[\"12\",{\"1\":{\"69\":3,\"315\":2,\"410\":2}}],[\"13\",{\"1\":{\"69\":1}}],[\"136\",{\"1\":{\"59\":1}}],[\"13276\",{\"1\":{\"57\":1}}],[\"10i\",{\"1\":{\"484\":1}}],[\"10x\",{\"1\":{\"484\":1}}],[\"1024\",{\"1\":{\"226\":1,\"229\":1}}],[\"1000\",{\"1\":{\"239\":1,\"317\":1}}],[\"1000000007\",{\"1\":{\"69\":2}}],[\"100\",{\"1\":{\"58\":5,\"59\":2,\"68\":1,\"125\":3,\"131\":2,\"225\":1,\"328\":1,\"376\":1}}],[\"10583\",{\"1\":{\"57\":2}}],[\"10\",{\"0\":{\"200\":1},\"1\":{\"32\":1,\"159\":2,\"200\":1,\"220\":1,\"236\":2,\"238\":2,\"239\":2,\"240\":2,\"241\":2,\"242\":2,\"243\":2,\"248\":1,\"249\":2,\"255\":2,\"316\":5,\"319\":2,\"390\":1,\"396\":2,\"461\":1,\"465\":1,\"484\":4}}],[\"1\",{\"0\":{\"165\":1,\"198\":1,\"224\":1,\"246\":1,\"333\":3,\"425\":1,\"429\":1,\"438\":1,\"443\":1,\"447\":1,\"467\":1},\"1\":{\"7\":2,\"8\":2,\"9\":2,\"10\":2,\"12\":1,\"14\":1,\"18\":3,\"19\":1,\"21\":1,\"22\":1,\"23\":3,\"28\":1,\"29\":5,\"30\":2,\"34\":7,\"39\":4,\"42\":7,\"45\":4,\"47\":1,\"48\":1,\"56\":8,\"63\":8,\"64\":1,\"66\":1,\"69\":1,\"70\":3,\"71\":2,\"72\":2,\"73\":3,\"78\":3,\"80\":1,\"85\":1,\"86\":2,\"87\":1,\"91\":5,\"93\":1,\"97\":2,\"104\":2,\"106\":1,\"107\":2,\"185\":1,\"200\":1,\"205\":1,\"208\":1,\"218\":2,\"220\":2,\"224\":4,\"225\":2,\"227\":6,\"228\":1,\"229\":1,\"237\":1,\"238\":1,\"240\":4,\"241\":1,\"242\":1,\"243\":1,\"244\":1,\"248\":2,\"249\":4,\"255\":1,\"261\":1,\"262\":1,\"271\":2,\"273\":1,\"285\":4,\"290\":1,\"292\":1,\"293\":1,\"298\":2,\"299\":1,\"301\":1,\"315\":2,\"317\":8,\"319\":4,\"327\":2,\"333\":3,\"334\":2,\"384\":1,\"385\":1,\"388\":1,\"393\":2,\"394\":1,\"409\":2,\"411\":2,\"420\":1,\"461\":1}}],[\"=x\",{\"1\":{\"73\":2}}],[\"==dbg==\",{\"1\":{\"317\":2}}],[\"==\",{\"1\":{\"12\":1,\"20\":1,\"21\":1,\"22\":1,\"41\":3,\"42\":2,\"47\":1,\"48\":1,\"58\":1,\"61\":3,\"63\":6,\"90\":2,\"91\":6,\"98\":1,\"106\":1,\"107\":4,\"111\":3,\"185\":1,\"218\":4,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"248\":2,\"249\":4,\"255\":1,\"260\":1,\"298\":2,\"301\":2,\"485\":1}}],[\"=\",{\"1\":{\"7\":3,\"8\":2,\"9\":3,\"10\":2,\"11\":2,\"12\":1,\"13\":3,\"18\":9,\"19\":3,\"20\":3,\"21\":2,\"22\":3,\"28\":1,\"29\":2,\"31\":3,\"34\":6,\"39\":3,\"41\":15,\"42\":12,\"45\":3,\"47\":12,\"48\":1,\"57\":8,\"58\":17,\"59\":2,\"61\":10,\"63\":32,\"67\":1,\"69\":5,\"71\":8,\"80\":9,\"81\":4,\"89\":7,\"90\":10,\"91\":21,\"97\":3,\"98\":1,\"100\":4,\"101\":4,\"104\":3,\"106\":3,\"107\":15,\"111\":2,\"125\":4,\"131\":4,\"137\":7,\"143\":8,\"150\":8,\"153\":13,\"159\":11,\"179\":3,\"180\":1,\"181\":1,\"185\":4,\"186\":1,\"199\":2,\"205\":3,\"218\":5,\"220\":5,\"224\":2,\"225\":3,\"226\":4,\"227\":5,\"229\":7,\"236\":2,\"238\":4,\"239\":3,\"240\":2,\"241\":3,\"242\":1,\"243\":1,\"248\":8,\"249\":12,\"255\":8,\"256\":8,\"257\":4,\"259\":2,\"260\":2,\"261\":3,\"262\":1,\"268\":2,\"269\":2,\"272\":4,\"273\":1,\"274\":1,\"275\":5,\"285\":7,\"301\":2,\"308\":5,\"309\":2,\"310\":3,\"311\":6,\"384\":4,\"385\":1,\"388\":3,\"392\":5,\"393\":3,\"394\":1,\"397\":1,\"484\":2,\"499\":3,\"504\":3}}],[\"50\",{\"1\":{\"376\":1}}],[\"503\",{\"1\":{\"328\":1}}],[\"50000\",{\"1\":{\"397\":2}}],[\"500\",{\"1\":{\"328\":1}}],[\"5xx\",{\"1\":{\"328\":1}}],[\"512\",{\"1\":{\"70\":2}}],[\"5\",{\"0\":{\"202\":1,\"228\":1,\"433\":1,\"451\":1,\"467\":1,\"468\":1,\"469\":1},\"1\":{\"7\":6,\"18\":2,\"28\":1,\"30\":1,\"34\":2,\"39\":1,\"45\":1,\"69\":1,\"77\":2,\"80\":1,\"159\":2,\"185\":2,\"208\":1,\"220\":1,\"256\":4,\"257\":2,\"259\":2,\"261\":1,\"262\":1,\"272\":1,\"273\":1,\"397\":2,\"485\":2}}],[\"0x400550\",{\"1\":{\"484\":1}}],[\"0ubuntu1~22\",{\"1\":{\"315\":1}}],[\"04\",{\"1\":{\"315\":3}}],[\"0666\",{\"1\":{\"225\":1,\"226\":1,\"227\":1}}],[\"0\",{\"0\":{\"200\":1,\"333\":1},\"1\":{\"7\":1,\"8\":4,\"11\":2,\"12\":1,\"13\":1,\"18\":1,\"21\":1,\"22\":1,\"29\":2,\"31\":3,\"34\":3,\"41\":4,\"42\":3,\"47\":3,\"48\":1,\"59\":1,\"61\":5,\"63\":4,\"69\":9,\"78\":1,\"81\":1,\"83\":1,\"91\":5,\"97\":2,\"98\":3,\"104\":2,\"107\":1,\"111\":1,\"125\":2,\"131\":3,\"137\":1,\"143\":3,\"150\":3,\"153\":5,\"159\":2,\"186\":2,\"200\":3,\"205\":1,\"218\":12,\"220\":11,\"221\":1,\"224\":5,\"225\":4,\"226\":6,\"227\":8,\"228\":1,\"229\":8,\"234\":4,\"236\":2,\"237\":1,\"238\":2,\"239\":4,\"240\":2,\"241\":2,\"242\":2,\"243\":2,\"248\":5,\"249\":6,\"255\":5,\"256\":6,\"257\":3,\"259\":2,\"260\":5,\"261\":2,\"262\":1,\"268\":1,\"269\":1,\"271\":1,\"272\":2,\"273\":1,\"285\":6,\"298\":3,\"299\":1,\"301\":4,\"302\":2,\"308\":2,\"310\":1,\"311\":2,\"315\":2,\"333\":1,\"405\":1,\"406\":1,\"409\":2,\"411\":2,\"420\":3,\"461\":1,\"464\":1,\"503\":2,\"504\":1}}],[\"数字或下划线\",{\"1\":{\"405\":1}}],[\"数字或下划线字符\",{\"1\":{\"405\":2}}],[\"数字签名等\",{\"1\":{\"70\":1}}],[\"数量记录\",{\"1\":{\"32\":1}}],[\"数据验证和复杂的字符串操作\",{\"1\":{\"412\":1}}],[\"数据验证\",{\"1\":{\"402\":1,\"412\":1}}],[\"数据行操作\",{\"1\":{\"398\":1}}],[\"数据行是表中实际存储的数据记录\",{\"1\":{\"382\":1}}],[\"数据查询操作是数据库管理和应用开发中的核心任务之一\",{\"1\":{\"386\":1}}],[\"数据库是\",{\"1\":{\"370\":1}}],[\"数据库操作\",{\"1\":{\"369\":1,\"398\":1}}],[\"数据\",{\"1\":{\"327\":1}}],[\"数据包含在请求体中\",{\"1\":{\"327\":1}}],[\"数据处理\",{\"1\":{\"311\":2}}],[\"数据可以传输\",{\"1\":{\"293\":1}}],[\"数据可以在客户端和服务器之间双向传输\",{\"1\":{\"290\":1}}],[\"数据只能单向流动\",{\"1\":{\"224\":1}}],[\"数据已更改\",{\"1\":{\"183\":1}}],[\"数据更新主要依赖于信号与槽机制\",{\"1\":{\"183\":1}}],[\"数据发生变化时\",{\"1\":{\"182\":1}}],[\"数据发送方可以计算数据的哈希值并将其一同发送\",{\"1\":{\"68\":1}}],[\"数据流的方向如下\",{\"1\":{\"182\":1}}],[\"数据流可能会被分成多个缓冲块并放入一个环形链表\",{\"1\":{\"25\":1}}],[\"数据保持一致\",{\"1\":{\"180\":1}}],[\"数据同步\",{\"0\":{\"442\":1},\"1\":{\"180\":1}}],[\"数据的变化\",{\"1\":{\"179\":1}}],[\"数据绑定与更新\",{\"0\":{\"183\":1}}],[\"数据绑定使得\",{\"1\":{\"171\":1}}],[\"数据绑定机制\",{\"1\":{\"171\":1}}],[\"数据绑定机制确保视图能够实时反映\",{\"1\":{\"166\":1}}],[\"数据完整性检查\",{\"1\":{\"68\":1}}],[\"数据操作效率基本一致\",{\"1\":{\"34\":1}}],[\"数据主要存储在内存中\",{\"1\":{\"33\":1}}],[\"数据缓冲区\",{\"1\":{\"25\":1}}],[\"数据结构的哈希值\",{\"0\":{\"71\":1}}],[\"数据结构\",{\"0\":{\"114\":1},\"2\":{\"35\":1,\"53\":1,\"74\":1,\"112\":1,\"115\":1}}],[\"数据结构实现\",{\"1\":{\"15\":1}}],[\"数据结构与算法\",{\"1\":{\"2\":1}}],[\"数组比二叉搜索树的效率更高\",{\"1\":{\"93\":1}}],[\"数组中\",{\"1\":{\"286\":1}}],[\"数组中连续被占用的位置越长\",{\"1\":{\"63\":1}}],[\"数组中包含元素的有效区间为\",{\"1\":{\"42\":1}}],[\"数组长度\",{\"1\":{\"58\":1,\"73\":2}}],[\"数组索引\",{\"1\":{\"58\":1}}],[\"数组实现额外支持随机访问\",{\"1\":{\"49\":1}}],[\"数组或链表的部分无关操作\",{\"1\":{\"46\":1}}],[\"数组和链表也可以实现查询功能\",{\"1\":{\"56\":1}}],[\"数组和链表都可以在任意位置添加和删除元素\",{\"1\":{\"46\":1}}],[\"数组和链表是两种基本的数据结构\",{\"1\":{\"33\":1}}],[\"数组内存地址\",{\"1\":{\"34\":1}}],[\"数组同时包含\",{\"1\":{\"34\":1}}],[\"数组存储在栈上和存储在堆上\",{\"1\":{\"34\":1}}],[\"数组存储在连续的内存空间内\",{\"1\":{\"14\":1}}],[\"数组可提供更高的内存空间效率\",{\"1\":{\"33\":1}}],[\"数组可以用于实现栈\",{\"1\":{\"15\":1}}],[\"数组支持随机访问\",{\"1\":{\"33\":1}}],[\"数组也支持元素增删查改\",{\"1\":{\"26\":1}}],[\"数组整体是一个变量\",{\"1\":{\"18\":1}}],[\"数组是神经网络编程中最常使用的数据结构\",{\"1\":{\"15\":1}}],[\"数组是排序和搜索算法最常用的数据结构\",{\"1\":{\"15\":1}}],[\"数组是一种基础且常见的数据结构\",{\"1\":{\"15\":1}}],[\"数组典型应用\",{\"0\":{\"15\":1}}],[\"数组在初始化后长度就固定了\",{\"1\":{\"14\":1}}],[\"数组允许在\",{\"1\":{\"14\":1}}],[\"数组为数据分配了连续的内存块\",{\"1\":{\"14\":1}}],[\"数组的优点与局限性\",{\"0\":{\"14\":1}}],[\"数组的长度是不可变的\",{\"1\":{\"13\":1}}],[\"数组的插入和删除的平均时间复杂度均为\",{\"1\":{\"10\":1}}],[\"数组的插入与删除操作有以下缺点\",{\"1\":{\"10\":1}}],[\"数组删除元素示例\",{\"1\":{\"10\":1}}],[\"数组插入元素示例\",{\"1\":{\"9\":1}}],[\"数组元素则必须是相同类型的\",{\"1\":{\"34\":1}}],[\"数组元素在内存中是\",{\"1\":{\"9\":1}}],[\"数组元素的内存地址计算\",{\"1\":{\"8\":1}}],[\"数组元素被存储在连续的内存空间中\",{\"1\":{\"8\":1}}],[\"数组常用操作\",{\"0\":{\"6\":1}}],[\"数组定义与存储方式\",{\"1\":{\"5\":1}}],[\"数组\",{\"0\":{\"5\":1,\"23\":1},\"1\":{\"5\":1,\"23\":1,\"45\":1,\"56\":1,\"61\":1,\"71\":1},\"2\":{\"36\":1}}],[\"数组与链表\",{\"0\":{\"4\":1}}],[\"myfunction\",{\"1\":{\"498\":1}}],[\"myclass\",{\"1\":{\"498\":1}}],[\"mylib\",{\"1\":{\"470\":1,\"488\":1}}],[\"my\",{\"1\":{\"371\":1,\"373\":1,\"374\":1,\"463\":1,\"470\":4,\"503\":2,\"504\":7}}],[\"mysql\",{\"0\":{\"369\":1},\"1\":{\"369\":2,\"370\":1,\"372\":1,\"392\":1},\"2\":{\"401\":1}}],[\"mkdir\",{\"1\":{\"317\":3,\"467\":1}}],[\"mtasklist\",{\"1\":{\"311\":2}}],[\"mtx\",{\"1\":{\"236\":2,\"237\":3,\"238\":3}}],[\"mbrower\",{\"1\":{\"311\":2}}],[\"mbrowser\",{\"1\":{\"311\":2}}],[\"minimum\",{\"1\":{\"461\":2,\"465\":1}}],[\"min\",{\"1\":{\"391\":1}}],[\"milliseconds\",{\"1\":{\"256\":1,\"260\":1}}],[\"miprogress\",{\"1\":{\"125\":4}}],[\"mutable\",{\"1\":{\"260\":1,\"285\":1}}],[\"mutual\",{\"1\":{\"244\":1}}],[\"mutex通过多种方式保证了线程安全\",{\"1\":{\"262\":1}}],[\"mutex来保护该变量啦\",{\"1\":{\"258\":1}}],[\"mutex举例吧\",{\"1\":{\"256\":1}}],[\"mutex和std\",{\"1\":{\"256\":1}}],[\"mutex分为四种\",{\"1\":{\"256\":1}}],[\"mutex是一种线程同步的手段\",{\"1\":{\"256\":1}}],[\"mutex相关\",{\"0\":{\"256\":1},\"1\":{\"254\":1}}],[\"mutex>\",{\"1\":{\"236\":1,\"237\":3,\"238\":2,\"257\":2,\"258\":3,\"260\":3}}],[\"mutex\",{\"1\":{\"236\":1,\"237\":1,\"238\":1,\"256\":14,\"257\":4,\"258\":5,\"260\":5}}],[\"method\",{\"1\":{\"482\":1}}],[\"metacharacters\",{\"1\":{\"402\":1,\"412\":1}}],[\"merge\",{\"1\":{\"440\":2,\"443\":1}}],[\"menuconfig\",{\"1\":{\"317\":1}}],[\"mem\",{\"1\":{\"309\":6}}],[\"memory\",{\"1\":{\"241\":2,\"246\":3,\"248\":7,\"249\":15,\"250\":6}}],[\"memorystream\",{\"1\":{\"137\":2}}],[\"message\",{\"1\":{\"225\":4,\"229\":1,\"430\":1}}],[\"mstyle\",{\"1\":{\"308\":2}}],[\"mstlye\",{\"1\":{\"308\":1}}],[\"msteam\",{\"1\":{\"137\":6}}],[\"ms\",{\"1\":{\"260\":3}}],[\"msgctl\",{\"1\":{\"225\":1}}],[\"msgrcv\",{\"1\":{\"225\":1}}],[\"msgsnd\",{\"1\":{\"225\":1}}],[\"msgget\",{\"1\":{\"225\":1}}],[\"msgid\",{\"1\":{\"225\":4}}],[\"msg\",{\"1\":{\"224\":3,\"225\":17,\"229\":3}}],[\"mvalue\",{\"1\":{\"310\":3}}],[\"mvp\",{\"0\":{\"169\":1},\"1\":{\"169\":3}}],[\"mvc\",{\"0\":{\"169\":1,\"184\":1},\"1\":{\"169\":4,\"184\":1}}],[\"mvvm\",{\"0\":{\"163\":1,\"164\":1,\"168\":1,\"169\":1,\"170\":1,\"173\":1},\"1\":{\"163\":2,\"164\":1,\"168\":1,\"169\":5,\"172\":1,\"173\":2,\"174\":2},\"2\":{\"176\":1}}],[\"mount\",{\"1\":{\"317\":4}}],[\"mobservers\",{\"1\":{\"310\":3}}],[\"moved\",{\"1\":{\"269\":6,\"328\":1}}],[\"move\",{\"1\":{\"143\":3,\"255\":1,\"261\":1,\"268\":1,\"269\":1}}],[\"modify\",{\"1\":{\"379\":2}}],[\"modified\",{\"1\":{\"342\":2,\"343\":1}}],[\"modern\",{\"1\":{\"195\":1}}],[\"models\",{\"1\":{\"420\":3}}],[\"model=\",{\"1\":{\"173\":1}}],[\"model\",{\"0\":{\"165\":1,\"177\":1,\"178\":1,\"179\":1,\"182\":1,\"184\":1},\"1\":{\"163\":1,\"164\":1,\"165\":1,\"167\":5,\"168\":1,\"169\":8,\"171\":1,\"173\":2,\"174\":1,\"177\":4,\"179\":7,\"180\":4,\"181\":2,\"182\":6,\"183\":2,\"184\":3,\"186\":3,\"420\":1},\"2\":{\"188\":1}}],[\"model设计模式\",{\"1\":{\"1\":1}}],[\"moduluskeyhash​=13=\",{\"1\":{\"69\":1}}],[\"moduluskeyhash​=9=\",{\"1\":{\"69\":1}}],[\"modulus\",{\"1\":{\"69\":4}}],[\"mdev\",{\"1\":{\"317\":1}}],[\"mdiscountstrategy\",{\"1\":{\"131\":4}}],[\"md5\",{\"1\":{\"70\":3,\"72\":2}}],[\"mangling\",{\"1\":{\"202\":2}}],[\"managerhandler\",{\"1\":{\"159\":1}}],[\"manager\",{\"1\":{\"159\":7,\"318\":1}}],[\"malloc\",{\"1\":{\"199\":2}}],[\"mactextbox\",{\"1\":{\"153\":2}}],[\"macbutton\",{\"1\":{\"153\":2}}],[\"macosfactory\",{\"1\":{\"153\":1}}],[\"macostextbox\",{\"1\":{\"153\":1}}],[\"macos\",{\"1\":{\"153\":2,\"459\":1}}],[\"macosbutton\",{\"1\":{\"153\":1}}],[\"makefiles\",{\"1\":{\"460\":1,\"474\":1}}],[\"makefile\",{\"1\":{\"458\":1,\"468\":1,\"469\":1,\"474\":1}}],[\"make\",{\"1\":{\"143\":4,\"150\":4,\"153\":6,\"159\":3,\"269\":1,\"316\":2,\"317\":3,\"469\":1}}],[\"main\",{\"1\":{\"125\":1,\"131\":1,\"137\":1,\"143\":1,\"150\":1,\"153\":1,\"159\":1,\"205\":1,\"218\":1,\"220\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":2,\"234\":2,\"236\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"248\":1,\"249\":2,\"255\":2,\"256\":2,\"257\":1,\"259\":1,\"261\":2,\"262\":1,\"268\":1,\"269\":1,\"275\":1,\"285\":1,\"286\":1,\"301\":1,\"420\":1,\"441\":1,\"443\":1,\"444\":1,\"450\":1,\"461\":1,\"463\":1,\"464\":2,\"465\":1,\"482\":2,\"498\":1,\"504\":1}}],[\"mainform\",{\"1\":{\"125\":3}}],[\"max\",{\"1\":{\"97\":1,\"329\":1,\"342\":1,\"391\":3}}],[\"map\",{\"1\":{\"57\":11}}],[\"map<int\",{\"1\":{\"57\":1,\"269\":1}}],[\"m\",{\"1\":{\"34\":2,\"95\":2,\"269\":3,\"285\":7,\"286\":1,\"410\":2,\"411\":2,\"430\":3,\"450\":1,\"451\":1,\"452\":1}}],[\"mr\",{\"1\":{\"3\":1}}],[\"知识星球\",{\"1\":{\"3\":1}}],[\"熟练掌握多种设计模式\",{\"1\":{\"2\":1}}],[\"熟练掌握qt框架\",{\"1\":{\"2\":1}}],[\"熟悉常见数据结构与算法\",{\"1\":{\"2\":1}}],[\"熟悉linux下的多线程\",{\"1\":{\"2\":1}}],[\"熟悉linux环境下的系统编程\",{\"1\":{\"1\":1}}],[\"熟悉c\",{\"1\":{\"2\":1}}],[\"熟悉其事件通知机制以及view\",{\"1\":{\"1\":1}}],[\"熟悉多进程\",{\"1\":{\"1\":1}}],[\"多路复用\",{\"1\":{\"334\":1,\"352\":1}}],[\"多线程调试\",{\"0\":{\"489\":1}}],[\"多线程\",{\"2\":{\"252\":1,\"277\":1}}],[\"多线程编程\",{\"1\":{\"1\":1}}],[\"多进程\",{\"2\":{\"232\":1}}],[\"多进程编程和同步机制\",{\"1\":{\"2\":1}}],[\"多次提交合并\",{\"1\":{\"430\":1}}],[\"多次哈希是开放寻址的一种\",{\"1\":{\"73\":1}}],[\"多次哈希有不能直接删除元素的缺陷吗\",{\"1\":{\"73\":1}}],[\"多次哈希使用多个哈希函数进行探测\",{\"1\":{\"72\":1}}],[\"多次哈希方法不易产生聚集\",{\"1\":{\"65\":1}}],[\"多次哈希方法使用多个哈希函数\",{\"1\":{\"65\":1}}],[\"多次哈希\",{\"0\":{\"65\":1}}],[\"多次探测\",{\"1\":{\"62\":1}}],[\"多个线程对同一变量进行原子操作时\",{\"1\":{\"246\":1}}],[\"多个日志处理器\",{\"1\":{\"160\":1}}],[\"多个\",{\"1\":{\"59\":1}}],[\"多个输入对应相同输出\",{\"1\":{\"59\":1}}],[\"cxx\",{\"1\":{\"461\":1}}],[\"cmakelists\",{\"1\":{\"460\":2,\"461\":1,\"463\":1,\"465\":1}}],[\"cmake\",{\"0\":{\"458\":1,\"468\":1},\"1\":{\"458\":2,\"459\":4,\"460\":4,\"461\":4,\"465\":1,\"468\":2,\"471\":1,\"473\":1,\"474\":3,\"475\":1},\"2\":{\"477\":1}}],[\"csrf\",{\"0\":{\"340\":1},\"1\":{\"340\":2}}],[\"css\",{\"1\":{\"166\":1,\"351\":2}}],[\"cttyhack\",{\"1\":{\"317\":1}}],[\"ctrl+c\",{\"1\":{\"228\":1}}],[\"cd\",{\"1\":{\"316\":1,\"317\":2,\"450\":1,\"452\":1,\"467\":1}}],[\"cdn\",{\"0\":{\"344\":1},\"1\":{\"173\":1,\"316\":1,\"344\":1}}],[\"celery\",{\"1\":{\"365\":1}}],[\"centos7\",{\"1\":{\"268\":6,\"269\":1}}],[\"cerr\",{\"1\":{\"220\":4,\"301\":2}}],[\"circular\",{\"1\":{\"244\":1}}],[\"circle\",{\"1\":{\"143\":3}}],[\"cv\",{\"1\":{\"238\":6,\"260\":4}}],[\"cpio\",{\"1\":{\"317\":1}}],[\"cp\",{\"1\":{\"316\":2}}],[\"cpp\",{\"1\":{\"229\":2,\"268\":3,\"461\":1,\"463\":1,\"464\":1,\"465\":1,\"470\":1,\"482\":4}}],[\"cpu\",{\"1\":{\"25\":2,\"33\":1,\"213\":2,\"214\":3,\"217\":1,\"319\":1}}],[\"cut\",{\"1\":{\"317\":1}}],[\"customer\",{\"1\":{\"395\":2}}],[\"customers\",{\"1\":{\"380\":1,\"395\":2}}],[\"custom\",{\"1\":{\"358\":1}}],[\"customtablemodel\",{\"1\":{\"185\":2}}],[\"customdelegate\",{\"1\":{\"181\":3}}],[\"curl\",{\"1\":{\"347\":1,\"420\":1}}],[\"current\",{\"1\":{\"376\":1,\"503\":2,\"504\":1}}],[\"currenthead\",{\"1\":{\"248\":4,\"249\":8}}],[\"currenttail\",{\"1\":{\"248\":3,\"249\":5}}],[\"cur\",{\"1\":{\"89\":22,\"90\":11,\"91\":25}}],[\"critical\",{\"1\":{\"227\":4}}],[\"creat\",{\"1\":{\"225\":1,\"226\":1,\"227\":1}}],[\"created\",{\"1\":{\"328\":1,\"376\":1,\"389\":2}}],[\"createdaemon\",{\"1\":{\"220\":2}}],[\"create\",{\"1\":{\"220\":1,\"309\":2,\"371\":3,\"376\":3}}],[\"createtextbox\",{\"1\":{\"153\":3}}],[\"createbutton\",{\"1\":{\"153\":3}}],[\"createvehicle\",{\"1\":{\"150\":3}}],[\"creator\",{\"1\":{\"149\":2}}],[\"crypto\",{\"1\":{\"137\":1}}],[\"cryptostream\",{\"1\":{\"137\":6}}],[\"cbfs\",{\"1\":{\"137\":2}}],[\"cfs\",{\"1\":{\"137\":2}}],[\"can\",{\"1\":{\"420\":2}}],[\"cache\",{\"1\":{\"329\":2,\"342\":2}}],[\"cavas\",{\"1\":{\"308\":1}}],[\"cast<int>\",{\"1\":{\"275\":1}}],[\"case\",{\"1\":{\"275\":3}}],[\"case3\",{\"1\":{\"91\":3}}],[\"cas\",{\"1\":{\"239\":1,\"246\":1,\"247\":1}}],[\"callonce\",{\"1\":{\"259\":2}}],[\"call\",{\"0\":{\"259\":1},\"1\":{\"254\":1,\"259\":3,\"262\":1}}],[\"calls\",{\"1\":{\"234\":2}}],[\"calculate\",{\"1\":{\"131\":3}}],[\"carfactory\",{\"1\":{\"150\":3}}],[\"car\",{\"1\":{\"150\":4}}],[\"capacity\",{\"1\":{\"42\":4,\"58\":3,\"59\":1,\"61\":7,\"63\":7,\"67\":2,\"248\":7,\"249\":9}}],[\"checkout\",{\"1\":{\"434\":3,\"438\":3,\"452\":1}}],[\"chunked\",{\"1\":{\"333\":1,\"359\":1}}],[\"chmod\",{\"1\":{\"317\":1}}],[\"chrome\",{\"1\":{\"311\":1}}],[\"chromebrowser\",{\"1\":{\"311\":1}}],[\"chrono\",{\"1\":{\"238\":1,\"240\":1,\"241\":1,\"255\":1,\"256\":1,\"260\":1}}],[\"chdir\",{\"1\":{\"220\":1}}],[\"child\",{\"1\":{\"77\":2,\"91\":5,\"100\":11,\"101\":10,\"102\":1,\"103\":1,\"107\":3,\"111\":3,\"224\":1,\"225\":2,\"226\":1,\"227\":2,\"301\":7}}],[\"change\",{\"1\":{\"220\":1}}],[\"chain\",{\"1\":{\"157\":1}}],[\"chaining\",{\"1\":{\"61\":1}}],[\"character\",{\"1\":{\"285\":3,\"286\":2}}],[\"char\",{\"1\":{\"69\":1,\"224\":2,\"225\":1,\"226\":4,\"229\":2,\"285\":5}}],[\"cookie\",{\"1\":{\"340\":1}}],[\"corrected\",{\"1\":{\"430\":1}}],[\"cors\",{\"0\":{\"338\":1},\"1\":{\"338\":1}}],[\"core\",{\"0\":{\"490\":1},\"1\":{\"195\":1,\"480\":1,\"490\":4}}],[\"copy\",{\"1\":{\"268\":4,\"420\":1}}],[\"commit\",{\"1\":{\"430\":4,\"449\":1,\"450\":1,\"451\":1,\"452\":4,\"454\":1}}],[\"command\",{\"1\":{\"420\":1}}],[\"commands\",{\"1\":{\"420\":1}}],[\"communication\",{\"1\":{\"223\":1}}],[\"com\",{\"1\":{\"330\":1,\"383\":3,\"384\":1,\"388\":1,\"411\":1,\"420\":1,\"426\":1,\"427\":2,\"447\":1}}],[\"compile\",{\"1\":{\"472\":2}}],[\"complicated>\",{\"1\":{\"269\":1}}],[\"complicated\",{\"1\":{\"269\":7}}],[\"completed\",{\"1\":{\"234\":1}}],[\"complete\",{\"1\":{\"84\":1}}],[\"compare\",{\"1\":{\"239\":1,\"241\":1,\"246\":1}}],[\"component\",{\"1\":{\"136\":2}}],[\"colour\",{\"1\":{\"409\":1}}],[\"colou\",{\"1\":{\"409\":1}}],[\"color\",{\"1\":{\"143\":9,\"275\":6,\"308\":1,\"409\":1}}],[\"columns\",{\"1\":{\"377\":2}}],[\"column2\",{\"1\":{\"376\":1,\"383\":1,\"384\":1,\"387\":1}}],[\"column1\",{\"1\":{\"376\":1,\"383\":1,\"384\":1,\"387\":1}}],[\"column\",{\"1\":{\"185\":2,\"379\":5}}],[\"columncount\",{\"1\":{\"182\":1,\"185\":2}}],[\"collision\",{\"1\":{\"59\":1}}],[\"config\",{\"1\":{\"316\":1,\"317\":1,\"321\":1,\"451\":1}}],[\"conversion\",{\"1\":{\"275\":1}}],[\"control\",{\"1\":{\"329\":1,\"338\":1,\"342\":1}}],[\"controller\",{\"1\":{\"169\":2,\"184\":3}}],[\"content\",{\"1\":{\"327\":2,\"329\":3}}],[\"continue\",{\"1\":{\"320\":1,\"328\":1,\"483\":1}}],[\"continued\",{\"1\":{\"301\":1}}],[\"contains\",{\"1\":{\"271\":3}}],[\"console=ttys0\",{\"1\":{\"319\":3}}],[\"consumed\",{\"1\":{\"248\":1,\"249\":1}}],[\"consumer\",{\"1\":{\"248\":2,\"249\":3}}],[\"constucted\",{\"1\":{\"269\":5}}],[\"constructors\",{\"1\":{\"268\":2}}],[\"construct\",{\"1\":{\"268\":8}}],[\"constexpr\",{\"0\":{\"282\":1},\"1\":{\"201\":1,\"282\":1,\"283\":2,\"284\":1,\"285\":3,\"286\":2},\"2\":{\"288\":1}}],[\"const\",{\"0\":{\"203\":1},\"1\":{\"58\":1,\"63\":2,\"69\":1,\"131\":4,\"137\":2,\"143\":6,\"150\":6,\"153\":12,\"181\":3,\"185\":6,\"203\":1,\"224\":1,\"229\":1,\"237\":1,\"248\":1,\"249\":1,\"260\":1,\"268\":1,\"269\":1,\"272\":3,\"273\":2,\"285\":2,\"308\":8,\"309\":2,\"311\":3}}],[\"condition\",{\"0\":{\"260\":1},\"1\":{\"238\":1,\"254\":1,\"260\":1,\"262\":1,\"384\":1,\"385\":1}}],[\"concurrency\",{\"1\":{\"255\":1}}],[\"concurrently\",{\"1\":{\"234\":1}}],[\"concrete\",{\"1\":{\"124\":2,\"136\":2,\"142\":1,\"149\":2,\"152\":2,\"158\":1}}],[\"connection\",{\"1\":{\"289\":1}}],[\"connect\",{\"1\":{\"229\":1}}],[\"cout<<\",{\"1\":{\"268\":3,\"269\":6}}],[\"cout\",{\"1\":{\"42\":1,\"57\":2,\"58\":1,\"61\":3,\"63\":3,\"125\":1,\"131\":2,\"137\":5,\"143\":4,\"150\":2,\"153\":4,\"159\":3,\"205\":2,\"224\":1,\"225\":2,\"226\":1,\"227\":4,\"228\":2,\"229\":1,\"234\":3,\"236\":1,\"237\":2,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":2,\"243\":2,\"248\":2,\"249\":2,\"255\":8,\"256\":4,\"257\":2,\"259\":1,\"261\":2,\"262\":1,\"273\":1,\"275\":4,\"285\":2,\"301\":7,\"464\":1}}],[\"countdown\",{\"1\":{\"260\":1}}],[\"countdownlatch\",{\"1\":{\"260\":2}}],[\"counting\",{\"1\":{\"240\":1}}],[\"counter\",{\"1\":{\"239\":3}}],[\"count\",{\"1\":{\"11\":2,\"31\":4,\"243\":1,\"258\":9,\"260\":8,\"390\":5,\"391\":1,\"397\":4}}],[\"clone\",{\"1\":{\"426\":2,\"448\":1}}],[\"closing\",{\"1\":{\"290\":1}}],[\"closed\",{\"1\":{\"290\":2,\"292\":1}}],[\"close\",{\"1\":{\"220\":3,\"224\":4,\"229\":3,\"290\":1,\"292\":1,\"293\":1}}],[\"clients\",{\"1\":{\"318\":1}}],[\"client\",{\"1\":{\"229\":1}}],[\"clicked\",{\"1\":{\"153\":2}}],[\"click\",{\"1\":{\"153\":3}}],[\"class\",{\"1\":{\"41\":1,\"42\":1,\"47\":1,\"48\":1,\"58\":1,\"61\":1,\"63\":1,\"125\":3,\"131\":4,\"137\":6,\"143\":6,\"150\":6,\"153\":9,\"159\":4,\"181\":1,\"185\":1,\"205\":3,\"241\":1,\"248\":1,\"249\":1,\"255\":2,\"260\":1,\"275\":1,\"285\":1,\"308\":7,\"309\":2,\"310\":2,\"311\":7,\"482\":1}}],[\"clear\",{\"1\":{\"30\":1,\"58\":1,\"61\":1,\"241\":1,\"482\":1}}],[\"c++11关于异步操作提供了future相关的类\",{\"1\":{\"261\":1}}],[\"c++11关于并发引入了好多好东西\",{\"1\":{\"254\":1}}],[\"c++11提供了std\",{\"1\":{\"259\":1}}],[\"c++11提供了原子类型\",{\"1\":{\"258\":1}}],[\"c++11主要有std\",{\"1\":{\"257\":1}}],[\"c++11还提供了获取线程id\",{\"1\":{\"255\":1}}],[\"c++11\",{\"0\":{\"253\":1},\"1\":{\"247\":1,\"283\":1},\"2\":{\"277\":1}}],[\"c++11引入了std\",{\"1\":{\"234\":1,\"255\":1}}],[\"c++中基类的析构函数应采用virtual虚析构函数\",{\"1\":{\"208\":1}}],[\"c++中基类采用virtual虚析构函数是为了防止内存泄漏\",{\"1\":{\"208\":1}}],[\"c++的多态性\",{\"1\":{\"205\":1}}],[\"c++的多态如何实现\",{\"0\":{\"205\":1}}],[\"c++不能只学习语言本身\",{\"1\":{\"195\":1}}],[\"c++之父大作\",{\"1\":{\"195\":1}}],[\"c++程序设计\",{\"1\":{\"195\":1}}],[\"c++实战经验\",{\"1\":{\"194\":1}}],[\"c++20各种新特性\",{\"1\":{\"194\":1}}],[\"c++20高级编程\",{\"1\":{\"194\":1}}],[\"c++进阶\",{\"1\":{\"194\":1}}],[\"c++基础\",{\"1\":{\"194\":1}}],[\"c++基础知识介绍的非常全面\",{\"1\":{\"194\":1}}],[\"c++\",{\"0\":{\"193\":1,\"197\":1,\"247\":1},\"1\":{\"16\":2,\"26\":1,\"28\":1,\"32\":1,\"34\":1,\"52\":1,\"71\":1,\"111\":1,\"159\":1,\"194\":1,\"195\":2,\"202\":1,\"219\":1,\"239\":1,\"246\":1,\"268\":6,\"269\":2,\"458\":1,\"464\":1,\"474\":1,\"478\":1,\"495\":1},\"2\":{\"36\":1,\"54\":1,\"75\":1,\"113\":1,\"121\":1,\"127\":1,\"133\":1,\"139\":1,\"145\":1,\"155\":1,\"162\":1,\"196\":1,\"210\":1,\"232\":1,\"252\":1,\"288\":1}}],[\"c++语言的开发\",{\"1\":{\"2\":1}}],[\"c++编程\",{\"1\":{\"2\":1}}],[\"c\",{\"0\":{\"202\":1},\"1\":{\"2\":1,\"16\":1,\"26\":1,\"52\":1,\"69\":2,\"143\":6,\"202\":2,\"269\":2,\"285\":2,\"320\":1,\"321\":1,\"406\":2,\"458\":1,\"461\":1,\"474\":1,\"478\":1,\"488\":1}}],[\"我们使用\",{\"1\":{\"283\":1}}],[\"我们使用编程语言内置的哈希表时\",{\"1\":{\"73\":1}}],[\"我们往往通过基类的指针来销毁对象\",{\"1\":{\"208\":1}}],[\"我们往往更青睐使用数组实现算法\",{\"1\":{\"34\":1}}],[\"我们应该使用\",{\"1\":{\"111\":1}}],[\"我们应当将注意力集中在哈希算法\",{\"1\":{\"67\":1}}],[\"我们通过定义一个\",{\"1\":{\"284\":1}}],[\"我们通过判断失衡节点的平衡因子以及较高一侧子节点的平衡因子的正负号\",{\"1\":{\"104\":1}}],[\"我们通常会将输入数据排序\",{\"1\":{\"111\":1}}],[\"我们通常会用一些标准哈希算法\",{\"1\":{\"70\":1}}],[\"我们通常将\",{\"1\":{\"78\":1}}],[\"我们通常将头节点当作链表的代称\",{\"1\":{\"18\":1}}],[\"我们通常选取质数作为模数\",{\"1\":{\"69\":1}}],[\"我们通常不能完全填满它们\",{\"1\":{\"34\":1}}],[\"我们通常使用\",{\"1\":{\"28\":1}}],[\"我们只需将右旋的实现代码中的所有的\",{\"1\":{\"101\":1}}],[\"我们只需将元素插入链表头部\",{\"1\":{\"47\":1}}],[\"我们关注以该失衡节点为根节点的子树\",{\"1\":{\"100\":1}}],[\"我们同样将获取节点平衡因子的功能封装成函数\",{\"1\":{\"98\":1}}],[\"我们考虑使用数组或二叉搜索树存储\",{\"1\":{\"93\":1}}],[\"我们在二叉搜索树中获取有序数据仅需\",{\"1\":{\"92\":1}}],[\"我们在此采用与栈相同的方法命名\",{\"1\":{\"39\":1}}],[\"我们无法直接删除它\",{\"1\":{\"91\":1}}],[\"我们根据目标节点的子节点数量\",{\"1\":{\"91\":1}}],[\"我们声明一个节点\",{\"1\":{\"89\":1}}],[\"我们采取在链表或红黑树中执行查找操作\",{\"1\":{\"73\":1}}],[\"我们希望哈希算法具有确定性\",{\"1\":{\"72\":1}}],[\"我们也能设计一些简单的哈希算法\",{\"1\":{\"69\":1}}],[\"我们就能对各种失衡情况进行旋转\",{\"1\":{\"104\":1}}],[\"我们就无法在哈希表中查询到原先的\",{\"1\":{\"71\":1}}],[\"我们就进行哈希表扩容\",{\"1\":{\"60\":1}}],[\"我们就可以利用\",{\"1\":{\"58\":1}}],[\"我们就可以从链表的头节点出发\",{\"1\":{\"18\":1}}],[\"我们得到\",{\"1\":{\"59\":1}}],[\"我们先考虑最简单的情况\",{\"1\":{\"58\":1}}],[\"我们向哈希表中输入一个键\",{\"1\":{\"56\":1}}],[\"我们不能在开放寻址哈希表中直接删除元素\",{\"1\":{\"63\":1}}],[\"我们不能简单地确定哪种实现更加节省内存\",{\"1\":{\"49\":1}}],[\"我们不一定需要用这么多\",{\"1\":{\"34\":1}}],[\"我们来尝试自己实现一个栈类\",{\"1\":{\"46\":1}}],[\"我们以常见的\",{\"1\":{\"45\":1}}],[\"我们把堆叠元素的顶部称为\",{\"1\":{\"44\":1}}],[\"我们会发现两个数组中的相同数字拥有同一个\",{\"1\":{\"34\":1}}],[\"我们仍然可以在\",{\"1\":{\"34\":1}}],[\"我们维护一个指针变量始终指向头节点\",{\"1\":{\"34\":1}}],[\"我们规定每次将数组扩容至之前的\",{\"1\":{\"32\":1}}],[\"我们选择\",{\"1\":{\"32\":1}}],[\"我们尝试实现一个简易版列表\",{\"1\":{\"32\":1}}],[\"我们需要从递归的视角来看这个问题\",{\"1\":{\"111\":1}}],[\"我们需要从这个节点开始\",{\"1\":{\"106\":1}}],[\"我们需要保证在删除操作完成后\",{\"1\":{\"91\":1}}],[\"我们需要借助节点\",{\"1\":{\"90\":1}}],[\"我们需要通过哈希函数来重新计算所有键值对的存储位置\",{\"1\":{\"59\":1}}],[\"我们需要让\",{\"1\":{\"42\":1}}],[\"我们需要一种数据结构\",{\"1\":{\"40\":1}}],[\"我们需要快速找到最近最少使用的数据\",{\"1\":{\"25\":1}}],[\"我们需要访问节点的父节点\",{\"1\":{\"25\":1}}],[\"我们知道\",{\"1\":{\"16\":1,\"71\":1}}],[\"我们既可以通过索引遍历数组\",{\"1\":{\"11\":1}}],[\"我们将旋转操作封装成一个函数\",{\"1\":{\"104\":1}}],[\"我们将平衡因子绝对值\",{\"1\":{\"99\":1}}],[\"我们将创建两个工具函数\",{\"1\":{\"97\":1}}],[\"我们将二叉搜索树封装为一个类\",{\"1\":{\"88\":1}}],[\"我们将该节点的左子节点及其以下节点形成的树称为该节点的左子树\",{\"1\":{\"77\":1}}],[\"我们将哈希表看作一个\",{\"1\":{\"63\":1}}],[\"我们将哈希表扩容至原先的\",{\"1\":{\"61\":1}}],[\"我们将这种多个输入对应同一输出的情况称为哈希冲突\",{\"1\":{\"59\":1}}],[\"我们将这个问题的解决方案留在\",{\"1\":{\"9\":1}}],[\"我们将\",{\"1\":{\"58\":1}}],[\"我们将数组中的每个空位称为桶\",{\"1\":{\"58\":1}}],[\"我们将盘子替换为各种类型的元素\",{\"1\":{\"44\":1}}],[\"我们将队列头部称为\",{\"1\":{\"38\":1}}],[\"我们将把\",{\"1\":{\"26\":1}}],[\"我们将首个节点称为头节点\",{\"1\":{\"24\":1}}],[\"我们将元素在数组中的位置称为该元素的索引\",{\"1\":{\"5\":1}}],[\"我们发现数组首个元素的索引为\",{\"1\":{\"8\":1}}],[\"我们可以利用这个特点做一些性能优化\",{\"1\":{\"268\":1}}],[\"我们可以获取到其父节点\",{\"1\":{\"90\":1}}],[\"我们可以调用\",{\"1\":{\"71\":1}}],[\"我们可以采用懒删除\",{\"1\":{\"63\":1}}],[\"我们可以采用以下策略\",{\"1\":{\"60\":1}}],[\"我们可以采用以下巧妙方法来避免这个问题\",{\"1\":{\"42\":1}}],[\"我们可以通过扩容哈希表来减少哈希冲突\",{\"1\":{\"59\":1}}],[\"我们可以通过哈希函数得到该\",{\"1\":{\"58\":1}}],[\"我们可以得出以下结论\",{\"1\":{\"49\":1}}],[\"我们可以\",{\"1\":{\"46\":1}}],[\"我们可以直接使用编程语言内置的栈类\",{\"1\":{\"45\":1}}],[\"我们可以直接使用编程语言中现成的队列类\",{\"1\":{\"39\":1}}],[\"我们可以将栈类比为桌面上的一摞盘子\",{\"1\":{\"44\":1}}],[\"我们可以将数组的尾部作为栈顶\",{\"1\":{\"48\":1}}],[\"我们可以将数组替换为动态数组\",{\"1\":{\"42\":1}}],[\"我们可以将数组视为首尾相接的\",{\"1\":{\"42\":1}}],[\"我们可以将链表的头节点视为栈顶\",{\"1\":{\"47\":1}}],[\"我们可以将链表的\",{\"1\":{\"41\":1}}],[\"我们可以定位列表尾部\",{\"1\":{\"32\":1}}],[\"我们可以使用它们得到一个特定顺序的遍历结果\",{\"1\":{\"111\":1}}],[\"我们可以使用一个变量\",{\"1\":{\"42\":1}}],[\"我们可以使用\",{\"1\":{\"26\":1}}],[\"我们可以使用下图所示的公式计算得到该元素的内存地址\",{\"1\":{\"8\":1}}],[\"我们可以初始化一个比较长的数组\",{\"1\":{\"10\":1}}],[\"我们可以在\",{\"1\":{\"8\":1,\"21\":1}}],[\"我们可以根据需求选用数组的两种初始化方式\",{\"1\":{\"7\":1}}],[\"我也对qt跨平台开发有深入研究\",{\"1\":{\"1\":1}}],[\"我是一名热爱编程的c++程序员\",{\"1\":{\"1\":1}}],[\"擅长线程同步\",{\"1\":{\"1\":1}}],[\"拥有丰富的开发经验\",{\"1\":{\"1\":1}}],[\"介绍一种利用\",{\"1\":{\"282\":1}}],[\"介绍开放寻址哈希表的工作机制\",{\"1\":{\"62\":1}}],[\"介绍\",{\"0\":{\"1\":1,\"325\":1}}],[\"档案主页\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
