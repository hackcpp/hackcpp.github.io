import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,e as a}from"./app-AjMruHCW.js";const n={},l=a(`<p>GNU 调试器（GDB）是一个功能强大的调试工具，广泛用于调试 C、C++、Fortran 等编程语言。GDB 支持的主要功能包括设置断点、检查程序状态、修改变量值、单步执行代码等。以下将详细介绍 GDB 的基本用法、常用命令以及高级功能。</p><h2 id="gdb-基本用法" tabindex="-1"><a class="header-anchor" href="#gdb-基本用法"><span>GDB 基本用法</span></a></h2><h3 id="启动-gdb" tabindex="-1"><a class="header-anchor" href="#启动-gdb"><span>启动 GDB</span></a></h3><p>GDB 可以通过以下方式启动：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gdb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">progra</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">m&gt;         </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 加载指定的可执行文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gdb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">progra</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">m&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 加载可执行文件和崩溃时生成的 core dump 文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gdb</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">progra</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">m&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">arg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s&gt;  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 启动带参数的程序</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动 GDB 后，会进入一个交互式命令行界面，等待用户输入调试命令。</p><h3 id="启动程序" tabindex="-1"><a class="header-anchor" href="#启动程序"><span>启动程序</span></a></h3><p>在 GDB 内部启动程序，可以使用 <code>run</code> 命令：</p><div class="language-gdb line-numbers-mode" data-highlighter="shiki" data-ext="gdb" data-title="gdb" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(gdb) run              # 直接运行程序</span></span>
<span class="line"><span>(gdb) run &lt;args&gt;       # 运行程序并传递参数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置断点" tabindex="-1"><a class="header-anchor" href="#设置断点"><span>设置断点</span></a></h3><p>断点是调试时用于暂停程序执行的标志。通过 <code>break</code> 命令设置断点，常用格式包括：</p><div class="language-gdb line-numbers-mode" data-highlighter="shiki" data-ext="gdb" data-title="gdb" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(gdb) break main                     # 在主函数处设置断点</span></span>
<span class="line"><span>(gdb) break foo                      # 在函数 foo() 入口处设置断点</span></span>
<span class="line"><span>(gdb) break 42                       # 在源文件的第 42 行处设置断点</span></span>
<span class="line"><span>(gdb) break file.cpp:42              # 在 file.cpp 文件的第 42 行处设置断点</span></span>
<span class="line"><span>(gdb) break file.cpp:foo             # 在 file.cpp 文件的 foo() 函数入口处设置断点</span></span>
<span class="line"><span>(gdb) break class::method            # 在类的某个方法上设置断点</span></span>
<span class="line"><span>(gdb) tbreak main                    # 设置一次性断点，程序执行到断点处后自动删除</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看已设置的断点：</p><div class="language-gdb line-numbers-mode" data-highlighter="shiki" data-ext="gdb" data-title="gdb" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(gdb) info breakpoints               # 列出所有断点</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>删除断点：</p><div class="language-gdb line-numbers-mode" data-highlighter="shiki" data-ext="gdb" data-title="gdb" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(gdb) delete &lt;breakpoint_number&gt;     # 删除指定的断点</span></span>
<span class="line"><span>(gdb) clear &lt;location&gt;               # 删除指定位置的所有断点</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="单步执行" tabindex="-1"><a class="header-anchor" href="#单步执行"><span>单步执行</span></a></h3><p>GDB 提供多种单步执行命令，用于逐行或逐指令执行程序：</p><div class="language-gdb line-numbers-mode" data-highlighter="shiki" data-ext="gdb" data-title="gdb" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(gdb) next          # 执行下一行源代码，不进入函数内部</span></span>
<span class="line"><span>(gdb) step          # 执行下一行源代码，进入函数内部</span></span>
<span class="line"><span>(gdb) continue      # 继续执行程序，直到下一个断点或程序结束</span></span>
<span class="line"><span>(gdb) finish        # 执行当前函数并返回到调用处</span></span>
<span class="line"><span>(gdb) until &lt;location&gt;  # 执行代码，直到指定位置（行号或函数）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检查程序状态" tabindex="-1"><a class="header-anchor" href="#检查程序状态"><span>检查程序状态</span></a></h3><p>调试时经常需要查看程序当前的状态，包括堆栈、变量、内存等信息：</p><ul><li><strong>查看堆栈</strong>：<code>backtrace</code> 命令用于查看当前的调用堆栈。</li></ul><div class="language-gdb line-numbers-mode" data-highlighter="shiki" data-ext="gdb" data-title="gdb" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(gdb) backtrace                 # 查看整个调用堆栈</span></span>
<span class="line"><span>(gdb) frame &lt;n&gt;                 # 切换到第 n 层堆栈帧</span></span>
<span class="line"><span>(gdb) info frame                # 查看当前帧的详细信息</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>查看变量</strong>：使用 <code>print</code> 命令查看变量的值。</li></ul><div class="language-gdb line-numbers-mode" data-highlighter="shiki" data-ext="gdb" data-title="gdb" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(gdb) print var                  # 查看变量 var 的值</span></span>
<span class="line"><span>(gdb) print *pointer             # 查看指针指向的数据</span></span>
<span class="line"><span>(gdb) display var                # 在每次程序暂停时显示变量的值</span></span>
<span class="line"><span>(gdb) undisplay &lt;n&gt;              # 取消显示变量</span></span>
<span class="line"><span>(gdb) info locals                # 查看当前函数的所有局部变量</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>修改变量值</strong>：使用 <code>set</code> 命令修改变量的值。</li></ul><div class="language-gdb line-numbers-mode" data-highlighter="shiki" data-ext="gdb" data-title="gdb" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(gdb) set var = 10               # 将变量 var 设置为 10</span></span>
<span class="line"><span>(gdb) set $pc = 0x400550         # 修改程序计数器 (PC) 的值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>查看内存</strong>：<code>x</code> 命令用于查看内存中的内容。</li></ul><div class="language-gdb line-numbers-mode" data-highlighter="shiki" data-ext="gdb" data-title="gdb" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(gdb) x &lt;address&gt;                 # 以十六进制形式查看指定地址的内容</span></span>
<span class="line"><span>(gdb) x/10x &lt;address&gt;             # 查看从 &lt;address&gt; 开始的 10 个十六进制值</span></span>
<span class="line"><span>(gdb) x/10i &lt;address&gt;             # 查看从 &lt;address&gt; 开始的 10 条指令</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行时动态分析" tabindex="-1"><a class="header-anchor" href="#运行时动态分析"><span>运行时动态分析</span></a></h3><p>GDB 支持动态调试，可以在程序运行时执行命令以分析程序行为。例如：</p><ul><li><strong>监视变量变化</strong>：通过 <code>watch</code> 命令，GDB 可以在变量值改变时自动暂停程序执行。</li></ul><div class="language-gdb line-numbers-mode" data-highlighter="shiki" data-ext="gdb" data-title="gdb" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(gdb) watch var                  # 监视变量 var 的变化</span></span>
<span class="line"><span>(gdb) rwatch var                 # 监视变量 var 被读取时暂停</span></span>
<span class="line"><span>(gdb) awatch var                 # 监视变量 var 被读取或写入时暂停</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>条件断点</strong>：在断点上添加条件，使其仅在条件满足时触发。</li></ul><div class="language-gdb line-numbers-mode" data-highlighter="shiki" data-ext="gdb" data-title="gdb" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(gdb) break foo if x == 5        # 当变量 x 等于 5 时，在 foo 函数处触发断点</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="高级功能" tabindex="-1"><a class="header-anchor" href="#高级功能"><span>高级功能</span></a></h2><h3 id="栈帧调试" tabindex="-1"><a class="header-anchor" href="#栈帧调试"><span>栈帧调试</span></a></h3><p>GDB 支持调试堆栈帧，可以在不同帧之间切换、查看局部变量、调用函数等。</p><div class="language-gdb line-numbers-mode" data-highlighter="shiki" data-ext="gdb" data-title="gdb" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(gdb) frame &lt;n&gt;                  # 切换到第 n 帧</span></span>
<span class="line"><span>(gdb) info args                  # 查看当前帧的函数参数</span></span>
<span class="line"><span>(gdb) info locals                # 查看当前帧的局部变量</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动态库调试" tabindex="-1"><a class="header-anchor" href="#动态库调试"><span>动态库调试</span></a></h3><p>调试动态库时，可能需要在库加载后设置断点。这可以通过以下步骤实现：</p><ol><li>启动 GDB 并运行程序。</li><li>程序暂停时使用 <code>sharedlibrary</code> 命令加载动态库的符号。</li><li>设置动态库中的断点。</li></ol><div class="language-gdb line-numbers-mode" data-highlighter="shiki" data-ext="gdb" data-title="gdb" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(gdb) sharedlibrary              # 加载动态库符号</span></span>
<span class="line"><span>(gdb) break mylib.c:42           # 在动态库的源文件中设置断点</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多线程调试" tabindex="-1"><a class="header-anchor" href="#多线程调试"><span>多线程调试</span></a></h3><p>GDB 支持调试多线程程序，可以查看线程状态、切换线程、在线程间设置断点等。</p><ul><li><strong>查看线程</strong>：使用 <code>info threads</code> 查看所有线程的信息。</li></ul><div class="language-gdb line-numbers-mode" data-highlighter="shiki" data-ext="gdb" data-title="gdb" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(gdb) info threads               # 列出所有线程</span></span>
<span class="line"><span>(gdb) thread &lt;n&gt;                 # 切换到第 n 个线程</span></span>
<span class="line"><span>(gdb) thread apply all bt        # 对所有线程执行 backtrace</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>线程断点</strong>：设置仅在线程上触发的断点。</li></ul><div class="language-gdb line-numbers-mode" data-highlighter="shiki" data-ext="gdb" data-title="gdb" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(gdb) break foo thread 2         # 仅当线程 2 运行到 foo 函数时触发断点</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="调试核心转储文件-core-dump" tabindex="-1"><a class="header-anchor" href="#调试核心转储文件-core-dump"><span>调试核心转储文件（Core Dump）</span></a></h3><p>核心转储文件（Core Dump）是在程序崩溃时生成的内存映像文件。通过 GDB 可以调试 Core Dump 文件，分析程序崩溃的原因。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gdb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">progra</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">m&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;             </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 加载 Core Dump 文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>加载 Core Dump 文件后，可以使用常规调试命令（如 <code>backtrace</code>、<code>print</code> 等）分析崩溃时的堆栈和变量状态。</p><div class="hint-container tip"><p class="hint-container-title">总结</p><p>GDB 是一个功能强大的调试工具，可以帮助开发者深入分析和调试程序。通过熟练掌握 GDB 的基本用法和高级功能，开发者可以大大提升调试效率，快速定位和解决程序中的问题。</p></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://sourceware.org/gdb/current/onlinedocs/gdb.html/" target="_blank" rel="noopener noreferrer">参考文档</a></li><li><a href="/tools/4%20gdbinit">GDB配置</a></li></ul>`,56),d=[l];function t(r,h){return e(),s("div",null,d)}const g=i(n,[["render",t],["__file","3 gdb.html.vue"]]),o=JSON.parse('{"path":"/tools/3%20gdb.html","title":"gdb 基本使用","lang":"zh-CN","frontmatter":{"title":"gdb 基本使用","order":2,"category":["工具"],"tag":["gdb","Linux","调试"],"editLink":false,"description":"GNU 调试器（GDB）是一个功能强大的调试工具，广泛用于调试 C、C++、Fortran 等编程语言。GDB 支持的主要功能包括设置断点、检查程序状态、修改变量值、单步执行代码等。以下将详细介绍 GDB 的基本用法、常用命令以及高级功能。 GDB 基本用法 启动 GDB GDB 可以通过以下方式启动： 启动 GDB 后，会进入一个交互式命令行界面，等...","head":[["meta",{"property":"og:url","content":"https://hackcpp.github.io/tools/3%20gdb.html"}],["meta",{"property":"og:site_name","content":"程序员的白粥馆"}],["meta",{"property":"og:title","content":"gdb 基本使用"}],["meta",{"property":"og:description","content":"GNU 调试器（GDB）是一个功能强大的调试工具，广泛用于调试 C、C++、Fortran 等编程语言。GDB 支持的主要功能包括设置断点、检查程序状态、修改变量值、单步执行代码等。以下将详细介绍 GDB 的基本用法、常用命令以及高级功能。 GDB 基本用法 启动 GDB GDB 可以通过以下方式启动： 启动 GDB 后，会进入一个交互式命令行界面，等..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-23T08:21:11.000Z"}],["meta",{"property":"article:author","content":"Mr.Hackcpp"}],["meta",{"property":"article:tag","content":"gdb"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:tag","content":"调试"}],["meta",{"property":"article:modified_time","content":"2024-08-23T08:21:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"gdb 基本使用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-23T08:21:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hackcpp\\",\\"url\\":\\"/portfolio.html\\"}]}"]]},"headers":[{"level":2,"title":"GDB 基本用法","slug":"gdb-基本用法","link":"#gdb-基本用法","children":[{"level":3,"title":"启动 GDB","slug":"启动-gdb","link":"#启动-gdb","children":[]},{"level":3,"title":"启动程序","slug":"启动程序","link":"#启动程序","children":[]},{"level":3,"title":"设置断点","slug":"设置断点","link":"#设置断点","children":[]},{"level":3,"title":"单步执行","slug":"单步执行","link":"#单步执行","children":[]},{"level":3,"title":"检查程序状态","slug":"检查程序状态","link":"#检查程序状态","children":[]},{"level":3,"title":"运行时动态分析","slug":"运行时动态分析","link":"#运行时动态分析","children":[]}]},{"level":2,"title":"高级功能","slug":"高级功能","link":"#高级功能","children":[{"level":3,"title":"栈帧调试","slug":"栈帧调试","link":"#栈帧调试","children":[]},{"level":3,"title":"动态库调试","slug":"动态库调试","link":"#动态库调试","children":[]},{"level":3,"title":"多线程调试","slug":"多线程调试","link":"#多线程调试","children":[]},{"level":3,"title":"调试核心转储文件（Core Dump）","slug":"调试核心转储文件-core-dump","link":"#调试核心转储文件-core-dump","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1724400120000,"updatedTime":1724401271000,"contributors":[{"name":"hackcpp","email":"liuheng2015@gmail.com","commits":2}]},"readingTime":{"minutes":4.89,"words":1467},"filePathRelative":"tools/3 gdb.md","localizedDate":"2024年8月23日","excerpt":"","autoDesc":true}');export{g as comp,o as data};
