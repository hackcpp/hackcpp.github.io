import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as s,e as l}from"./app-Dd_Bxp1d.js";const t={},a=l('<p>正则表达式（Regular Expression，简称正则或 RegEx）是一种用来匹配字符串的模式描述语言。它在字符串搜索、替换等文本处理操作中具有强大的功能。正则表达式广泛应用于文本解析、数据验证、模式匹配等场景。</p><p>在一个正则表达式中，主要由<strong>元字符（Metacharacters）</strong> 和 <strong>量词（Quantifiers）</strong> 2部分组成。以下是对它们的详细介绍:</p><hr><h2 id="元字符-metacharacters" tabindex="-1"><a class="header-anchor" href="#元字符-metacharacters"><span><strong>元字符 (Metacharacters)</strong></span></a></h2><p>元字符是正则表达式中的特殊字符，用于构建匹配模式。这些字符具有特定的功能，而非代表实际的字符。</p><h3 id="基本元字符" tabindex="-1"><a class="header-anchor" href="#基本元字符"><span><strong>基本元字符</strong></span></a></h3><ul><li><p><strong><code>.</code> (点号)</strong>：匹配任意单个字符，除了换行符。</p><ul><li>示例：<code>a.b</code> 可以匹配 <code>a+b</code>、<code>a3b</code> 等。</li></ul></li><li><p><strong><code>^</code> (插入符号)</strong>：匹配字符串的开始位置。</p><ul><li>示例：<code>^abc</code> 只能匹配以 <code>abc</code> 开头的字符串。</li></ul></li><li><p><strong><code>$</code> (美元符号)</strong>：匹配字符串的结束位置。</p><ul><li>示例：<code>xyz$</code> 只能匹配以 <code>xyz</code> 结尾的字符串。</li></ul></li><li><p><strong><code>[]</code> (字符集)</strong>：匹配方括号内的任意一个字符。</p><ul><li>示例：<code>[aeiou]</code> 可以匹配任意元音字母。</li></ul></li><li><p><strong><code>|</code> (管道符号)</strong>：表示逻辑 &quot;或&quot; 操作，匹配左边或右边的表达式。</p><ul><li>示例：<code>abc|xyz</code> 可以匹配 <code>abc</code> 或 <code>xyz</code>。</li></ul></li><li><p><strong><code>()</code> (小括号)</strong>：用于分组，捕获匹配的内容，或者将表达式的多个部分视为一个整体。</p><ul><li>示例：<code>(abc)+</code> 表示 <code>abc</code> 可以重复一次或多次。</li></ul></li><li><p><strong><code>\\</code> (反斜杠)</strong>：转义字符，用来取消元字符的特殊含义，或者引入特殊的元字符。</p><ul><li>示例：<code>\\.</code> 可以匹配字符 <code>.</code>，而不是匹配任意字符。</li></ul></li></ul><h3 id="特殊字符类" tabindex="-1"><a class="header-anchor" href="#特殊字符类"><span><strong>特殊字符类</strong></span></a></h3><ul><li><p><strong><code>\\d</code></strong>：匹配任意一个数字字符，相当于 <code>[0-9]</code>。</p><ul><li>示例：<code>\\d{3}</code> 可以匹配任意三位数字。</li></ul></li><li><p><strong><code>\\D</code></strong>：匹配任意一个非数字字符，相当于 <code>[^0-9]</code>。</p><ul><li>示例：<code>\\D</code> 可以匹配任何非数字字符。</li></ul></li><li><p><strong><code>\\w</code></strong>：匹配任意一个字母、数字或下划线字符，相当于 <code>[a-zA-Z0-9_]</code>。</p><ul><li>示例：<code>\\w+</code> 可以匹配一个或多个字母、数字或下划线。</li></ul></li><li><p><strong><code>\\W</code></strong>：匹配任意一个非字母、数字或下划线字符，相当于 <code>[^a-zA-Z0-9_]</code>。</p><ul><li>示例：<code>\\W</code> 可以匹配任何非字母或非数字字符。</li></ul></li><li><p><strong><code>\\s</code></strong>：匹配任意一个空白字符（空格、制表符、换行符等）。</p><ul><li>示例：<code>\\s</code> 可以匹配空格或换行符。</li></ul></li><li><p><strong><code>\\S</code></strong>：匹配任意一个非空白字符。</p><ul><li>示例：<code>\\S</code> 可以匹配任何非空白字符。</li></ul></li></ul><h3 id="字符集与范围" tabindex="-1"><a class="header-anchor" href="#字符集与范围"><span><strong>字符集与范围</strong></span></a></h3><ul><li><p><strong><code>[abc]</code></strong>：匹配字符 <code>a</code>、<code>b</code> 或 <code>c</code> 中的任意一个。</p><ul><li>示例：<code>[aeiou]</code> 匹配任意元音字母。</li></ul></li><li><p><strong><code>[a-z]</code></strong>：匹配从 <code>a</code> 到 <code>z</code> 范围内的任意一个字符。</p><ul><li>示例：<code>[0-9]</code> 匹配任意一个数字字符。</li></ul></li><li><p><strong><code>[^abc]</code></strong>：匹配除了 <code>a</code>、<code>b</code>、<code>c</code> 以外的任意一个字符。</p><ul><li>示例：<code>[^0-9]</code> 匹配任意一个非数字字符。</li></ul></li><li><p><strong><code>[a-zA-Z]</code></strong>：匹配任意大小写字母。</p></li></ul><h3 id="边界匹配" tabindex="-1"><a class="header-anchor" href="#边界匹配"><span><strong>边界匹配</strong></span></a></h3><ul><li><p><strong><code>\\b</code></strong>：匹配一个单词的边界，通常用于匹配完整的单词。</p><ul><li>示例：<code>\\bword\\b</code> 匹配 <code>word</code>，但不匹配 <code>words</code> 或 <code>sword</code>。</li></ul></li><li><p><strong><code>\\B</code></strong>：匹配非单词边界。</p><ul><li>示例：<code>\\Bword\\B</code> 不会匹配 <code>word</code>，但会匹配像 <code>swordsmanship</code> 这样单词中间的部分。</li></ul></li></ul><hr><h2 id="量词-quantifiers" tabindex="-1"><a class="header-anchor" href="#量词-quantifiers"><span><strong>量词 (Quantifiers)</strong></span></a></h2><p>量词用于控制前一个字符或子表达式出现的次数。量词允许你指定匹配的数量范围。</p><h3 id="常用量词" tabindex="-1"><a class="header-anchor" href="#常用量词"><span><strong>常用量词</strong></span></a></h3><ul><li><p><strong><code>*</code> (星号)</strong>：匹配前面的字符 <strong>0 次或多次</strong>。</p><ul><li>示例：<code>a*</code> 可以匹配空字符串、<code>a</code>、<code>aa</code>、<code>aaa</code> 等。</li></ul></li><li><p><strong><code>+</code> (加号)</strong>：匹配前面的字符 <strong>1 次或多次</strong>。</p><ul><li>示例：<code>a+</code> 可以匹配 <code>a</code>、<code>aa</code>、<code>aaa</code> 等，但不匹配空字符串。</li></ul></li><li><p><strong><code>?</code> (问号)</strong>：匹配前面的字符 <strong>0 次或 1 次</strong>，即表示这个字符是可选的。</p><ul><li>示例：<code>colou?r</code> 可以匹配 <code>color</code> 和 <code>colour</code>。</li></ul></li></ul><h3 id="数量范围的量词" tabindex="-1"><a class="header-anchor" href="#数量范围的量词"><span><strong>数量范围的量词</strong></span></a></h3><ul><li><p><strong><code>{n}</code></strong>：匹配前面的字符 <strong>恰好 n 次</strong>。</p><ul><li>示例：<code>\\d{4}</code> 可以匹配四位数字，如 <code>2023</code>。</li></ul></li><li><p><strong><code>{n,}</code></strong>：匹配前面的字符 <strong>至少 n 次</strong>。</p><ul><li>示例：<code>\\d{2,}</code> 匹配至少两位数字，如 <code>12</code>、<code>123</code> 等。</li></ul></li><li><p><strong><code>{n,m}</code></strong>：匹配前面的字符 <strong>至少 n 次，至多 m 次</strong>。</p><ul><li>示例：<code>\\d{2,4}</code> 可以匹配两位、三位或四位数字，如 <code>12</code>、<code>123</code>、<code>1234</code>。</li></ul></li></ul><h3 id="懒惰量词" tabindex="-1"><a class="header-anchor" href="#懒惰量词"><span><strong>懒惰量词</strong></span></a></h3><p>默认情况下，量词是“贪婪”的，这意味着它们会匹配尽可能多的字符。你可以通过在量词后添加 <code>?</code> 将其转换为“懒惰”模式，匹配尽可能少的字符。</p><ul><li><strong><code>*?</code></strong>：匹配 0 次或更多，但尽量少匹配。</li><li><strong><code>+?</code></strong>：匹配 1 次或更多，但尽量少匹配。</li><li><strong><code>??</code></strong>：匹配 0 次或 1 次，但尽量少匹配。</li><li><strong><code>{n,m}?</code></strong>：匹配 n 到 m 次，但尽量少匹配。</li></ul><div class="hint-container tip"><p class="hint-container-title">示例：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a href</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://example.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Example</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>贪婪匹配 <code>&quot;&lt;.*&gt;&quot;</code> 会匹配整个字符串，而懒惰匹配 <code>&quot;&lt;.*?&gt;&quot;</code> 只匹配第一个标签。</p></div><h3 id="正则表达式的常见应用场景" tabindex="-1"><a class="header-anchor" href="#正则表达式的常见应用场景"><span><strong>正则表达式的常见应用场景</strong></span></a></h3><ul><li><p><strong>字符串搜索</strong>：</p><ul><li>搜索符合某个模式的字符串，如电话号码或电子邮件地址。</li></ul><div class="language-regex line-numbers-mode" data-highlighter="shiki" data-ext="regex" data-title="regex" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\b\\d</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">{3}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-\\d</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">{3}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-\\d</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">{4}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\b  # 匹配美国电话号码格式</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>数据验证</strong>：</p><ul><li>验证输入是否符合特定格式，如密码复杂度、日期格式等。</li></ul><div class="language-regex line-numbers-mode" data-highlighter="shiki" data-ext="regex" data-title="regex" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">^</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[a-zA-Z0-9]</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">{8,}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$  # 验证至少包含 8 个字母或数字的密码</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>替换操作</strong>：</p><ul><li>查找并替换字符串中符合特定模式的部分，如将 HTML 标签移除。</li></ul><div class="language-regex line-numbers-mode" data-highlighter="shiki" data-ext="regex" data-title="regex" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">^</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">&gt;]</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;  # 匹配 HTML 标签</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>提取数据</strong>：</p><ul><li>从文本中提取特定格式的数据，如提取电子邮件地址。</li></ul><div class="language-regex line-numbers-mode" data-highlighter="shiki" data-ext="regex" data-title="regex" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[A-Za-z0-9._%+-]</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[A-Za-z0-9.-]</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">+</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[A-Z|a-z]</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">{2,}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\b  # 匹配电子邮件地址</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><hr><div class="hint-container tip"><p class="hint-container-title">总结</p><ul><li><strong>元字符 (Metacharacters)</strong> 是正则表达式中的基础元素，用于构建匹配模式。包括特殊字符、字符集、范围、边界匹配等。</li><li><strong>量词 (Quantifiers)</strong> 用于指定字符或表达式出现的次数，控制匹配的数量。</li></ul></div><p>正则表达式的强大在于其灵活性，可以根据实际需求设计复杂的匹配规则。掌握正则表达式的语法和使用场景，有助于处理文本、数据验证和复杂的字符串操作。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p><a href="https://jex.im/regulex/#!flags=&amp;re=%5E%5Cd*%3F%24" target="_blank" rel="noopener noreferrer">可视化工具</a></p>',31),o=[a];function r(n,d){return s(),i("div",null,o)}const p=e(t,[["render",r],["__file","9 regexpr.html.vue"]]),g=JSON.parse('{"path":"/other/9%20regexpr.html","title":"正则表达式的基本使用","lang":"zh-CN","frontmatter":{"title":"正则表达式的基本使用","order":2,"category":["其他"],"tag":["正则表达式"],"editLink":false,"description":"正则表达式（Regular Expression，简称正则或 RegEx）是一种用来匹配字符串的模式描述语言。它在字符串搜索、替换等文本处理操作中具有强大的功能。正则表达式广泛应用于文本解析、数据验证、模式匹配等场景。 在一个正则表达式中，主要由元字符（Metacharacters） 和 量词（Quantifiers） 2部分组成。以下是对它们的详细介...","head":[["meta",{"property":"og:url","content":"https://hackcpp.github.io/other/9%20regexpr.html"}],["meta",{"property":"og:site_name","content":"程序员的白粥馆"}],["meta",{"property":"og:title","content":"正则表达式的基本使用"}],["meta",{"property":"og:description","content":"正则表达式（Regular Expression，简称正则或 RegEx）是一种用来匹配字符串的模式描述语言。它在字符串搜索、替换等文本处理操作中具有强大的功能。正则表达式广泛应用于文本解析、数据验证、模式匹配等场景。 在一个正则表达式中，主要由元字符（Metacharacters） 和 量词（Quantifiers） 2部分组成。以下是对它们的详细介..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-24T02:22:47.000Z"}],["meta",{"property":"article:author","content":"Mr.Hackcpp"}],["meta",{"property":"article:tag","content":"正则表达式"}],["meta",{"property":"article:modified_time","content":"2024-08-24T02:22:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"正则表达式的基本使用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-24T02:22:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hackcpp\\",\\"url\\":\\"/portfolio.html\\"}]}"]]},"headers":[{"level":2,"title":"元字符 (Metacharacters)","slug":"元字符-metacharacters","link":"#元字符-metacharacters","children":[{"level":3,"title":"基本元字符","slug":"基本元字符","link":"#基本元字符","children":[]},{"level":3,"title":"特殊字符类","slug":"特殊字符类","link":"#特殊字符类","children":[]},{"level":3,"title":"字符集与范围","slug":"字符集与范围","link":"#字符集与范围","children":[]},{"level":3,"title":"边界匹配","slug":"边界匹配","link":"#边界匹配","children":[]}]},{"level":2,"title":"量词 (Quantifiers)","slug":"量词-quantifiers","link":"#量词-quantifiers","children":[{"level":3,"title":"常用量词","slug":"常用量词","link":"#常用量词","children":[]},{"level":3,"title":"数量范围的量词","slug":"数量范围的量词","link":"#数量范围的量词","children":[]},{"level":3,"title":"懒惰量词","slug":"懒惰量词","link":"#懒惰量词","children":[]},{"level":3,"title":"正则表达式的常见应用场景","slug":"正则表达式的常见应用场景","link":"#正则表达式的常见应用场景","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1724460174000,"updatedTime":1724466167000,"contributors":[{"name":"hackcpp","email":"liuheng2015@gmail.com","commits":2}]},"readingTime":{"minutes":5.19,"words":1558},"filePathRelative":"other/9 regexpr.md","localizedDate":"2024年8月24日","excerpt":"","autoDesc":true}');export{p as comp,g as data};
