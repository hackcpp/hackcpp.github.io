import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,b as a}from"./app-3qFdAme8.js";const t={},l=a(`<p>Git 是最常用的版本控制工具之一，广泛用于开发和项目管理中。以下是一些常用的 Git 命令及其详细说明：</p><h2 id="repository-操作" tabindex="-1"><a class="header-anchor" href="#repository-操作"><span>repository 操作</span></a></h2><h3 id="_1-git-init" tabindex="-1"><a class="header-anchor" href="#_1-git-init"><span>1. <strong>git init</strong></span></a></h3><ul><li><strong>作用</strong>：本地初始化一个新的 Git 仓库。</li><li><strong>用法</strong>：在一个空目录中运行 <code>git init</code>，Git 会创建一个 <code>.git</code> 目录，用于存储仓库的元数据。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-git-clone" tabindex="-1"><a class="header-anchor" href="#_2-git-clone"><span>2. <strong>git clone</strong></span></a></h3><ul><li><strong>作用</strong>：从远程仓库克隆一个仓库到本地。</li><li><strong>用法</strong>：<code>git clone</code> 后跟仓库 URL，可以将远程仓库复制到本地。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/user/repository.git</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-git-remote" tabindex="-1"><a class="header-anchor" href="#_3-git-remote"><span>3. <strong>git remote</strong></span></a></h3><ul><li><p><strong>作用</strong>：管理远程仓库地址。</p></li><li><p><strong>用法</strong>：</p><ul><li>查看当前的远程仓库：<code>git remote -v</code></li><li>添加新的远程仓库：<code>git remote add origin https://github.com/user/repo.git</code></li><li>删除远程仓库：<code>git remote remove origin</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  # 查看远程仓库</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/user/repo.git</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  # 添加远程仓库</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="修改管理" tabindex="-1"><a class="header-anchor" href="#修改管理"><span>修改管理</span></a></h2><h3 id="_1-git-add" tabindex="-1"><a class="header-anchor" href="#_1-git-add"><span>1. <strong>git add</strong></span></a></h3><ul><li><p><strong>作用</strong>：将文件添加到暂存区（stage），为下次提交做准备。</p></li><li><p><strong>用法</strong>：<code>git add</code> 后跟文件路径，或使用 <code>.</code> 添加当前目录下的所有更改。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-git-commit" tabindex="-1"><a class="header-anchor" href="#_2-git-commit"><span>2. <strong>git commit</strong></span></a></h3><ul><li><p><strong>作用</strong>：提交暂存区的更改，生成新的提交。</p></li><li><p><strong>用法</strong>：<code>git commit</code> 通常跟 <code>-m</code> 选项来添加提交信息，描述本次提交的内容。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Add new feature&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>修改commit信息</strong>： 使用 <code>--amend</code> 修改最后一次提交的信息或内容。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --amend</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Corrected commit message&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>多次提交合并</strong>：使用 <code>rebase</code> 合并最近几次的commit。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rebase</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HEAD～n</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="_3-git-status" tabindex="-1"><a class="header-anchor" href="#_3-git-status"><span>3. <strong>git status</strong></span></a></h3><ul><li><p><strong>作用</strong>：显示工作目录和暂存区的状态，查看哪些文件有更改、哪些文件被暂存、哪些文件未被跟踪。</p></li><li><p><strong>用法</strong>：运行 <code>git status</code> 可以看到当前分支的状态信息。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="_4-git-log" tabindex="-1"><a class="header-anchor" href="#_4-git-log"><span>4. <strong>git log</strong></span></a></h3><ul><li><p><strong>作用</strong>：显示仓库的提交历史记录。</p></li><li><p><strong>用法</strong>：<code>git log</code> 列出当前分支的所有提交。你可以使用 <code>--oneline</code> 选项简化输出，或者 <code>--graph</code> 查看分支图形。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> log</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> log</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --oneline</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> log</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --graph</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --oneline</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_5-git-diff" tabindex="-1"><a class="header-anchor" href="#_5-git-diff"><span>5. <strong>git diff</strong></span></a></h3><ul><li><p><strong>作用</strong>：查看工作目录、暂存区和最新提交之间的差异。</p></li><li><p><strong>用法</strong>：<code>git diff</code> 显示未暂存的更改，<code>git diff --staged</code> 显示已暂存但未提交的更改。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> diff</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> diff</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --staged</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_6-git-checkout" tabindex="-1"><a class="header-anchor" href="#_6-git-checkout"><span>6. <strong>git checkout</strong></span></a></h3><ul><li><strong>作用</strong>：恢复工作目录中文件的状态。</li><li><strong>用法</strong>：<code>git checkout --</code> 后跟文件。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> feature-branch</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file.txt</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  # 恢复文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-git-stash" tabindex="-1"><a class="header-anchor" href="#_7-git-stash"><span>7. <strong>git stash</strong></span></a></h3><ul><li><p><strong>作用</strong>：保存当前工作目录的更改，以便稍后恢复，而不影响当前的代码提交历史。</p></li><li><p><strong>用法</strong>：<code>git stash</code> 可以在不提交代码的情况下保存未完成的工作。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stash</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stash</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pop</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  # 恢复工作</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_8-git-reset" tabindex="-1"><a class="header-anchor" href="#_8-git-reset"><span>8. <strong>git reset</strong></span></a></h3><ul><li><p><strong>作用</strong>：重置当前分支的提交历史或工作目录状态，回退到之前的某个提交点。</p></li><li><p><strong>用法</strong>：</p><ul><li><code>git reset --soft</code>：保留工作区文件，只回退提交。</li><li><code>git reset --hard</code>：丢弃工作区文件和提交历史。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> reset</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --soft</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HEAD~1</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  # 回退一提交，但保留工作目录更改</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> reset</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --hard</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HEAD~1</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  # 丢弃更改</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理"><span>分支管理</span></a></h2><h3 id="_1-git-checkout" tabindex="-1"><a class="header-anchor" href="#_1-git-checkout"><span>1. <strong>git checkout</strong></span></a></h3><ul><li><p><strong>作用</strong>：切换分支。</p></li><li><p><strong>用法</strong>：<code>git checkout</code> 后跟分支名称，切换到指定分支</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> feature-branch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> feature-branch</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> #创建并切换分支</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-git-branch" tabindex="-1"><a class="header-anchor" href="#_2-git-branch"><span>2. <strong>git branch</strong></span></a></h3><ul><li><p><strong>作用</strong>：管理分支。列出、创建或删除分支。</p></li><li><p><strong>用法</strong>：</p><ul><li>列出分支：<code>git branch</code></li><li>创建新分支：<code>git branch branch_name</code></li><li>删除分支：<code>git branch -d branch_name</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  # 列出所有分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> feature-branch</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  # 创建新分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> feature-branch</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  # 删除分支</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-git-merge" tabindex="-1"><a class="header-anchor" href="#_3-git-merge"><span>3. <strong>git merge</strong></span></a></h3><ul><li><p><strong>作用</strong>：合并分支，将指定分支的更改合并到当前分支。</p></li><li><p><strong>用法</strong>：<code>git merge</code> 后跟要合并的分支名称。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> merge</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> feature-branch</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="_4-git-rebase" tabindex="-1"><a class="header-anchor" href="#_4-git-rebase"><span>4. <strong>git rebase</strong></span></a></h3><ul><li><p><strong>作用</strong>：将当前分支的更改应用到另一分支的顶端，从而保持线性历史。</p></li><li><p><strong>用法</strong>：<code>git rebase</code> 可以让你的提交历史保持整洁。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rebase</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h2 id="数据同步" tabindex="-1"><a class="header-anchor" href="#数据同步"><span>数据同步</span></a></h2><h3 id="_1-git-pull" tabindex="-1"><a class="header-anchor" href="#_1-git-pull"><span>1. <strong>git pull</strong></span></a></h3><ul><li><strong>作用</strong>：从远程仓库拉取更改并合并到本地分支。相当于 <code>git fetch</code> 加 <code>git merge</code>。</li><li><strong>用法</strong>：<code>git pull</code> 默认从当前跟踪的远程分支拉取更新。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-git-push" tabindex="-1"><a class="header-anchor" href="#_2-git-push"><span>2. <strong>git push</strong></span></a></h3><ul><li><p><strong>作用</strong>：将本地分支的提交推送到远程仓库。</p></li><li><p><strong>用法</strong>：<code>git push</code> 将更改推送到远程分支。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="_3-git-fetch" tabindex="-1"><a class="header-anchor" href="#_3-git-fetch"><span>3. <strong>git fetch</strong></span></a></h3><ul><li><strong>作用</strong>：从远程仓库获取最新的提交和分支信息，但不合并到本地分支。</li><li><strong>用法</strong>：<code>git fetch</code> 会下载远程仓库的所有更改，但不会自动合并。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fetch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="管理-submodule" tabindex="-1"><a class="header-anchor" href="#管理-submodule"><span>管理 Submodule</span></a></h2><p>Git Submodule 是一个非常有用的功能，允许你在一个 Git 仓库中包含另一个独立的 Git 仓库。这对于需要将多个项目组合在一起的场景非常实用，例如一个大型项目包含多个子模块。以下是常见的 Git Submodule 操作和使用场景的详细介绍。</p><h3 id="_1-添加-submodule" tabindex="-1"><a class="header-anchor" href="#_1-添加-submodule"><span>1. <strong>添加 Submodule</strong></span></a></h3><ul><li><p><strong>作用</strong>：在你的项目中添加一个子模块，它指向另一个 Git 仓库。</p></li><li><p><strong>命令</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> submodule</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">repository_ur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">l&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">pat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">h&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>示例：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> submodule</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/example/repo.git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> libs/repo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这会将 <code>repo</code> 仓库克隆到当前项目的 <code>libs/repo</code> 目录，并将其作为子模块添加。</p></li></ul><h3 id="_2-初始化和更新-submodule" tabindex="-1"><a class="header-anchor" href="#_2-初始化和更新-submodule"><span>2. <strong>初始化和更新 Submodule</strong></span></a></h3><ul><li><p><strong>初始化</strong>：当你克隆包含子模块的仓库时，子模块不会自动被克隆。你需要先初始化它们：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> submodule</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>更新子模块</strong>：初始化之后，使用以下命令克隆并更新子模块到最新提交：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> submodule</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>克隆仓库时自动初始化和更新子模块</strong>：可以使用 <code>--recurse-submodules</code> 选项在克隆时自动初始化并更新所有子模块：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --recurse-submodules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">repository_ur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">l&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="_3-查看-submodule-状态" tabindex="-1"><a class="header-anchor" href="#_3-查看-submodule-状态"><span>3. <strong>查看 Submodule 状态</strong></span></a></h3><ul><li><p><strong>作用</strong>：显示当前仓库中所有子模块的状态，例如子模块当前指向的 commit。</p></li><li><p><strong>命令</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> submodule</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出中会显示子模块的哈希、路径以及子模块是否是最新的。</p></li></ul><h3 id="_4-更新-submodule-到最新版本" tabindex="-1"><a class="header-anchor" href="#_4-更新-submodule-到最新版本"><span>4. <strong>更新 Submodule 到最新版本</strong></span></a></h3><ul><li><p><strong>作用</strong>：如果子模块的上游仓库有新的提交，你可以将子模块更新到最新版本。</p></li><li><p><strong>命令</strong>：</p><p>进入子模块目录，然后拉取最新的更改：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> libs/repo</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>回到主项目后，提交子模块的更新：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> libs/repo</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Update submodule&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_5-删除-submodule" tabindex="-1"><a class="header-anchor" href="#_5-删除-submodule"><span>5. <strong>删除 Submodule</strong></span></a></h3><ul><li><p><strong>作用</strong>：从项目中移除子模块。</p></li><li><p><strong>步骤</strong>：</p><ol><li><p><strong>删除子模块的条目</strong>：从 <code>.gitmodules</code> 文件中移除子模块条目。</p></li><li><p><strong>删除子模块配置</strong>：从 <code>.git/config</code> 文件中移除子模块的配置条目。</p></li><li><p><strong>删除子模块目录</strong>：手动删除子模块目录并从版本控制中移除：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> libs/repo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>提交更改</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Remove submodule&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol></li></ul><h3 id="_6-将-submodule-更新到特定的-commit" tabindex="-1"><a class="header-anchor" href="#_6-将-submodule-更新到特定的-commit"><span>6. <strong>将 Submodule 更新到特定的 Commit</strong></span></a></h3><ul><li><p><strong>作用</strong>：在某些场景下，你可能希望子模块保持在特定的 commit，而不是跟随最新的更改。</p></li><li><p><strong>命令</strong>：</p><p>进入子模块目录，检查出所需的 commit：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> libs/repo</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">commit_has</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">h&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>回到主项目，添加并提交子模块的状态：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> libs/repo</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Update submodule to specific commit&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_7-嵌套-submodule" tabindex="-1"><a class="header-anchor" href="#_7-嵌套-submodule"><span>7. <strong>嵌套 Submodule</strong></span></a></h3><p>子模块本身也可以包含子模块，称为嵌套子模块。这些子模块的操作与普通子模块类似，但需要特别注意初始化和更新嵌套结构时可能出现的复杂性。</p><h3 id="_8-处理-submodule-的常见问题" tabindex="-1"><a class="header-anchor" href="#_8-处理-submodule-的常见问题"><span>8. <strong>处理 Submodule 的常见问题</strong></span></a></h3><ul><li><strong>子模块指针未更新</strong>：当你更新子模块后，可能会忘记将更新提交到主仓库。确保更新完子模块后，执行 <code>git add</code> 和 <code>git commit</code> 将指针的变化保存到主仓库。</li><li><strong>子模块无法初始化或更新</strong>：确保子模块的 URL 正确，并且你有相应的权限克隆子模块。</li></ul><div class="hint-container tip"><p class="hint-container-title">总结</p><p>Git Submodule 是在大型项目或多仓库项目中非常有用的功能，可以让你更好地组织代码。通过上述命令，你可以轻松地添加、更新、管理和删除子模块。掌握这些操作将帮助你有效地管理项目依赖关系和模块化代码结构。</p></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener noreferrer">git 官方文档</a></li><li><a href="https://learngitbranching.js.org/?locale=zh_CN" target="_blank" rel="noopener noreferrer">在线学习git</a></li><li><a href="https://www.progit.cn/" target="_blank" rel="noopener noreferrer">git 在线文档</a></li></ul>`,67),n=[l];function h(r,d){return e(),s("div",null,n)}const o=i(t,[["render",h],["__file","1 git.html.vue"]]),p=JSON.parse('{"path":"/tools/1%20git.html","title":"git 基本使用","lang":"zh-CN","frontmatter":{"title":"git 基本使用","order":2,"category":["工具"],"tag":["git"],"editLink":false,"description":"Git 是最常用的版本控制工具之一，广泛用于开发和项目管理中。以下是一些常用的 Git 命令及其详细说明： repository 操作 1. git init 作用：本地初始化一个新的 Git 仓库。 用法：在一个空目录中运行 git init，Git 会创建一个 .git 目录，用于存储仓库的元数据。 2. git clone 作用：从远程仓库克隆一...","head":[["meta",{"property":"og:url","content":"https://hackcpp.github.io/tools/1%20git.html"}],["meta",{"property":"og:site_name","content":"程序员的白粥馆"}],["meta",{"property":"og:title","content":"git 基本使用"}],["meta",{"property":"og:description","content":"Git 是最常用的版本控制工具之一，广泛用于开发和项目管理中。以下是一些常用的 Git 命令及其详细说明： repository 操作 1. git init 作用：本地初始化一个新的 Git 仓库。 用法：在一个空目录中运行 git init，Git 会创建一个 .git 目录，用于存储仓库的元数据。 2. git clone 作用：从远程仓库克隆一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-23T08:02:00.000Z"}],["meta",{"property":"article:author","content":"hackcpp"}],["meta",{"property":"article:tag","content":"git"}],["meta",{"property":"article:modified_time","content":"2024-08-23T08:02:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"git 基本使用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-23T08:02:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hackcpp\\",\\"url\\":\\"https://github.com/hackcpp\\",\\"email\\":\\"liuheng2015@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"repository 操作","slug":"repository-操作","link":"#repository-操作","children":[{"level":3,"title":"1. git init","slug":"_1-git-init","link":"#_1-git-init","children":[]},{"level":3,"title":"2. git clone","slug":"_2-git-clone","link":"#_2-git-clone","children":[]},{"level":3,"title":"3. git remote","slug":"_3-git-remote","link":"#_3-git-remote","children":[]}]},{"level":2,"title":"修改管理","slug":"修改管理","link":"#修改管理","children":[{"level":3,"title":"1. git add","slug":"_1-git-add","link":"#_1-git-add","children":[]},{"level":3,"title":"2. git commit","slug":"_2-git-commit","link":"#_2-git-commit","children":[]},{"level":3,"title":"3. git status","slug":"_3-git-status","link":"#_3-git-status","children":[]},{"level":3,"title":"4. git log","slug":"_4-git-log","link":"#_4-git-log","children":[]},{"level":3,"title":"5. git diff","slug":"_5-git-diff","link":"#_5-git-diff","children":[]},{"level":3,"title":"6. git checkout","slug":"_6-git-checkout","link":"#_6-git-checkout","children":[]},{"level":3,"title":"7. git stash","slug":"_7-git-stash","link":"#_7-git-stash","children":[]},{"level":3,"title":"8. git reset","slug":"_8-git-reset","link":"#_8-git-reset","children":[]}]},{"level":2,"title":"分支管理","slug":"分支管理","link":"#分支管理","children":[{"level":3,"title":"1. git checkout","slug":"_1-git-checkout","link":"#_1-git-checkout","children":[]},{"level":3,"title":"2. git branch","slug":"_2-git-branch","link":"#_2-git-branch","children":[]},{"level":3,"title":"3. git merge","slug":"_3-git-merge","link":"#_3-git-merge","children":[]},{"level":3,"title":"4. git rebase","slug":"_4-git-rebase","link":"#_4-git-rebase","children":[]}]},{"level":2,"title":"数据同步","slug":"数据同步","link":"#数据同步","children":[{"level":3,"title":"1. git pull","slug":"_1-git-pull","link":"#_1-git-pull","children":[]},{"level":3,"title":"2. git push","slug":"_2-git-push","link":"#_2-git-push","children":[]},{"level":3,"title":"3. git fetch","slug":"_3-git-fetch","link":"#_3-git-fetch","children":[]}]},{"level":2,"title":"管理 Submodule","slug":"管理-submodule","link":"#管理-submodule","children":[{"level":3,"title":"1. 添加 Submodule","slug":"_1-添加-submodule","link":"#_1-添加-submodule","children":[]},{"level":3,"title":"2. 初始化和更新 Submodule","slug":"_2-初始化和更新-submodule","link":"#_2-初始化和更新-submodule","children":[]},{"level":3,"title":"3. 查看 Submodule 状态","slug":"_3-查看-submodule-状态","link":"#_3-查看-submodule-状态","children":[]},{"level":3,"title":"4. 更新 Submodule 到最新版本","slug":"_4-更新-submodule-到最新版本","link":"#_4-更新-submodule-到最新版本","children":[]},{"level":3,"title":"5. 删除 Submodule","slug":"_5-删除-submodule","link":"#_5-删除-submodule","children":[]},{"level":3,"title":"6. 将 Submodule 更新到特定的 Commit","slug":"_6-将-submodule-更新到特定的-commit","link":"#_6-将-submodule-更新到特定的-commit","children":[]},{"level":3,"title":"7. 嵌套 Submodule","slug":"_7-嵌套-submodule","link":"#_7-嵌套-submodule","children":[]},{"level":3,"title":"8. 处理 Submodule 的常见问题","slug":"_8-处理-submodule-的常见问题","link":"#_8-处理-submodule-的常见问题","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1724209337000,"updatedTime":1724400120000,"contributors":[{"name":"hackcpp","email":"liuheng2015@gmail.com","commits":1}]},"readingTime":{"minutes":6.91,"words":2072},"filePathRelative":"tools/1 git.md","localizedDate":"2024年8月21日","excerpt":"<p>Git 是最常用的版本控制工具之一，广泛用于开发和项目管理中。以下是一些常用的 Git 命令及其详细说明：</p>\\n<h2>repository 操作</h2>\\n<h3>1. <strong>git init</strong></h3>\\n<ul>\\n<li><strong>作用</strong>：本地初始化一个新的 Git 仓库。</li>\\n<li><strong>用法</strong>：在一个空目录中运行 <code>git init</code>，Git 会创建一个 <code>.git</code> 目录，用于存储仓库的元数据。</li>\\n</ul>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">  git</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> init</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{o as comp,p as data};
