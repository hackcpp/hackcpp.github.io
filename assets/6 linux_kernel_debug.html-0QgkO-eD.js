import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,e as n}from"./app-D2AQSyDT.js";const l={},e=n(`<p>使用 QEMU 和 GDB 调试 Linux 内核是一种非常强大的方法，可以帮助开发人员调试和分析内核的行为。下面将详细介绍如何设置和使用 QEMU 和 GDB 来调试 Linux 内核。</p><h3 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span>环境准备</span></a></h3><div class="hint-container tip"><p class="hint-container-title">系统环境</p><ul><li>22.04.3-Ubuntu</li><li>gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0</li><li>GNU gdb (Ubuntu 12.1-0ubuntu1~22.04.2) 12.1</li></ul></div><h4 id="编译-linux-内核源码" tabindex="-1"><a class="header-anchor" href="#编译-linux-内核源码"><span>编译 Linux 内核源码</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 获取 Linux 内核源码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.10.6.tar.xz</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 解压</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -xvf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> linux-6.10.6.tar.xz</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> linux-6.10.6</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 配置内核（使用默认配置）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> defconfig</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> #运行结束生成 .config 文件在当前目录</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 生成调试符号并编译内核</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -j$(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nproc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> vmlinux</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 拷贝编译好的镜像备用</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> vmlinux</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ../</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> arch/x86/boot/bzImage</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ../</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li><code>vmlinux</code>: 一个包含调试符号的未压缩内核映像，GDB 调试时会用到它,在当前目录<code>linux-6.10.6</code></li><li><code>bzImage</code>: 编译后的镜像 bzImage, 路径： <code>linux-6.10.6/arch/x86/boot/bzImage</code></li></ul></div><h4 id="启动文件系统制作" tabindex="-1"><a class="header-anchor" href="#启动文件系统制作"><span>启动文件系统制作</span></a></h4><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://busybox.net/downloads/busybox-1.36.1.tar.bz2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -xvf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> busybox-1.36.1.tar.bz2</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> busybox-1.36.1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> menuconfig</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#-&gt; Settings</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#　--- Build Options</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#　　[*] Build static binary (no shared libs) #进行静态编译 (CONFIG_STATIC)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 安装完成后生成的相关文件会在 _install 目录下</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#busybox-1.36.1/_install</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> _install</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> proc</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># init 为内核启动的初始化程序, 内容在下面</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 必须设置成可执行文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">chmod</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +x</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 打包启动的文件系统</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">find</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cpio</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --format=newc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">../../rootfs.img</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">init 文件内容</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#!/bin/sh</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;{==DBG==} INIT SCRIPT&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /tmp</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mount</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> proc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> none</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /proc</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mount</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sysfs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> none</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sys</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mount</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> debugfs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> none</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sys/kernel/debug</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mount</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tmpfs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> none</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /tmp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mdev</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;{==DBG==} Boot took $(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cut</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39; &#39; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-f1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /proc/uptime) seconds&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># normal user</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setsid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /bin/cttyhack</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> setuidgid</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /bin/sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="安装-qemu" tabindex="-1"><a class="header-anchor" href="#安装-qemu"><span>安装 QEMU</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> qemu</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> qemu-utils</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> qemu-kvm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> virt-manager</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> libvirt-daemon-system</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> libvirt-clients</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bridge-utils</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="使用-qemu-启动内核" tabindex="-1"><a class="header-anchor" href="#使用-qemu-启动内核"><span>使用 QEMU 启动内核</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>确保已经安装QEMU</li><li>确保以下文件准备好： <ul><li>rootfs.img</li><li>bzImage</li><li>vmlinux</li></ul></li></ul></div><p>使用 QEMU 启动内核，并开启 QEMU 的 GDB 远程调试功能。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#ls 当前目录文件</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#busybox-1.36.1 </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#busybox-1.36.1.tar.bz2 </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#rootfs.img</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#bzImage</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#vmlinux  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#linux-6.10.6 </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#linux-6.10.6.tar.xz</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">qemu-system-x86_64</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -kernel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./bzImage</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -initrd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ./rootfs.img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -append</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;nokaslr console=ttyS0&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -S</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -nographic</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">参数说明</p><ul><li><code>-kernel ./bzImage</code>：指定启用的内核镜像；</li><li><code>-initrd ./rootfs.img</code>：指定启动的文件系统；</li><li><code>-append &quot;nokaslr console=ttyS0&quot;</code> ：附加参数，其中 nokaslr 参数必须添加进来，防止内核起始地址随机化，这样会导致 gdb 断点不能命中；</li><li><code>-s</code> ：监听在 gdb 1234 端口；</li><li><code>-S</code> ：表示启动后就挂起，等待 gdb 连接；</li><li><code>-nographic</code>：不启动图形界面，调试信息输出到终端与参数 console=ttyS0 组合使用</li></ul></div><p>此时，QEMU 已经启动并等待 GDB 的连接，CPU 被暂停。</p><h3 id="使用-gdb-调试内核" tabindex="-1"><a class="header-anchor" href="#使用-gdb-调试内核"><span>使用 GDB 调试内核</span></a></h3><p>在另一个终端中启动 GDB，加载 <code>vmlinux</code> 文件（未压缩的内核映像），以便使用调试符号。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gdb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> vmlinux</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在 GDB 中，使用 <code>target remote</code> 命令连接到 QEMU 提供的 GDB 服务器：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gdb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">target</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :1234</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时，GDB 已经连接到 QEMU，并可以控制虚拟机的执行。可以在内核的特定位置设置断点，并开始调试。例如，可以设置断点在 <code>start_kernel</code> 函数：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gdb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> start_kernel</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后使用 <code>continue</code> 命令继续运行内核：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gdb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">c</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当内核运行到 <code>start_kernel</code> 时，GDB 会暂停并命中断点，接下来你可以逐步执行代码 (<code>step</code> 或 <code>next</code> 命令)，查看变量的值等。</p><h4 id="常用-gdb-命令" tabindex="-1"><a class="header-anchor" href="#常用-gdb-命令"><span>常用 GDB 命令</span></a></h4><ul><li><code>b &lt;function&gt;</code>：在函数入口处设置断点。</li><li><code>b *&lt;address&gt;</code>：在特定内存地址设置断点。</li><li><code>info breakpoints</code>：查看当前设置的断点。</li><li><code>c</code>：继续执行程序，直到下一个断点。</li><li><code>step</code>：单步执行代码，进入函数内部。</li><li><code>next</code>：单步执行代码，跳过函数调用。</li><li><code>print &lt;variable&gt;</code>：打印变量的值。</li><li><code>x/&lt;n&gt; &lt;address&gt;</code>：查看指定地址的内存内容。</li></ul><div class="hint-container important"><p class="hint-container-title">注意事项</p><ul><li>内核编译时需要启用调试符号 (.config 文件<code>CONFIG_DEBUG_INFO=y</code>)。</li><li>QEMU 的 <code>-s</code> 和 <code>-S</code> 参数用于设置 GDB 远程调试的端口和暂停启动。</li></ul></div><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考：</span></a></h3><ul><li><a href="https://www.kernel.org/doc/html/latest/translations/zh_CN/dev-tools/gdb-kernel-debugging.html" target="_blank" rel="noopener noreferrer">官方文档</a></li><li><a href="https://www.ebpf.top/post/qemu_gdb_busybox_debug_kernel/" target="_blank" rel="noopener noreferrer">其他资料1</a></li><li><a href="https://cloud.tencent.com/developer/article/2009491" target="_blank" rel="noopener noreferrer">其他资料2</a></li></ul>`,32),t=[e];function h(k,d){return a(),s("div",null,t)}const c=i(l,[["render",h],["__file","6 linux_kernel_debug.html.vue"]]),o=JSON.parse('{"path":"/other/6%20linux_kernel_debug.html","title":"利用QEMU+GDB调试Linux内核","lang":"zh-CN","frontmatter":{"title":"利用QEMU+GDB调试Linux内核","order":2,"category":["其他"],"tag":["Linux","GDB","kernel","QEMU"],"editLink":false,"description":"使用 QEMU 和 GDB 调试 Linux 内核是一种非常强大的方法，可以帮助开发人员调试和分析内核的行为。下面将详细介绍如何设置和使用 QEMU 和 GDB 来调试 Linux 内核。 环境准备 系统环境 22.04.3-Ubuntu gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 GNU gdb (Ubuntu...","head":[["meta",{"property":"og:url","content":"https://hackcpp.github.io/other/6%20linux_kernel_debug.html"}],["meta",{"property":"og:site_name","content":"程序员的白粥馆"}],["meta",{"property":"og:title","content":"利用QEMU+GDB调试Linux内核"}],["meta",{"property":"og:description","content":"使用 QEMU 和 GDB 调试 Linux 内核是一种非常强大的方法，可以帮助开发人员调试和分析内核的行为。下面将详细介绍如何设置和使用 QEMU 和 GDB 来调试 Linux 内核。 环境准备 系统环境 22.04.3-Ubuntu gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 GNU gdb (Ubuntu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-23T08:02:00.000Z"}],["meta",{"property":"article:author","content":"Mr.Hackcpp"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:tag","content":"GDB"}],["meta",{"property":"article:tag","content":"kernel"}],["meta",{"property":"article:tag","content":"QEMU"}],["meta",{"property":"article:modified_time","content":"2024-08-23T08:02:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"利用QEMU+GDB调试Linux内核\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-23T08:02:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hackcpp\\",\\"url\\":\\"/portfolio.html\\"}]}"]]},"headers":[{"level":3,"title":"环境准备","slug":"环境准备","link":"#环境准备","children":[]},{"level":3,"title":"使用 QEMU 启动内核","slug":"使用-qemu-启动内核","link":"#使用-qemu-启动内核","children":[]},{"level":3,"title":"使用 GDB 调试内核","slug":"使用-gdb-调试内核","link":"#使用-gdb-调试内核","children":[]},{"level":3,"title":"参考：","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1724333044000,"updatedTime":1724400120000,"contributors":[{"name":"hackcpp","email":"liuheng2015@gmail.com","commits":1}]},"readingTime":{"minutes":3.31,"words":992},"filePathRelative":"other/6 linux_kernel_debug.md","localizedDate":"2024年8月22日","excerpt":"","autoDesc":true}');export{c as comp,o as data};
