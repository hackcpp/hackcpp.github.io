import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as e}from"./app-Bav-wHSp.js";const l={},n=e(`<p>Qt 的 Model-View 框架是一种用于处理和显示数据的灵活机制，特别适合需要在用户界面中展示大量或复杂数据的应用程序。通过将数据和显示逻辑解耦，Model-View 框架提供了更高的灵活性和可维护性。Qt 的 Model-View 框架包含三个主要组件：Model（模型）、View（视图）和 Delegate（委托）。</p><h3 id="model-view-框架的核心概念" tabindex="-1"><a class="header-anchor" href="#model-view-框架的核心概念"><span>Model-View 框架的核心概念</span></a></h3><h4 id="model-模型" tabindex="-1"><a class="header-anchor" href="#model-模型"><span>Model（模型）</span></a></h4><p>Model 是数据的抽象表示，负责存储和管理数据，并向 View 提供访问这些数据的接口。Model 不直接与 UI 打交道，而是通过信号和槽机制通知 View 数据的变化。Qt 提供了几个现成的模型类，如 <code>QStandardItemModel</code> 和 <code>QStringListModel</code>，开发者也可以通过继承 <code>QAbstractItemModel</code>、<code>QAbstractTableModel</code> 或 <code>QAbstractListModel</code> 来自定义模型。</p><p><strong>Model 的主要职责</strong>：</p><ul><li><strong>管理数据</strong>：模型负责存储和管理数据，包括对数据的增删改查操作。</li><li><strong>提供接口</strong>：模型通过标准化的接口提供数据给 View。</li><li><strong>通知数据变更</strong>：模型会在数据发生变化时发出信号，通知 View 更新显示。</li></ul><p>Qt 中常用的 Model 类：</p><ul><li><strong>QAbstractItemModel</strong>：所有自定义模型的基类，适合树状结构数据。</li><li><strong>QAbstractListModel</strong>：用于一维列表数据的基类。</li><li><strong>QAbstractTableModel</strong>：用于二维表格数据的基类。</li><li><strong>QStandardItemModel</strong>：提供标准的项目模型，实现了表格和树状结构的支持。</li></ul><p><strong>示例</strong>：使用 <code>QStandardItemModel</code> 来存储和操作数据。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">QStandardItemModel </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">model </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> QStandardItemModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setHorizontalHeaderLabels</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">QStandardItem </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">item1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> QStandardItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;John&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">QStandardItem </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">item2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> QStandardItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;25&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">appendRow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({item1, item2});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="view-视图" tabindex="-1"><a class="header-anchor" href="#view-视图"><span>View（视图）</span></a></h4><p>View 负责展示数据，是用户与数据进行交互的界面部分。View 通过访问 Model 提供的数据，并将这些数据渲染到屏幕上。常用的视图类包括 <code>QListView</code>、<code>QTableView</code> 和 <code>QTreeView</code>，它们分别用于显示列表、表格和树形数据。</p><p><strong>View 的主要职责</strong>：</p><ul><li><strong>显示数据</strong>：View 从 Model 中获取数据并进行显示。</li><li><strong>用户交互</strong>：View 处理用户的输入，如点击、编辑等。</li><li><strong>数据同步</strong>：View 会自动更新显示，确保与 Model 数据保持一致。</li></ul><p>Qt 中常用的 View 类：</p><ul><li><strong>QListView</strong>：用于显示列表数据。</li><li><strong>QTableView</strong>：用于显示表格数据。</li><li><strong>QTreeView</strong>：用于显示树形结构数据。</li></ul><p><strong>示例</strong>：使用 <code>QTableView</code> 显示 <code>QStandardItemModel</code> 的数据。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">QTableView </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">view </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> QTableView</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(model);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">show</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="delegate-委托" tabindex="-1"><a class="header-anchor" href="#delegate-委托"><span>Delegate（委托）</span></a></h4><p>Delegate 是 View 和 Model 之间的中介，用于定制数据的显示和编辑。通过委托，开发者可以控制单元格的外观和编辑方式。Qt 默认的委托类是 <code>QStyledItemDelegate</code>，你可以继承这个类来自定义数据的显示和编辑行为。</p><p><strong>Delegate 的主要职责</strong>：</p><ul><li><strong>渲染数据</strong>：委托负责将 Model 中的数据渲染为可视化的控件或元素。</li><li><strong>编辑数据</strong>：委托还负责处理数据的编辑，提供自定义的编辑控件和逻辑。</li></ul><p><strong>示例</strong>：自定义委托，通过 <code>QStyledItemDelegate</code> 渲染数据。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CustomDelegate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> QStyledItemDelegate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Q_OBJECT</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    CustomDelegate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">QObject</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">parent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> nullptr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) : </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">QStyledItemDelegate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(parent) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> paint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">QPainter</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">painter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> QStyleOptionViewItem</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">option</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> QModelIndex</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> override</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        painter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">save</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 自定义绘制逻辑</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        painter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">drawText</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">option</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, Qt::AlignCenter, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        painter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">restore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 在视图中使用自定义委托</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setItemDelegate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CustomDelegate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="model-view-的数据流" tabindex="-1"><a class="header-anchor" href="#model-view-的数据流"><span>Model-View 的数据流</span></a></h3><p>Model-View 模式的关键在于数据与 UI 的分离，数据流的方向如下：</p><ol><li><strong>View 获取数据</strong>：View 通过 <code>setModel()</code> 设置模型，并通过模型的标准接口（如 <code>data()</code>、<code>rowCount()</code>、<code>columnCount()</code>）获取数据并显示在界面上。</li><li><strong>用户交互</strong>：用户在 View 中进行操作（如点击、编辑），这些操作会通过委托发送到 Model，Model 根据操作更新数据。</li><li><strong>Model 通知 View</strong>：当 Model 数据发生变化时，Model 通过信号通知 View，View 自动刷新显示。</li></ol><h3 id="数据绑定与更新" tabindex="-1"><a class="header-anchor" href="#数据绑定与更新"><span>数据绑定与更新</span></a></h3><p>在 Qt 的 Model-View 模式中，数据更新主要依赖于信号与槽机制。Model 通过 <code>dataChanged()</code> 等信号通知 View 数据已更改，View 会根据这些信号自动更新显示内容。常用的更新信号包括：</p><ul><li><strong>dataChanged()</strong>：当模型中的某个数据项发生变化时发出。</li><li><strong>layoutChanged()</strong>：当模型的布局发生变化时发出，例如排序、筛选等操作。</li><li><strong>rowsInserted()</strong>、<strong>rowsRemoved()</strong>：当插入或删除行时发出。</li></ul><h3 id="qt-中的-model-view-与-mvc" tabindex="-1"><a class="header-anchor" href="#qt-中的-model-view-与-mvc"><span>Qt 中的 Model-View 与 MVC</span></a></h3><p>Qt 的 Model-View 框架类似于传统的 MVC（Model-View-Controller）模式，但它没有显式的 Controller。Qt 的设计将 Controller 的职责分散到 View 和 Delegate 中：</p><ul><li><strong>View</strong>：负责展示数据，并处理用户交互。</li><li><strong>Delegate</strong>：负责处理数据的呈现和编辑。</li></ul><p>通过这种设计，Qt 的 Model-View 框架能够更加灵活地支持各种数据展示场景，开发者可以更自由地定制数据的显示和交互行为。</p><h3 id="自定义模型" tabindex="-1"><a class="header-anchor" href="#自定义模型"><span>自定义模型</span></a></h3><p>虽然 Qt 提供了多种现成的模型类，但在实际应用中，经常需要创建自定义模型，以适应复杂的数据结构和特定的业务需求。自定义模型需要继承 <code>QAbstractItemModel</code>、<code>QAbstractTableModel</code> 或 <code>QAbstractListModel</code>，并实现相关的接口方法。</p><p><strong>常见需要实现的方法</strong>：</p><ul><li><strong>rowCount()</strong>：返回模型的行数。</li><li><strong>columnCount()</strong>：返回模型的列数。</li><li><strong>data()</strong>：返回指定索引处的数据。</li><li><strong>setData()</strong>：用于修改指定索引处的数据。</li><li><strong>headerData()</strong>：返回模型的表头数据。</li></ul><p><strong>示例</strong>：自定义一个简单的表格模型。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CustomTableModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> QAbstractTableModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Q_OBJECT</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    CustomTableModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">QObject</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">parent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> nullptr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) : </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">QAbstractTableModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(parent) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> rowCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> QModelIndex</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">parent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> QModelIndex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> override</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 5 行</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> columnCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> QModelIndex</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">parent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> QModelIndex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> override</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 3 列</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    QVariant</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> QModelIndex</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> role</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Qt::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DisplayRole</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> override</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (role </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Qt::DisplayRole) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> QString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Row%1, Column%2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">arg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">row</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">arg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">column</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> QVariant</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代理模型" tabindex="-1"><a class="header-anchor" href="#代理模型"><span>代理模型</span></a></h3><p>Qt 提供了一些代理模型（Proxy Model）来对原始模型的数据进行转换或过滤。常用的代理模型有：</p><ul><li><strong>QSortFilterProxyModel</strong>：用于对数据进行排序和过滤。</li><li><strong>QIdentityProxyModel</strong>：直接映射原始模型，适合做数据的装饰或修改。</li></ul><p>使用代理模型可以在不修改原始模型的情况下，对数据进行排序、过滤或其他转换操作。</p><p><strong>示例</strong>：使用 <code>QSortFilterProxyModel</code> 进行排序。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">QSortFilterProxyModel </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">proxyModel </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> QSortFilterProxyModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">proxyModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setSourceModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(model);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">proxyModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, Qt::AscendingOrder);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 对第 0 列进行升序排序</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(proxyModel);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">总结</p><p>Qt 的 Model-View 框架通过将数据和显示逻辑解耦，提供了更高的灵活性和可维护性。无论是使用现成的模型类，还是通过自定义模型，开发者都能够以更清晰的方式管理复杂的数据展示和用户交互。通过委托机制，Qt 允许开发者定制数据的显示和编辑，使得 UI 的表现力更强。而代理模型则进一步扩展了数据处理的能力，使得数据的排序、过滤等操作更加方便。</p></div>`,47),t=[n];function h(k,p){return a(),s("div",null,t)}const o=i(l,[["render",h],["__file","9 model_view_in_qt.html.vue"]]),g=JSON.parse('{"path":"/design/9%20model_view_in_qt.html","title":"Model-View 框架","lang":"zh-CN","frontmatter":{"title":"Model-View 框架","order":2,"category":["架构设计"],"tag":["设计模式","Model-View","Qt"],"editLink":false,"description":"Qt 的 Model-View 框架是一种用于处理和显示数据的灵活机制，特别适合需要在用户界面中展示大量或复杂数据的应用程序。通过将数据和显示逻辑解耦，Model-View 框架提供了更高的灵活性和可维护性。Qt 的 Model-View 框架包含三个主要组件：Model（模型）、View（视图）和 Delegate（委托）。 Model-View 框...","head":[["meta",{"property":"og:url","content":"https://hackcpp.github.io/design/9%20model_view_in_qt.html"}],["meta",{"property":"og:site_name","content":"程序员的白粥馆"}],["meta",{"property":"og:title","content":"Model-View 框架"}],["meta",{"property":"og:description","content":"Qt 的 Model-View 框架是一种用于处理和显示数据的灵活机制，特别适合需要在用户界面中展示大量或复杂数据的应用程序。通过将数据和显示逻辑解耦，Model-View 框架提供了更高的灵活性和可维护性。Qt 的 Model-View 框架包含三个主要组件：Model（模型）、View（视图）和 Delegate（委托）。 Model-View 框..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-22T14:38:31.000Z"}],["meta",{"property":"article:author","content":"hackcpp"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"Model-View"}],["meta",{"property":"article:tag","content":"Qt"}],["meta",{"property":"article:modified_time","content":"2024-08-22T14:38:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Model-View 框架\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-22T14:38:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hackcpp\\",\\"url\\":\\"https://github.com/hackcpp\\",\\"email\\":\\"liuheng2015@gmail.com\\"}]}"]]},"headers":[{"level":3,"title":"Model-View 框架的核心概念","slug":"model-view-框架的核心概念","link":"#model-view-框架的核心概念","children":[]},{"level":3,"title":"Model-View 的数据流","slug":"model-view-的数据流","link":"#model-view-的数据流","children":[]},{"level":3,"title":"数据绑定与更新","slug":"数据绑定与更新","link":"#数据绑定与更新","children":[]},{"level":3,"title":"Qt 中的 Model-View 与 MVC","slug":"qt-中的-model-view-与-mvc","link":"#qt-中的-model-view-与-mvc","children":[]},{"level":3,"title":"自定义模型","slug":"自定义模型","link":"#自定义模型","children":[]},{"level":3,"title":"代理模型","slug":"代理模型","link":"#代理模型","children":[]}],"git":{"createdTime":1724337511000,"updatedTime":1724337511000,"contributors":[{"name":"hackcpp","email":"liuheng2015@gmail.com","commits":1}]},"readingTime":{"minutes":5.77,"words":1730},"filePathRelative":"design/9 model_view_in_qt.md","localizedDate":"2024年8月22日","autoDesc":true,"excerpt":"<p>Qt 的 Model-View 框架是一种用于处理和显示数据的灵活机制，特别适合需要在用户界面中展示大量或复杂数据的应用程序。通过将数据和显示逻辑解耦，Model-View 框架提供了更高的灵活性和可维护性。Qt 的 Model-View 框架包含三个主要组件：Model（模型）、View（视图）和 Delegate（委托）。</p>\\n<h3>Model-View 框架的核心概念</h3>\\n<h4>Model（模型）</h4>\\n<p>Model 是数据的抽象表示，负责存储和管理数据，并向 View 提供访问这些数据的接口。Model 不直接与 UI 打交道，而是通过信号和槽机制通知 View 数据的变化。Qt 提供了几个现成的模型类，如 <code>QStandardItemModel</code> 和 <code>QStringListModel</code>，开发者也可以通过继承 <code>QAbstractItemModel</code>、<code>QAbstractTableModel</code> 或 <code>QAbstractListModel</code> 来自定义模型。</p>"}');export{o as comp,g as data};
