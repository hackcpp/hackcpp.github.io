import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,a as n}from"./app-CkStCYb2.js";const l={},t=n(`<p>在现代编程中，保护敏感信息至关重要。常见的方法有运行时加密，但这种方式在某些情况下可能不足够安全，因为加密密钥和算法都可能在运行时暴露。为了解决这一问题，可以采用一种利用 <code>constexpr</code> 实现编译时加密，运行时解密的方法。本文将介绍这一技术，并展示一个具体的实现示例。</p><h3 id="什么是-constexpr" tabindex="-1"><a class="header-anchor" href="#什么是-constexpr"><span>什么是 <a href="https://en.cppreference.com/w/cpp/language/constexpr" target="_blank" rel="noopener noreferrer"><code>constexpr</code></a>？</span></a></h3><p><code>constexpr</code> 是 C++11 引入的一个关键字，允许我们在编译时计算表达式的值。这意味着某些计算可以在编译时完成，从而提高运行时性能。在我们的例子中，我们使用 <code>constexpr</code> 实现编译时加密。</p><h3 id="编译时加密与运行时解密的工作原理" tabindex="-1"><a class="header-anchor" href="#编译时加密与运行时解密的工作原理"><span>编译时加密与运行时解密的工作原理</span></a></h3><p>我们通过定义一个 <code>constexpr</code> 函数来实现字符的加密和解密。然后，使用模板类在编译时对字符串进行加密，并在运行时对其进行解密。这样，敏感信息在编译时就被加密，从而不会以明文形式出现在可执行文件中。</p><h3 id="实现示例" tabindex="-1"><a class="header-anchor" href="#实现示例"><span>实现示例</span></a></h3><p>以下是一个完整的实现<a href="https://godbolt.org/z/7rdExbxbh" target="_blank" rel="noopener noreferrer">示例</a>：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 用于字符加密和解密的constexpr函数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">constexpr</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> xor_character</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">unsigned</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> c </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">^</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 模板类用于编译时加密和运行时解密</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">unsigned</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SIZE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EncryptString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 构造函数在编译时对字符串进行加密</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    constexpr</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> EncryptString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> raw_str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">unsigned</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SIZE </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">i) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            m_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> xor_character</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">raw_str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i], i);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        m_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[SIZE </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 添加字符串结束符</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 解密函数在运行时对字符串进行解密</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char*</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> decrypt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        unsigned</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SIZE</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">i) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            m_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> xor_character</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">m_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i], i);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        m_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[SIZE</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 添加字符串结束符</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> m_data;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mutable</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> m_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[SIZE]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 宏定义用于简化加密字符串的使用</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> PROTECTED_STR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) []{ </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    constexpr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> EncryptString</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(str)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(str);</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">decrypt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  std::endl;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    PROTECTED_STR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;heng&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码详解" tabindex="-1"><a class="header-anchor" href="#代码详解"><span>代码详解</span></a></h3><ol><li><p><strong><code>xor_character</code> 函数</strong>:</p><ul><li>使用 XOR 操作对字符进行加密和解密。密钥是字符的位置索引。</li></ul></li><li><p><strong><code>EncryptString</code> 类</strong>:</p><ul><li>模板类，用于在编译时加密字符串。</li><li>构造函数通过 <code>xor_character</code> 函数对输入字符串进行加密，并存储在 <code>m_data</code> 数组中。</li><li><code>decrypt</code> 函数在运行时对字符串进行解密。</li></ul></li><li><p><strong><code>PROTECTED_STR</code> 宏</strong>:</p><ul><li>利用 lambda 表达式和 <code>constexpr</code> 特性，简化加密字符串的使用。</li><li>在运行时对加密的字符串进行解密并返回。</li></ul></li><li><p><strong><code>main</code> 函数</strong>:</p><ul><li>演示如何使用 <code>PROTECTED_STR</code> 宏来加密和解密字符串，并将解密后的字符串输出。</li></ul></li></ol><p>利用 <code>constexpr</code> 实现编译时加密和运行时解密是一种有效保护敏感信息的方法。本文展示了该技术的一个具体实现示例，并详细解释了其工作原理和优点。通过这种方式，可以提高应用程序的安全性，防止敏感信息在编译后被轻易获取。</p>`,11),e=[t];function h(p,k){return a(),i("div",null,e)}const c=s(l,[["render",h],["__file","2 encrypt_string.html.vue"]]),A=JSON.parse('{"path":"/other/2%20encrypt_string.html","title":"constexpr 实现编译时加密","lang":"zh-CN","frontmatter":{"title":"constexpr 实现编译时加密","order":2,"category":["其他"],"tag":["c++","constexpr"],"editLink":false,"description":"在现代编程中，保护敏感信息至关重要。常见的方法有运行时加密，但这种方式在某些情况下可能不足够安全，因为加密密钥和算法都可能在运行时暴露。为了解决这一问题，可以采用一种利用 constexpr 实现编译时加密，运行时解密的方法。本文将介绍这一技术，并展示一个具体的实现示例。 什么是 constexpr？ constexpr 是 C++11 引入的一个关键...","head":[["meta",{"property":"og:url","content":"https://hackcpp.github.io/other/2%20encrypt_string.html"}],["meta",{"property":"og:site_name","content":"程序员的白粥馆"}],["meta",{"property":"og:title","content":"constexpr 实现编译时加密"}],["meta",{"property":"og:description","content":"在现代编程中，保护敏感信息至关重要。常见的方法有运行时加密，但这种方式在某些情况下可能不足够安全，因为加密密钥和算法都可能在运行时暴露。为了解决这一问题，可以采用一种利用 constexpr 实现编译时加密，运行时解密的方法。本文将介绍这一技术，并展示一个具体的实现示例。 什么是 constexpr？ constexpr 是 C++11 引入的一个关键..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-14T05:51:25.000Z"}],["meta",{"property":"article:author","content":"hackcpp"}],["meta",{"property":"article:tag","content":"c++"}],["meta",{"property":"article:tag","content":"constexpr"}],["meta",{"property":"article:modified_time","content":"2024-08-14T05:51:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"constexpr 实现编译时加密\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-14T05:51:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hackcpp\\",\\"url\\":\\"https://github.com/hackcpp\\",\\"email\\":\\"liuheng2015@gmail.com\\"}]}"]]},"headers":[{"level":3,"title":"什么是 constexpr？","slug":"什么是-constexpr","link":"#什么是-constexpr","children":[]},{"level":3,"title":"编译时加密与运行时解密的工作原理","slug":"编译时加密与运行时解密的工作原理","link":"#编译时加密与运行时解密的工作原理","children":[]},{"level":3,"title":"实现示例","slug":"实现示例","link":"#实现示例","children":[]},{"level":3,"title":"代码详解","slug":"代码详解","link":"#代码详解","children":[]}],"git":{"createdTime":1723613308000,"updatedTime":1723614685000,"contributors":[{"name":"liuheng","email":"liuheng2015@gmail.com","commits":2}]},"readingTime":{"minutes":2.6,"words":779},"filePathRelative":"other/2 encrypt_string.md","localizedDate":"2024年8月14日","autoDesc":true,"excerpt":"<p>在现代编程中，保护敏感信息至关重要。常见的方法有运行时加密，但这种方式在某些情况下可能不足够安全，因为加密密钥和算法都可能在运行时暴露。为了解决这一问题，可以采用一种利用 <code>constexpr</code> 实现编译时加密，运行时解密的方法。本文将介绍这一技术，并展示一个具体的实现示例。</p>\\n<h3><a class=\\"header-anchor\\" href=\\"#什么是-constexpr\\"><span>什么是 </span></a><a href=\\"https://en.cppreference.com/w/cpp/language/constexpr\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>constexpr</code></a>？</h3>"}');export{c as comp,A as data};
