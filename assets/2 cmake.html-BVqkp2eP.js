import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,e as a}from"./app-CQZDJZ-z.js";const l={},n=a(`<p>CMake 是一个跨平台的构建系统生成工具，广泛用于 C/C++ 项目的构建管理。它可以生成适用于不同编译器和操作系统的构建系统文件，如 Makefile、Ninja 文件或 Visual Studio 工程文件。以下是 CMake 的基本教程，帮助你快速上手。</p><h3 id="安装-cmake" tabindex="-1"><a class="header-anchor" href="#安装-cmake"><span><strong>安装 CMake</strong></span></a></h3><p>CMake 支持多平台，以下是不同系统的安装方式：</p><ul><li><strong>Ubuntu/Debian</strong>：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt-get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cmake</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><strong>macOS</strong>（使用 Homebrew）：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">brew</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cmake</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><strong>Windows</strong>： 通过 <a href="https://cmake.org/download/" target="_blank" rel="noopener noreferrer">CMake 官方网站</a> 下载安装程序。</li></ul><h3 id="cmake-基本概念" tabindex="-1"><a class="header-anchor" href="#cmake-基本概念"><span><strong>CMake 基本概念</strong></span></a></h3><ul><li><strong>CMakeLists.txt</strong>：CMake 的核心文件，包含构建系统的配置和构建指令。每个 CMake 项目都至少需要一个 <code>CMakeLists.txt</code> 文件。</li><li><strong>生成器</strong>：CMake 可以为不同平台生成相应的构建系统，如 Makefiles、Ninja 文件或 Visual Studio 项目文件。</li><li><strong>构建目录</strong>：通常，CMake 项目采用 &quot;out-of-source&quot; 构建，即构建文件和源文件分离。</li></ul><h3 id="cmakelists-txt-的基本结构" tabindex="-1"><a class="header-anchor" href="#cmakelists-txt-的基本结构"><span><strong>CMakeLists.txt 的基本结构</strong></span></a></h3><p>一个简单的 <code>CMakeLists.txt</code> 文件通常包含以下内容：</p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 声明最低 CMake 版本要求</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">cmake_minimum_required</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(VERSION 3.10)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 定义项目名称和语言</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">project</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(HelloWorld VERSION 1.0 LANGUAGES C CXX)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 添加可执行文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">add_executable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hello main.cpp)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>cmake_minimum_required()</code>：指定最低 CMake 版本。</li><li><code>project()</code>：定义项目的名称和版本信息。</li><li><code>add_executable()</code>：定义一个可执行文件，并指定源文件。</li></ul><h3 id="编写简单的-cmake-项目" tabindex="-1"><a class="header-anchor" href="#编写简单的-cmake-项目"><span><strong>编写简单的 CMake 项目</strong></span></a></h3><h4 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构"><span>项目结构</span></a></h4><p>创建一个简单的项目结构：</p><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>my_project/</span></span>
<span class="line"><span>├── CMakeLists.txt</span></span>
<span class="line"><span>└── main.cpp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="main-cpp-示例" tabindex="-1"><a class="header-anchor" href="#main-cpp-示例"><span><code>main.cpp</code> 示例</span></a></h4><p>在 <code>main.cpp</code> 中编写简单的 C++ 代码：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello, World!&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cmakelists-txt-示例" tabindex="-1"><a class="header-anchor" href="#cmakelists-txt-示例"><span><code>CMakeLists.txt</code> 示例</span></a></h4><p>创建一个最简单的 <code>CMakeLists.txt</code> 文件，如下所示：</p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">cmake_minimum_required</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(VERSION 3.10)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">project</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(HelloWorld)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">add_executable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hello main.cpp)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成并构建项目" tabindex="-1"><a class="header-anchor" href="#生成并构建项目"><span><strong>生成并构建项目</strong></span></a></h3><h4 id="_5-1-创建构建目录" tabindex="-1"><a class="header-anchor" href="#_5-1-创建构建目录"><span>5.1 创建构建目录</span></a></h4><p>推荐使用 &quot;out-of-source&quot; 构建，将所有构建文件放到单独的目录中：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2-运行-cmake-命令" tabindex="-1"><a class="header-anchor" href="#_5-2-运行-cmake-命令"><span>5.2 运行 CMake 命令</span></a></h4><p>在构建目录中运行 CMake：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cmake</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ..</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这会生成一个适合当前平台的构建系统文件（如 <code>Makefile</code> 或 Visual Studio 项目）。</p><h4 id="_5-3-构建项目" tabindex="-1"><a class="header-anchor" href="#_5-3-构建项目"><span>5.3 构建项目</span></a></h4><p>生成构建文件后，可以使用生成的构建系统工具进行编译：</p><ul><li><p><strong>Makefile 构建</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>Ninja 构建</strong>（如果使用 Ninja 生成器）：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ninja</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>生成的可执行文件将位于构建目录中，你可以运行它：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./hello</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="常用-cmake-命令" tabindex="-1"><a class="header-anchor" href="#常用-cmake-命令"><span><strong>常用 CMake 命令</strong></span></a></h3><ul><li><p><strong>设置变量</strong>：</p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(MY_VARIABLE </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;value&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 <code>\${MY_VARIABLE}</code> 访问变量。</p></li><li><p><strong>添加库</strong>： 你可以使用 <code>add_library()</code> 添加静态或动态库：</p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">add_library</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(my_library STATIC src/mylib.cpp)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>包含目录</strong>： 使用 <code>include_directories()</code> 将目录添加到编译器的包含路径中：</p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">include_directories</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(include/)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>链接库</strong>： 使用 <code>target_link_libraries()</code> 为目标（如可执行文件或库）添加依赖库：</p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">target_link_libraries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hello my_library)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="查找包和依赖项" tabindex="-1"><a class="header-anchor" href="#查找包和依赖项"><span><strong>查找包和依赖项</strong></span></a></h3><p>CMake 提供了 <code>find_package()</code> 函数，用于查找系统中已安装的库。例如，查找并使用 Boost 库：</p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">find_package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Boost REQUIRED)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">include_directories</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${Boost_INCLUDE_DIRS}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">target_link_libraries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hello </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${Boost_LIBRARIES}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义编译选项" tabindex="-1"><a class="header-anchor" href="#自定义编译选项"><span><strong>自定义编译选项</strong></span></a></h3><p>通过 <code>target_compile_options()</code> 为编译器指定自定义编译选项：</p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">target_compile_options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hello PRIVATE -Wall -Wextra)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="安装目标" tabindex="-1"><a class="header-anchor" href="#安装目标"><span><strong>安装目标</strong></span></a></h3><p>CMake 还支持安装可执行文件和库。你可以使用 <code>install()</code> 函数：</p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">install</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(TARGETS hello DESTINATION bin)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="常见生成器" tabindex="-1"><a class="header-anchor" href="#常见生成器"><span><strong>常见生成器</strong></span></a></h3><ul><li><strong>Unix Makefiles</strong>：适用于大多数 Linux/Unix 系统，默认生成 <code>Makefile</code>。</li><li><strong>Ninja</strong>：适用于快速构建，可以通过 <code>-G Ninja</code> 选项指定生成器。</li><li><strong>Visual Studio</strong>：适用于 Windows，生成 Visual Studio 项目文件。</li></ul><div class="hint-container tip"><p class="hint-container-title">总结</p><p>CMake 是一个非常灵活和强大的构建工具，适合处理复杂的跨平台项目。通过以上基本操作和命令，你可以快速上手并使用 CMake 管理你的 C/C++ 项目。在此基础上，CMake 还支持很多高级功能，如测试、打包等，推荐深入学习并灵活运用。</p></div><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h3><p><a href="https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#introduction" target="_blank" rel="noopener noreferrer">cmake 文档</a></p>`,49),t=[n];function h(d,r){return e(),s("div",null,t)}const p=i(l,[["render",h],["__file","2 cmake.html.vue"]]),o=JSON.parse('{"path":"/tools/2%20cmake.html","title":"cmake 基本使用","lang":"zh-CN","frontmatter":{"title":"cmake 基本使用","order":2,"category":["工具"],"tag":["cmake"],"editLink":false,"description":"CMake 是一个跨平台的构建系统生成工具，广泛用于 C/C++ 项目的构建管理。它可以生成适用于不同编译器和操作系统的构建系统文件，如 Makefile、Ninja 文件或 Visual Studio 工程文件。以下是 CMake 的基本教程，帮助你快速上手。 安装 CMake CMake 支持多平台，以下是不同系统的安装方式： Ubuntu/Deb...","head":[["meta",{"property":"og:url","content":"https://hackcpp.github.io/tools/2%20cmake.html"}],["meta",{"property":"og:site_name","content":"程序员的白粥馆"}],["meta",{"property":"og:title","content":"cmake 基本使用"}],["meta",{"property":"og:description","content":"CMake 是一个跨平台的构建系统生成工具，广泛用于 C/C++ 项目的构建管理。它可以生成适用于不同编译器和操作系统的构建系统文件，如 Makefile、Ninja 文件或 Visual Studio 工程文件。以下是 CMake 的基本教程，帮助你快速上手。 安装 CMake CMake 支持多平台，以下是不同系统的安装方式： Ubuntu/Deb..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-23T08:02:00.000Z"}],["meta",{"property":"article:author","content":"Mr.Hackcpp"}],["meta",{"property":"article:tag","content":"cmake"}],["meta",{"property":"article:modified_time","content":"2024-08-23T08:02:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"cmake 基本使用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-23T08:02:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hackcpp\\",\\"url\\":\\"/portfolio.html\\"}]}"]]},"headers":[{"level":3,"title":"安装 CMake","slug":"安装-cmake","link":"#安装-cmake","children":[]},{"level":3,"title":"CMake 基本概念","slug":"cmake-基本概念","link":"#cmake-基本概念","children":[]},{"level":3,"title":"CMakeLists.txt 的基本结构","slug":"cmakelists-txt-的基本结构","link":"#cmakelists-txt-的基本结构","children":[]},{"level":3,"title":"编写简单的 CMake 项目","slug":"编写简单的-cmake-项目","link":"#编写简单的-cmake-项目","children":[]},{"level":3,"title":"生成并构建项目","slug":"生成并构建项目","link":"#生成并构建项目","children":[]},{"level":3,"title":"常用 CMake 命令","slug":"常用-cmake-命令","link":"#常用-cmake-命令","children":[]},{"level":3,"title":"查找包和依赖项","slug":"查找包和依赖项","link":"#查找包和依赖项","children":[]},{"level":3,"title":"自定义编译选项","slug":"自定义编译选项","link":"#自定义编译选项","children":[]},{"level":3,"title":"安装目标","slug":"安装目标","link":"#安装目标","children":[]},{"level":3,"title":"常见生成器","slug":"常见生成器","link":"#常见生成器","children":[]},{"level":3,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1724209337000,"updatedTime":1724400120000,"contributors":[{"name":"hackcpp","email":"liuheng2015@gmail.com","commits":1}]},"readingTime":{"minutes":3.13,"words":939},"filePathRelative":"tools/2 cmake.md","localizedDate":"2024年8月21日","excerpt":"","autoDesc":true}');export{p as comp,o as data};
