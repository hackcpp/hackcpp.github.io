import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,e as t}from"./app-Dd_Bxp1d.js";const l={},n=t(`<p><code>waitpid</code> 是 Unix/Linux 系统中用于等待子进程状态变化的系统调用。它允许父进程挂起执行，直到指定的子进程终止或者发生了其他指定的状态变化。</p><h3 id="waitpid-的语法" tabindex="-1"><a class="header-anchor" href="#waitpid-的语法"><span><code>waitpid</code> 的语法</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pid_t</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> waitpid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pid_t</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> pid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p><strong><code>pid</code></strong>: 要等待的子进程的进程 ID，特殊值如下：</p><ul><li><strong><code>pid &gt; 0</code></strong>: 等待进程 ID 为 <code>pid</code> 的特定子进程。</li><li><strong><code>pid == 0</code></strong>: 等待任何属于与调用进程相同进程组的子进程。</li><li><strong><code>pid &lt; -1</code></strong>: 等待进程组 ID 等于 <code>|pid|</code> 的任何子进程。</li><li><strong><code>pid == -1</code></strong>: 等待任何子进程，即等效于 <code>wait()</code>。</li></ul></li><li><p><strong><code>status</code></strong>: 指向一个 <code>int</code> 变量的指针，用于保存子进程的终止状态。</p></li><li><p><strong><code>options</code></strong>: 可以是 0 或者下列标志的组合：</p><ul><li><strong><code>WNOHANG</code></strong>: 如果没有子进程退出或状态变化，则立即返回，而不阻塞。</li><li><strong><code>WUNTRACED</code></strong>: 当一个子进程停止（例如被 <code>SIGSTOP</code> 信号停止）时返回其状态，而不是等到子进程终止。</li><li><strong><code>WCONTINUED</code></strong>: 如果子进程在接收到 <code>SIGCONT</code> 信号后继续运行，并且其状态尚未报告，则返回其状态。</li></ul></li></ul><h3 id="waitpid-的返回值" tabindex="-1"><a class="header-anchor" href="#waitpid-的返回值"><span><code>waitpid</code> 的返回值</span></a></h3><ul><li>成功时，返回等待的子进程的 PID。</li><li>如果设置了 <code>WNOHANG</code> 且没有立即可用的子进程终止状态，则返回 <code>0</code>。</li><li>失败时，返回 <code>-1</code>，并设置 <code>errno</code> 以指示错误。</li></ul><h3 id="status-变量解释" tabindex="-1"><a class="header-anchor" href="#status-变量解释"><span><code>status</code> 变量解释</span></a></h3><p><code>status</code> 变量是一个整数，包含子进程的状态信息。可以使用一系列宏来解析这个状态值：</p><ul><li><strong><code>WIFEXITED(status)</code></strong>：如果子进程正常终止，则返回非零值。</li><li><strong><code>WEXITSTATUS(status)</code></strong>：如果子进程正常终止，返回子进程的退出状态码。</li><li><strong><code>WIFSIGNALED(status)</code></strong>：如果子进程因信号终止，则返回非零值。</li><li><strong><code>WTERMSIG(status)</code></strong>：如果子进程因信号终止，返回导致终止的信号编号。</li><li><strong><code>WIFSTOPPED(status)</code></strong>：如果子进程处于停止状态，则返回非零值。</li><li><strong><code>WSTOPSIG(status)</code></strong>：如果子进程处于停止状态，返回导致停止的信号编号。</li><li><strong><code>WIFCONTINUED(status)</code></strong>：如果子进程已继续执行，则返回非零值（使用 <code>WCONTINUED</code> 标志时）。</li></ul><h3 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h3><p>以下是一个使用 <code>waitpid</code> 等待子进程终止的示例代码：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;sys/wait.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;unistd.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    pid_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pid </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fork</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (pid </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 子进程代码</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Child process running, PID: &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getpid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 模拟一些工作</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Child process terminating&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 42</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 子进程的退出状态码</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (pid </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 父进程代码</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> status;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        pid_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> waitpid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(pid, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">status, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 等待子进程终止</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (result </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            std::cerr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;waitpid failed&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Child process &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; terminated&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WIFEXITED</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(status)) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Child exited with status: &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> WEXITSTATUS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(status) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WIFSIGNALED</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(status)) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Child killed by signal: &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> WTERMSIG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(status) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WIFSTOPPED</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(status)) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Child stopped by signal: &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> WSTOPSIG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(status) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WIFCONTINUED</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(status)) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Child continued&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        std::cerr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;fork failed&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码解释" tabindex="-1"><a class="header-anchor" href="#代码解释"><span>代码解释</span></a></h3><ul><li><strong><code>fork()</code></strong>: 创建一个子进程。<code>pid</code> 为 0 表示子进程，在子进程中执行特定代码。<code>pid</code> 为正表示父进程，父进程等待子进程结束。</li><li><strong><code>waitpid(pid, &amp;status, 0)</code></strong>: 父进程调用 <code>waitpid</code> 等待子进程终止，并获取其退出状态。</li><li><strong><code>WIFEXITED(status)</code></strong>: 检查子进程是否正常退出。如果是，<code>WEXITSTATUS(status)</code> 将返回子进程的退出状态码。</li><li><strong><code>WIFSIGNALED(status)</code></strong>: 检查子进程是否被信号终止。如果是，<code>WTERMSIG(status)</code> 将返回导致子进程终止的信号编号。</li></ul><h3 id="waitpid-的常见应用" tabindex="-1"><a class="header-anchor" href="#waitpid-的常见应用"><span><code>waitpid</code> 的常见应用</span></a></h3><ol><li><strong>管理多个子进程</strong>：<code>waitpid</code> 可以与 <code>WNOHANG</code> 选项一起使用，用于轮询多个子进程的状态，适合管理并发运行的子进程。</li><li><strong>处理特定子进程</strong>：通过传递特定的 PID，<code>waitpid</code> 可以用于等待和管理某个特定子进程的状态变化。</li><li><strong>防止僵尸进程</strong>：父进程使用 <code>waitpid</code> 回收子进程的退出状态，可以防止僵尸进程的产生。</li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p><code>waitpid</code> 是一个强大的系统调用，允许父进程灵活地等待和处理子进程的状态变化。通过正确使用 <code>waitpid</code>，可以有效地管理并发进程，处理子进程的终止状态，防止僵尸进程。</p>`,18),e=[n];function h(p,d){return a(),s("div",null,e)}const A=i(l,[["render",h],["__file","4 waitpid.html.vue"]]),c=JSON.parse('{"path":"/other/4%20waitpid.html","title":"waitpid","lang":"zh-CN","frontmatter":{"title":"waitpid","order":2,"category":["其他"],"tag":["linux"],"editLink":false,"description":"waitpid 是 Unix/Linux 系统中用于等待子进程状态变化的系统调用。它允许父进程挂起执行，直到指定的子进程终止或者发生了其他指定的状态变化。 waitpid 的语法 pid: 要等待的子进程的进程 ID，特殊值如下： pid > 0: 等待进程 ID 为 pid 的特定子进程。 pid == 0: 等待任何属于与调用进程相同进程组的子进程...","head":[["meta",{"property":"og:url","content":"https://hackcpp.github.io/other/4%20waitpid.html"}],["meta",{"property":"og:site_name","content":"程序员的白粥馆"}],["meta",{"property":"og:title","content":"waitpid"}],["meta",{"property":"og:description","content":"waitpid 是 Unix/Linux 系统中用于等待子进程状态变化的系统调用。它允许父进程挂起执行，直到指定的子进程终止或者发生了其他指定的状态变化。 waitpid 的语法 pid: 要等待的子进程的进程 ID，特殊值如下： pid > 0: 等待进程 ID 为 pid 的特定子进程。 pid == 0: 等待任何属于与调用进程相同进程组的子进程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T02:01:07.000Z"}],["meta",{"property":"article:author","content":"Mr.Hackcpp"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:modified_time","content":"2024-08-20T02:01:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"waitpid\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-20T02:01:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hackcpp\\",\\"url\\":\\"/portfolio.html\\"}]}"]]},"headers":[{"level":3,"title":"waitpid 的语法","slug":"waitpid-的语法","link":"#waitpid-的语法","children":[]},{"level":3,"title":"waitpid 的返回值","slug":"waitpid-的返回值","link":"#waitpid-的返回值","children":[]},{"level":3,"title":"status 变量解释","slug":"status-变量解释","link":"#status-变量解释","children":[]},{"level":3,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[]},{"level":3,"title":"代码解释","slug":"代码解释","link":"#代码解释","children":[]},{"level":3,"title":"waitpid 的常见应用","slug":"waitpid-的常见应用","link":"#waitpid-的常见应用","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1724119267000,"updatedTime":1724119267000,"contributors":[{"name":"hackcpp","email":"liuheng2015@gmail.com","commits":1}]},"readingTime":{"minutes":3.5,"words":1049},"filePathRelative":"other/4 waitpid.md","localizedDate":"2024年8月20日","excerpt":"","autoDesc":true}');export{A as comp,c as data};
